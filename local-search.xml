<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Threadlocal的简单理解和部分源码分析</title>
    <link href="/2022/06/16/Threadlocal%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E5%92%8C%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2022/06/16/Threadlocal%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E5%92%8C%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>Mybatis-plus 可以实现字段自动填充功能，我通常会把多个表中共同字段抽离到了一个公共实体类中，如创建时间，创建人员，更新时间，更新人员等等，但是如何获取当前用户信息填入创建人员，更新人员字段？</p><p>ThreadLocal可以帮助我解决这个问题，我使用的的是JWT token 验证登陆状态，在每次Http请求时Header都会附带token，token中就会附带用户信息，当我们验证完后把用户信息set进Threadlocal，就可以在同一个线程中通过ThreadLocal获取用户信息。</p><h4 id="ThreadLocal理解"><a href="#ThreadLocal理解" class="headerlink" title="ThreadLocal理解"></a>ThreadLocal理解</h4><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202206162045177.png" alt="图源自网络"></p><p>ThreadLocal是线程安全的，它可以确保多线程访问时每个线程只能访问到自己的线程私有变量。它的线程隔离机制是通过把共享变量的</p><p>副本存储到Thread.threadLocals实现，每个线程只能访问自己的副本，就能避免线程安全问题。</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202206162045799.png" alt="Thread类截图"></p><p>ThreadLocal实际上就是一个操作Thread.threadLocals的外壳。Thread.threadLocals变量是一个keyvalueMap，Thread创建的时候默</p><p>认初始化threadLocals为null，在ThreadLocal首次读或写的时候初始化threadLocals。</p><p>ThreadLocalMap是ThreadLocal中的静态内部类，ThreadLocalMap通过Entry键值对的方式存储数据，是一个定制化的Map。</p><h4 id="ThreadLocal源码分析"><a href="#ThreadLocal源码分析" class="headerlink" title="ThreadLocal源码分析"></a>ThreadLocal源码分析</h4><h5 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h5><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(T value)</span> &#123;<br>  <span class="hljs-comment">//获取当前线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>  <span class="hljs-comment">//获取Thread.threadLocals</span><br>        <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>  <span class="hljs-comment">//map不为空就设入键值对 key为当前ThreadLocal对象 </span><br>        <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>)<br>            map.set(<span class="hljs-built_in">this</span>, value);<br>        <span class="hljs-keyword">else</span><br>          <span class="hljs-comment">//否则创建Thread.threadLocals</span><br>            createMap(t, value);<br>    &#125;<br></code></pre></td></tr></table></figure><p>我们可以发现ThreadLocal set的方法是对Thread.threadLocals这个定制化的Map进行操作</p><h6 id="getMap"><a href="#getMap" class="headerlink" title="getMap()"></a>getMap()</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ThreadLocalMap <span class="hljs-title function_">getMap</span><span class="hljs-params">(Thread t)</span> &#123;<br>  <span class="hljs-comment">//就是取出Thread.threadLocals</span><br>    <span class="hljs-keyword">return</span> t.threadLocals;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="createMap"><a href="#createMap" class="headerlink" title="createMap()"></a>createMap()</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">createMap</span><span class="hljs-params">(Thread t, T firstValue)</span> &#123;<br>  <span class="hljs-comment">//以当前TreadLocal对象为key 创建并初始化一个Thread.threadLocals</span><br>    t.threadLocals = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalMap</span>(<span class="hljs-built_in">this</span>, firstValue);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">//获取当前线程</span><br>     <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>  <span class="hljs-comment">//获取Thread.threadLocals</span><br>     <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>  <span class="hljs-comment">//map不为空 通过当前对象作为key 获取值</span><br>     <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>) &#123;<br>         ThreadLocalMap.<span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> map.getEntry(<span class="hljs-built_in">this</span>);<br>       <span class="hljs-comment">//map部位空还得判断当前键在不在map里</span><br>         <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>             <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>             <span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (T)e.value;<br>             <span class="hljs-keyword">return</span> result;<br>         &#125;<br>     &#125;<br>  <span class="hljs-comment">// map为空就创建并初始化</span><br>     <span class="hljs-keyword">return</span> setInitialValue();<br> &#125;<br></code></pre></td></tr></table></figure><h6 id="setInitialValue"><a href="#setInitialValue" class="headerlink" title="setInitialValue()"></a>setInitialValue()</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">private</span> T <span class="hljs-title function_">setInitialValue</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-comment">//初始化value为null</span><br>       <span class="hljs-type">T</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> initialValue();<br>     <span class="hljs-comment">//获取当前线程</span><br>       <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>     <span class="hljs-comment">//获取Thread.threadLocals</span><br>       <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>     <span class="hljs-comment">//判断map是否为空 不为空就把 key为当前对象 value为null 设置进map</span><br>       <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>)<br>           map.set(<span class="hljs-built_in">this</span>, value);<br>       <span class="hljs-keyword">else</span><br>         <span class="hljs-comment">//否则就创建并初始化Thread.threadLocals</span><br>           createMap(t, value);<br>       <span class="hljs-keyword">return</span> value;<br>   &#125;<br><br><span class="hljs-keyword">protected</span> T <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">//在当前线程里获取Thread.threadLocals</span><br>        <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> getMap(Thread.currentThread());<br>        <span class="hljs-keyword">if</span> (m != <span class="hljs-literal">null</span>)<br>           <span class="hljs-comment">//在map里移除 以当前对象为key的 键值对</span><br>            m.remove(<span class="hljs-built_in">this</span>);<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>并发编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThreadLocal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot集成WebSocket实现消息推送 记录</title>
    <link href="/2022/06/07/Springboot%E9%9B%86%E6%88%90WebSocket%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81-%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/06/07/Springboot%E9%9B%86%E6%88%90WebSocket%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81-%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="一、什么是WebSocket？"><a href="#一、什么是WebSocket？" class="headerlink" title="一、什么是WebSocket？"></a>一、什么是WebSocket？</h3><p>WebSocket是HTML5开始提供的一种在单个TCP连接上进行全双工通讯的协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。</p><p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据，在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。–来源自<a href="https://juejin.cn/post/6844904004762222606?utm_source=gold_browser_extension">https://juejin.cn/post/6844904004762222606?utm_source=gold_browser_extension</a></p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202206071031666.jpeg" alt="img"></p><center><small>(图源自网络)</small></center><h3 id="二、与springboot集成"><a href="#二、与springboot集成" class="headerlink" title="二、与springboot集成"></a>二、与springboot集成</h3><h4 id="引入spring-boot-starter-websocket依赖"><a href="#引入spring-boot-starter-websocket依赖" class="headerlink" title="引入spring-boot-starter-websocket依赖"></a>引入spring-boot-starter-websocket依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;springboot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="新建WebSocketHandler"><a href="#新建WebSocketHandler" class="headerlink" title="新建WebSocketHandler"></a>新建WebSocketHandler</h4><p>MercuryWebsocketHandler.class 对连接建立处理，消息处理，错误处理，以及连接关闭处理等等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MercuryWebSocketHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebSocketHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionEstablished</span><span class="hljs-params">(WebSocketSession webSocketSession)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">wsId</span> <span class="hljs-operator">=</span> WsSessionManager.getWsId(webSocketSession.getUri().getPath());<br>        <span class="hljs-keyword">if</span> (wsId != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 用户连接成功，放入在线用户缓存</span><br>            WsSessionManager.add(wsId, webSocketSession);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户登录已经失效!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(WebSocketSession webSocketSession, WebSocketMessage&lt;?&gt; webSocketMessage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> webSocketMessage.getPayload().toString();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">wsId</span> <span class="hljs-operator">=</span> WsSessionManager.getWsId(webSocketSession.getUri().getPath());<br>        System.out.println(<span class="hljs-string">&quot;server 接收到 &quot;</span> + wsId + <span class="hljs-string">&quot; 发送的 &quot;</span> + payload);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleTransportError</span><span class="hljs-params">(WebSocketSession webSocketSession, Throwable throwable)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.error(<span class="hljs-string">&quot;发生错误&quot;</span>, throwable);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionClosed</span><span class="hljs-params">(WebSocketSession webSocketSession, CloseStatus closeStatus)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">wsId</span> <span class="hljs-operator">=</span> WsSessionManager.getWsId(webSocketSession.getUri().getPath());<br>        <span class="hljs-keyword">if</span> (wsId != <span class="hljs-literal">null</span>) &#123;<br>            WsSessionManager.removeAndClose(wsId);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsPartialMessages</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="实现WebSocketConfigurer-来对握手前后进行逻辑处理"><a href="#实现WebSocketConfigurer-来对握手前后进行逻辑处理" class="headerlink" title="实现WebSocketConfigurer 来对握手前后进行逻辑处理"></a>实现WebSocketConfigurer 来对握手前后进行逻辑处理</h4><p>因为我需要对websocket 握手前进行校验，所以创建WebSocketHandshakeInterceptor.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketHandshakeInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpSessionHandshakeInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">beforeHandshake</span><span class="hljs-params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler webSocketHandler, Map&lt;String, Object&gt; attributes)</span><br>            <span class="hljs-keyword">throws</span> Exception &#123;<br>       <span class="hljs-comment">/**省略校验逻辑 校验不通过 return false**/</span><br>      <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.beforeHandshake(request, response, webSocketHandler, attributes);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHandshake</span><span class="hljs-params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception e)</span> &#123;<br>        <span class="hljs-built_in">super</span>.afterHandshake(request, response, wsHandler, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现WebSocketConfigurer"><a href="#实现WebSocketConfigurer" class="headerlink" title="实现WebSocketConfigurer"></a>实现WebSocketConfigurer</h4><p>新建websocket配置类，添加拦截地址以及相应的websocket消息处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSocket</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketServerConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebSocketConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerWebSocketHandlers</span><span class="hljs-params">(WebSocketHandlerRegistry registry)</span> &#123;<br>        <span class="hljs-comment">// 添加拦截地址以及相应的websocket消息处理器</span><br>        <span class="hljs-type">WebSocketHandlerRegistration</span> <span class="hljs-variable">registration</span> <span class="hljs-operator">=</span> registry<br>                .addHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MercuryWebSocketHandler</span>(), <span class="hljs-string">&quot;/api/websocket/**&quot;</span>)<br>                .setAllowedOrigins(<span class="hljs-string">&quot;*&quot;</span>);<br>        <span class="hljs-comment">// 添加拦截器</span><br>        registration.addInterceptors(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketHandshakeInterceptor</span>());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建WsSessionManager存储websocket-session"><a href="#创建WsSessionManager存储websocket-session" class="headerlink" title="创建WsSessionManager存储websocket session"></a>创建WsSessionManager存储websocket session</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WsSessionManager</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConcurrentHashMap&lt;String, WebSocketSession&gt; SESSION_POOL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">onlineCount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加 session</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wsId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String wsId, WebSocketSession session)</span> &#123;<br>        addOnlineCount();<br>        SESSION_POOL.put(wsId, session);<br>        log.info(<span class="hljs-string">&quot;有新窗口开始监听:&quot;</span> + wsId + <span class="hljs-string">&quot;,当前在线人数为:&quot;</span> + getOnlineCount());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除 session,会返回删除的 session</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wsId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> WebSocketSession <span class="hljs-title function_">remove</span><span class="hljs-params">(String wsId)</span> &#123;<br>        <span class="hljs-type">WebSocketSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> SESSION_POOL.remove(wsId);<br>        subOnlineCount();<br>        log.info(<span class="hljs-string">&quot;释放的wsId为：&quot;</span> + wsId);<br>        log.info(<span class="hljs-string">&quot;有一连接关闭！当前在线人数为&quot;</span> + getOnlineCount());<br>        <span class="hljs-keyword">return</span> session;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除并同步关闭连接</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wsId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeAndClose</span><span class="hljs-params">(String wsId)</span> &#123;<br>        <span class="hljs-type">WebSocketSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> remove(wsId);<br>        <span class="hljs-keyword">if</span> (session != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 关闭连接</span><br>                session.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                log.error(e.getMessage(),e);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得 session</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> WebSocketSession <span class="hljs-title function_">get</span><span class="hljs-params">(String wsId)</span> &#123;<br>        <span class="hljs-comment">// 获得 session</span><br>        <span class="hljs-keyword">return</span> SESSION_POOL.get(wsId);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实现服务器主动推送</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String wsId,String message)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        get(wsId).sendMessage(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextMessage</span>(message));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 非多机部署请注释此方法</span><br><span class="hljs-comment">     * 实现服务器主动推送 用于解决分布式websocket session不共享的问题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessageBroadcasting</span><span class="hljs-params">(String wsId,String message)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">RocketMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> SpringContextUtils.getBean(RocketMQProducer.class);<br>        <span class="hljs-type">WebSocketMessageSendDto</span> <span class="hljs-variable">webSocketMessageSendDto</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketMessageSendDto</span>();<br>        webSocketMessageSendDto.setWsId(wsId);<br>        webSocketMessageSendDto.setMessage(message);<br>        producer.sendObject(RocketMqConstant.Topic.MERCURY_WEB_SOCKET_MESSAGE_SEND,webSocketMessageSendDto);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOnlineCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> WsSessionManager.onlineCount.get();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOnlineCount</span><span class="hljs-params">()</span> &#123;<br>        WsSessionManager.onlineCount.getAndIncrement();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">subOnlineCount</span><span class="hljs-params">()</span> &#123;<br>        WsSessionManager.onlineCount.getAndDecrement();<br>    &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * url template：http://localhost/api/websocket/&#123;ws_id&#125;</span><br><span class="hljs-comment">    * 需要在url提取ws_id</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getWsId</span><span class="hljs-params">(String requestUrl)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        String[] split = requestUrl.split(<span class="hljs-string">&quot;/api/websocket/&quot;</span>);<br>        <span class="hljs-keyword">if</span> (split.length &lt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;invalid ws request&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> split[split.length - <span class="hljs-number">1</span>];<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="发送消息给前端"><a href="#发送消息给前端" class="headerlink" title="发送消息给前端"></a>发送消息给前端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">WsSessionManager.sendMessage(ws_id,message)<br></code></pre></td></tr></table></figure><h3 id="三、前端Vue与websocket集成"><a href="#三、前端Vue与websocket集成" class="headerlink" title="三、前端Vue与websocket集成"></a>三、前端Vue与websocket集成</h3><h4 id="新建websocket-js"><a href="#新建websocket-js" class="headerlink" title="新建websocket.js"></a>新建websocket.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// import &#123; showInfoMsg, showErrorMsg &#125; from &#x27;@/utils/popInfo&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">WS_API</span> = <span class="hljs-string">`ws://localhost:8080`</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">initWebSocket</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-string">&#x27;WebSocket&#x27;</span><span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)) &#123;<br>        <span class="hljs-title class_">ElementUI</span>.<span class="hljs-title class_">Notification</span>(&#123;<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;当前浏览器 Not support websocket&#x27;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br>            <span class="hljs-attr">duration</span>: <span class="hljs-number">0</span>,<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">const</span> wsUri = <span class="hljs-variable constant_">WS_API</span> + <span class="hljs-string">&#x27;/api/websocket/&#x27;</span> + e;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(wsUri); <span class="hljs-comment">//这里面的this都指向vue</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-property">onerror</span> = webSocketOnError;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-property">onmessage</span> = webSocketOnMessage;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-property">onclose</span> = closeWebsocket;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">webSocketOnError</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-comment">// console.log(e)</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>    <span class="hljs-title class_">ElementUI</span>.<span class="hljs-title class_">Notification</span>(&#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;WebSocket连接发生错误&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br>        <span class="hljs-attr">duration</span>: <span class="hljs-number">3000</span>,<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">webSocketOnMessage</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(e.<span class="hljs-property">data</span>);<br>  <span class="hljs-title class_">ElementUI</span>.<span class="hljs-title class_">Notification</span>(&#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">message</span>: data.<span class="hljs-property">msg</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>    <span class="hljs-attr">duration</span>: <span class="hljs-number">5000</span>,<br>  &#125;);<br>&#125;<br><br><span class="hljs-comment">// 关闭websiocket</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">closeWebsocket</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;连接已关闭...&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">close</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-title function_">close</span>(); <span class="hljs-comment">// 关闭 websocket</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e); <span class="hljs-comment">//监听关闭事件</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;关闭&#x27;</span>);<br>    &#125;;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">webSocketSend</span>(<span class="hljs-params">agentData</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-title function_">send</span>(agentData);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    initWebSocket,<br>    close,<br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="在main-js引入"><a href="#在main-js引入" class="headerlink" title="在main.js引入"></a>在main.js引入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> websocket <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;具体地址/websocket&quot;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$websocket</span> = websocket;<br></code></pre></td></tr></table></figure><p>然后在需要初始化websocket的地方，我是在App.vue全局mounted以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$websocket</span>.<span class="hljs-title function_">initWebSocket</span>(&#123;ws_id&#125;)<span class="hljs-comment">//请根据具体逻辑替换ws_id 我这里填入的是jwt token</span><br></code></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202206071032239.png" alt="image-20220606183934456"></p><center><small>进入页面就会连接websocket</small></center><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202206071032020.png" alt="image-20220606183828420"></p><center><small>后端通过调用WsSessionManager.sendMessage(ws_id,message)发送消息给具体用户</small></center><h3 id="三、解决websocket-session在分布式系统不共享问题"><a href="#三、解决websocket-session在分布式系统不共享问题" class="headerlink" title="三、解决websocket session在分布式系统不共享问题"></a>三、解决websocket session在分布式系统不共享问题</h3><p>在Spring所集成的WebSocket里面，每个ws连接都有一个对应的session：WebSocketSession，在Spring WebSocket中，我们建立ws连接之后可以通过类似这样的方式进行与客户端的通信。但是 ws的session无法序列化到redis， 因此在集群中，我们无法将所有WebSocketSession都缓存到redis进行session共享。</p><p>本文简单解决方案思路：利用rocketmq广播的特性使得每一台机子都能执行发送消息的动作，这样的操作可能会导致没有对应webSocketSession的机器执行一直没必要的操作，但是因为根据键值ws_id在map中定位session，可以忽略不计。</p><h4 id="简单定义一个数据传输对象"><a href="#简单定义一个数据传输对象" class="headerlink" title="简单定义一个数据传输对象"></a>简单定义一个数据传输对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketMessageSendDto</span> &#123;<br>    <span class="hljs-keyword">private</span> String wsId;<br>    <span class="hljs-keyword">private</span> String message;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h4><p>重点：messageModel &#x3D; MessageModel.BROADCASTING</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RocketMQMessageListener(topic = RocketMqConstant.Topic.MERCURY_WEB_SOCKET_MESSAGE_SEND</span><br><span class="hljs-meta">        , consumerGroup = RocketMqConstant.ComsumerGroup.MERCURY_WEB_SOCKET_MESSAGE_SEND,</span><br><span class="hljs-meta">        messageModel = MessageModel.BROADCASTING)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketMessageSendConsumer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RocketMQListener</span>&lt;WebSocketMessageSendDto&gt;, RocketMQPushConsumerLifecycleListener &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(WebSocketMessageSendDto dto)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;WebSocketMessageSendConsumer 接收到信息：&#123;&#125;&quot;</span>,JSON.toJSONString(dto));<br>        <span class="hljs-keyword">try</span> &#123;<br>            WsSessionManager.sendMessage(dto.getWsId(),dto.getMessage());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(e.getMessage(),e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareStart</span><span class="hljs-params">(DefaultMQPushConsumer consumer)</span> &#123;<br>        consumer.setMaxReconsumeTimes(<span class="hljs-number">2</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="消息生产者"><a href="#消息生产者" class="headerlink" title="消息生产者"></a>消息生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 实现服务器主动推送</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessageBroadcasting</span><span class="hljs-params">(String wsId,String message)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>     <span class="hljs-type">RocketMQTemplate</span> <span class="hljs-variable">rocketMQTemplate</span> <span class="hljs-operator">=</span> SpringContextUtils.getBean(RocketMQTemplate.class);<br>     <span class="hljs-type">WebSocketMessageSendDto</span> <span class="hljs-variable">webSocketMessageSendDto</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketMessageSendDto</span>();<br>     webSocketMessageSendDto.setWsId(wsId);<br>     webSocketMessageSendDto.setMessage(message);<br>   rocketMQTemplate.convertAndSend(RocketMqConstant.Topic.MERCURY_WEB_SOCKET_MESSAGE_SEND, JSON.toJSONString(webSocketMessageSendDto))<br> &#125;<br>  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Springboot</category>
      
      <category>WebSocket</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebSocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>科学上网 教程+工具</title>
    <link href="/2022/05/10/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%20%E6%95%99%E7%A8%8B+%E5%B7%A5%E5%85%B7/"/>
    <url>/2022/05/10/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%20%E6%95%99%E7%A8%8B+%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h3 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h3><ol><li>下载 <a href="https://github.com/yichengchen/clashX/releases/download/1.91.1/ClashX.dmg">ClashX 客户端</a>，安装后运行 ClashX。</li></ol><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205100016429.png" alt="img"></p><ol start="2"><li>导入订阅链接</li></ol><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205100006366.png" alt="img"></p><ol start="3"><li>设置为系统代理</li></ol><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205100006282.png" alt="img"></p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>1.下载 <a href="https://gs1024.com/client-download/Clash-Windows.7z">Clash for Windows 客户端</a>。</p><blockquote><p>注意：安装时请选择 为使用这台电脑的任何人安装（所有用户）<br>            运行时请右键，以管理员身份运行</p></blockquote><ol start="2"><li>导入订阅链接</li></ol><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205100008719.png" alt="img"></p><ol start="3"><li>打开客户端的侧边栏的 General，勾选 System Proxy 即可启用。</li></ol><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205100012810.png" alt="img"></p><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><ol><li><p>下载 <a href="https://gs1024.com/client-download/v2rayng.apk">v2rayNG 客户端</a>。</p></li><li><p>打开 V2rayNG 点击左上角的菜单图标打开侧边栏，随后点击 订阅设置。点击右上角的加号按钮，在新页面的备注中填写本站名称，地址输入框中粘贴订阅链接并点击右上角的 。</p></li></ol><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205100014398.png" alt="img"></p><ol start="3"><li>再次从侧边栏进入 设置 页面，点击 路由模式 将其更改为 绕过局域网及xx地址。</li></ol><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205100014561.png" alt="img"></p><ol start="4"><li>随后从侧边栏回到 配置文件 页面，点击右上角的省略号图标选择更新订阅。</li></ol><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205100014847.png" alt="img"></p><ol start="5"><li>点击选择您需要的节点，点击右下角的按钮即可连接。</li></ol><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205100015079.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>店匠插件开发-创建店匠应用</title>
    <link href="/2022/05/09/%E5%BA%97%E5%8C%A0%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91-%E5%88%9B%E5%BB%BA%E5%BA%97%E5%8C%A0%E5%BA%94%E7%94%A8/"/>
    <url>/2022/05/09/%E5%BA%97%E5%8C%A0%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91-%E5%88%9B%E5%BB%BA%E5%BA%97%E5%8C%A0%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>因为公司最近有需求需要开发商品批量导入到店匠，所以简单记录一下操作过程</p><h3 id="创建店匠私有App"><a href="#创建店匠私有App" class="headerlink" title="创建店匠私有App"></a>创建店匠私有App</h3><p>店匠官网：<a href="https://promo.shoplazza.cn/">https://promo.shoplazza.cn</a></p><p>官方教程：<a href="https://www.shoplazza.dev/reference">https://www.shoplazza.dev/reference</a></p><blockquote><p>创建店铺过程忽略</p></blockquote><p>进入店铺&gt;Apps&gt;管理私有App&gt;创建应用</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205091923902.png" alt="image-20220509151049132"></p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205091920237.png" alt="image-20220509192015711"></p><p>填入应用名称，开发者邮箱，然后按需选择接口调用权限</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205091923235.png" alt="image-20220509151137589"></p><p>创建app成功后即可获得Token、App UID、App Secret，后续开发会用到</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205091924048.png" alt="image-20220509151302132"></p><h3 id="使用Postman调试"><a href="#使用Postman调试" class="headerlink" title="使用Postman调试"></a>使用Postman调试</h3><p>使用Token和官方提供的API进行接口调试</p><p>填入token 复制CURL语句</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205091919133.png" alt="image-20220509191946173"></p><p>粘贴到postman进行调试</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205091924847.png" alt="image-20220509191446157"></p><p>有返回值且状态码为200表示测试成功</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205091924934.png" alt="image-20220509191601006"></p><blockquote><p>接下来就可以根据对应接口进行定制化开发啦，后续是公司定制化代码就不展示上来了</p></blockquote><h3 id="创建店匠公有App"><a href="#创建店匠公有App" class="headerlink" title="创建店匠公有App"></a>创建店匠公有App</h3><h4 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h4><p>官网：<a href="https://partners.shoplazza.com/">https://partners.shoplazza.com/</a></p><h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h4><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205092121186.png" alt="image-20220509212114676"></p><table><thead><tr><th align="left"><strong>App URL</strong></th><th align="left">App’s main service URL</th><th align="left">在应用程序安装过程中使用。 当商家安装您的应用或进入该应用时，您的应用会收到对该应用 URL 的 GET 请求。 您的应用在收到 GET 请求后需要启动 OAuth 流程来安装应用，无论应用安装过程是从 Shoplaza 应用商店的“添加应用”开始，还是从合作伙伴中心仪表板的“安装应用”开始。–谷歌翻译</th></tr></thead><tbody><tr><td align="left"><strong>Redirect URL</strong></td><td align="left">App’s redirect URL</td><td align="left">在应用程序安装过程中使用。 商户在 OAuth 过程中授予权限后，商户将被重定向到带有 OAuth 代码和其他字段的重定向 URL。–谷歌翻译</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205092121847.png" alt="image-20220509212107975"></p><h4 id="授权流程"><a href="#授权流程" class="headerlink" title="授权流程"></a>授权流程</h4><blockquote><p> 以下大部分内容是直接谷歌翻译自店匠官方</p></blockquote><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205092153822.png" alt="img"></p><center><small>基于商家、您的应用和 Shoplaza 的操作的 OAuth 流程-图源来自店匠官网</small></center><ol><li>商家发出安装应用程序的请求。</li><li>应用重定向到Shoplazza Store的应用安装页面，请求商家授权。</li><li>Shoplazza 商店的应用安装页面提示 OAuth 授权屏幕并请求商家授权所需的范围。</li><li>商家通过同意应用请求的权限来授权应用。</li><li>该应用程序收到一个授权代码。</li><li>该应用程序通过使用授权代码向 Shoplazza Store 发送请求来请求访问令牌。</li><li>Shoplazza 对应用程序进行身份验证，验证授权代码，然后发出并返回访问令牌。该应用程序现在可以从 Shoplazza 请求数据。</li><li>该应用程序使用访问令牌向<a href="https://www.shoplazza.dev/reference/overview">Shoplazza Open API</a>发出请求。</li><li>Shoplazza 验证访问令牌并返回请求的数据。</li></ol><h5 id="OAuth授权流程的步骤"><a href="#OAuth授权流程的步骤" class="headerlink" title="OAuth授权流程的步骤"></a>OAuth授权流程的步骤</h5><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205092153672.png" alt="img"></p><center><small>OAuth授权流程-图源来自店匠官网</small></center><blockquote><p> PHP和GO可以使用官网的SDK进行授权第二步，自行尝试</p></blockquote><h5 id="Java对接店匠OAuth授权流程"><a href="#Java对接店匠OAuth授权流程" class="headerlink" title="Java对接店匠OAuth授权流程"></a>Java对接店匠OAuth授权流程</h5>]]></content>
    
    
    <categories>
      
      <category>外贸电商</category>
      
    </categories>
    
    
    <tags>
      
      <tag>店匠</tag>
      
      <tag>外贸电商</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>让 Google 收录博客</title>
    <link href="/2022/05/08/%E8%AE%A9google-%E6%94%B6%E5%BD%95%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/05/08/%E8%AE%A9google-%E6%94%B6%E5%BD%95%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>注意：本文以Fluid主题当示例来介绍</p></blockquote><h3 id="Google-Search-Console配置"><a href="#Google-Search-Console配置" class="headerlink" title="Google Search Console配置"></a>Google Search Console配置</h3><p>进入网址<a href="https://search.google.com/search-console">https://search.google.com/search-console</a></p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081849682.png" alt="image-20220508183546777" /><p>我选择的是&lt;网址前缀&gt; 输入网址后提示</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081849684.png" alt="image-20220508183818914"></p><p>我选择的是HTML标识验证 把元标记复制添加到hexo配置</p><h3 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h3><p>因为上文中已使用覆盖配置的方式使<strong>主题配置</strong>放置在 &lt;主题&gt; 目录之外，所以我们需要在hexo根目录下修改_config.&lt;主题名称&gt;.yml即可</p><p>我这里是_config.fluid.yml，全局搜索comment找到以下内容添加google提供的meta</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081849685.png" alt="image-20220508183318695"></p><p>添加成功并Hexo部署</p><p>然后再回到Google Search Console点击验证，显示这个代表配置成功</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081849686.png" alt="image-20220508183634549"></p><h3 id="Google-Search-Console-请求编入索引"><a href="#Google-Search-Console-请求编入索引" class="headerlink" title="Google Search Console 请求编入索引"></a>Google Search Console 请求编入索引</h3><p>登录你的 <a href="https://search.google.com/search-console/about">Google search console</a>，登陆后在控制台点击网址检查。</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081849687.png" alt="image-20220508184304499"></p><p>点击请求编入索引，耐心等待</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081849688.png" alt="image-20220508184322245"></p><p>显示以下内容表示编入索引成功</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081849689.png" alt="image-20220508184351161"></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 配置评论功能</title>
    <link href="/2022/05/08/Hexo-%E9%85%8D%E7%BD%AE%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/05/08/Hexo-%E9%85%8D%E7%BD%AE%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<blockquote><p>注意：本文以Fluid主题当示例来介绍如何配置评论，其他主题请根据对应用户手册配置</p></blockquote><p>我是用的主题Fluid支持多种评论插件，utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | </p><p>cusdis，每种插件有不同的配置方法，为了和评论用户有真实反馈、长久的交互和尽可能简单配置我这里选择了基于 GitHub Issues实现的utterances</p><h3 id="新建github仓库"><a href="#新建github仓库" class="headerlink" title="新建github仓库"></a>新建github仓库</h3><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081715639.png" alt="image-20220508171452067"></p><p>（我这里已经创建过了，所以显示报错）</p><h3 id="github-Install-utterances-app"><a href="#github-Install-utterances-app" class="headerlink" title="github Install utterances app"></a>github Install utterances app</h3><p>utterances官网：<a href="https://utteranc.es/">https://utteranc.es/</a></p><p>点击此链接github安装<a href="https://github.com/apps/utterances">utterances app</a>。</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081720238.png" alt="image-20220508172011715"></p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081730113.png" alt="image-20220508172028588"></p><h3 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h3><p>因为上文中已使用覆盖配置的方式使<strong>主题配置</strong>放置在 &lt;主题&gt; 目录之外，所以我们需要在hexo根目录下修改_config.&lt;主题名称&gt;.yml即可</p><p>我这里是_config.fluid.yml，全局搜索comment找到以下内容开启评论并使用utterances插件 修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugin</span><br><span class="hljs-attr">comments:</span><br><span class="hljs-comment">#开启评论插件</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>  <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>  <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">utterances</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081730114.png" alt="image-20220508170721628"></p><p>配置utterances插件 在_config.fluid.yml文件全局搜索utterances找到以下内容修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Utterances</span><br><span class="hljs-comment"># 基于 GitHub Issues</span><br><span class="hljs-comment"># Based on GitHub Issues</span><br><span class="hljs-comment"># See: https://utteranc.es</span><br><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">repo仓库</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">label:</span> <span class="hljs-string">utterances</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><br>  <span class="hljs-attr">crossorigin:</span> <span class="hljs-string">anonymous</span><br></code></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>打开你的博客文章 看到以下内容 即为配置成功</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081730181.png" alt="image-20220508172837182"></p><p>注：如果有些页面没有出现此评论插件可以在文章开头手动打开</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081729044.png" alt="image-20220508172937108"></p><p>一旦有评论我就会第一时间收到邮件啦，我就会在第一时间回复啦🤪，欢迎评论</p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081734441.png" alt="image-20220508173435809" />]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 搭建博客Blog记录</title>
    <link href="/2022/05/07/Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2Blog%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/05/07/Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2Blog%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p><strong>我的第一篇文章 记录一下博客搭建过程</strong></p><center><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081923624.jpg" alt="GitHub+Hexo 搭建个人网站详细教程" style="width:100%;"/></center><center><small><font color="gray">(此图来源于网络)</font></small></center><h4 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h4><p>Hexo官网地址 &gt; <a href="https://hexo.io/">https://hexo.io/</a></p><blockquote><p>What is Hexo?</p><p>Hexo is a fast, simple and powerful blog framework. You write posts in <a href="http://daringfireball.net/projects/markdown/">Markdown</a> (or other markup languages) and Hexo generates static files with a beautiful theme in seconds.—引用自官网</p></blockquote><p>Hexo是什么？ Hexo是一个快速、简单且功能强大的博客框架。你用Markdown（或其他标记语言）写文章，Hexo会在几秒钟内生成带有漂亮主题的静态文件。</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/image-20220507225447240.png" alt="image-20220507225447240"></p><p>注：本文安装教程针对 Mac系统，部分命令不适用于Windows</p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul><li><p><a href="http://nodejs.org/">Node.js</a> (Should be at least Node.js 10.13, recommends 12.0 or higher)</p><p><code>brew install node</code></p><blockquote><p>官网：</p><ul><li>Windows: Download &amp; install <a href="https://git-scm.com/download/win">git</a>.</li><li>Mac: Install it with <a href="https://brew.sh/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> or <a href="http://sourceforge.net/projects/git-osx-installer/">installer</a>.</li><li>Linux (Ubuntu, Debian): <code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS): <code>sudo yum install git-core</code></li></ul></blockquote></li><li><p><a href="http://git-scm.com/">Git</a></p><p><code>brew install git</code></p><blockquote><p>官网：</p><ul><li>Windows: Install it with <a href="https://github.com/jasongin/nvs/">nvs</a> (recommended) or <a href="https://github.com/nvm-sh/nvm">nvm</a>.</li><li>Mac: Install it with <a href="https://brew.sh/">Homebrew</a> or <a href="http://www.macports.org/">MacPorts</a>.</li><li>Linux (DEB&#x2F;RPM-based): Install it with <a href="https://github.com/nodesource/distributions">NodeSource</a>.</li><li>Others: Install it through respective package manager. Refer to <a href="https://nodejs.org/en/download/package-manager/">the guide</a> provided by Node.js.</li></ul></blockquote></li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>npm install hexo-cli -g hexo init blog cd blog npm install</code></p><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p><code>hexo server</code></p><p>显示以下内容为启动成功</p><p><left><img src="/Users/casonmo/Documents/Typora/图片/image-20220507231042826.png" alt="image-20220507231042826" style="zoom:50%;" /></left></p><p>访问<a href="http://localhost:4000/">http://localhost:4000/</a> 即可进入你的博客</p><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>主题地址：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/image-20220507233206084.png" alt="image-20220507233206084"></p><p>挑选喜欢的主题 点击进入github地址</p><p>在初始化的hexo目录下执行git clone 到theme下指定目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs git">git clone https://github.com/fluid-dev/hexo-theme-fluid.git themes/fluid<br></code></pre></td></tr></table></figure><p>主题都会有自己的用户手册 我用的是Fluid主题 用户手册：<a href="https://hexo.fluid-dev.com/docs/start">https://hexo.fluid-dev.com/docs/start</a></p><p>主题跟这个用户手册配置就好了 我这里就不赘述了</p><h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><blockquote><p> 详细使用教程 <a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p></blockquote><ul><li>可以使用以下命令新建文章</li></ul><p><code>hexo new &quot;&lt;文章名称&gt;&quot;</code></p><ul><li><p>然后cd &lt;hexo目录&gt;&#x2F;source&#x2F;_posts 就可以用markdown语句编辑文档</p></li><li><p>可以在文件顶部通过tags 修改标签 、通过categories修改分类、通过hide隐藏文章、通过archives归档</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">搭建博客Blog记录</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-05-07 17:44:14</span><br><span class="hljs-attr">hide:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">archives:</span> <span class="hljs-string">/archives</span><br><span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">first</span> <span class="hljs-string">tags</span><br><span class="hljs-attr">categories:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">first</span> <span class="hljs-string">categories</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">&lt;正文内容&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/image-20220508045636333.png" alt="image-20220508045636333"></p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/image-20220508045657889.png" alt="image-20220508045657889"></p><h4 id="关于部署"><a href="#关于部署" class="headerlink" title="关于部署"></a>关于部署</h4><blockquote><p>Hexo 支持多种部署方式 具体可到官网查看：<a href="https://hexo.io/zh-cn/docs/one-command-deployment">https://hexo.io/zh-cn/docs/one-command-deployment</a></p></blockquote><h5 id="新建github仓库"><a href="#新建github仓库" class="headerlink" title="新建github仓库"></a>新建github仓库</h5><p>注意：固定名称&lt;用户名&gt;.github.io</p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/image-20220508050126798.png" alt="·" style="zoom:50%;" /><h5 id="关联git仓库和Hexo"><a href="#关联git仓库和Hexo" class="headerlink" title="关联git仓库和Hexo"></a>关联git仓库和Hexo</h5><p>在你初始化Hexo的根目录 修改_config.yml 在#Deployment下添加以下内容 注意空格</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">仓库地址</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">分支</span><br></code></pre></td></tr></table></figure><h5 id="安装部署插件"><a href="#安装部署插件" class="headerlink" title="安装部署插件"></a>安装部署插件</h5><p><code>npm install hexo-deployer-git --save</code></p><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><p><code>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</code></p><p>可简写为</p><p><code>hexo clean &amp;&amp; hexo g -d</code></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><p>覆盖配置可以使<strong>主题配置</strong>放置在 fluid 目录之外，避免在更新主题时丢失自定义的配置。</p><p>在博客目录下创建 <code>_config.&lt;主题名称&gt;.yml</code> 文件，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml (opens new window)</a>全部配置（或部分配置）复制过去。</p><p>以后如果修改任何主题配置，都只需修改 <code>_config.&lt;主题名称&gt;.yml</code> 的配置即可。</p><p><left><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/image-20220508154920223.png" alt="image-20220508154920223"  /></left></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
