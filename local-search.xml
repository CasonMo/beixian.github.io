<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Tiktok Shop 生成signature（java）</title>
    <link href="/2023/01/10/Tiktok-Shop-%E7%94%9F%E6%88%90signature%EF%BC%88java%EF%BC%89/"/>
    <url>/2023/01/10/Tiktok-Shop-%E7%94%9F%E6%88%90signature%EF%BC%88java%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>tiktok 官方文档：<a href="https://partner.tiktokshop.com/doc/page/261251">TikTok Shop Partner Center</a></p><p>因为tiktok官方文档生成signature只有go语言版本的</p><p>所以记录一下java版本生成tiktok shop 请求open api时需要的signature</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String <span class="hljs-title function_">getSignature</span><span class="hljs-params">(String uri, Map&lt;String, String&gt; parametersMap, String appSecret)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Map&lt;String, String&gt; tempParamsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;(Comparator.naturalOrder());<br>        tempParamsMap.putAll(parametersMap);<br>        tempParamsMap.remove(<span class="hljs-string">&quot;sign&quot;</span>);<br>        tempParamsMap.remove(<span class="hljs-string">&quot;access_token&quot;</span>);<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(uri);<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : tempParamsMap.entrySet()) &#123;<br>            input.append(entry.getKey()).append(entry.getValue());<br>        &#125;<br>        input = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(appSecret + input + appSecret);<br>        <span class="hljs-keyword">return</span> hmacSHA256(appSecret, input.toString());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * sha256_HMAC加密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> secret  秘钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 加密后字符串</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">hmacSHA256</span><span class="hljs-params">(String secret, String message)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Mac</span> <span class="hljs-variable">hmacSha256</span> <span class="hljs-operator">=</span> Mac.getInstance(<span class="hljs-string">&quot;HmacSHA256&quot;</span>);<br>        <span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">secret_key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(secret.getBytes(), <span class="hljs-string">&quot;HmacSHA256&quot;</span>);<br>        hmacSha256.init(secret_key);<br>        <span class="hljs-type">byte</span>[] bytes = hmacSha256.doFinal(message.getBytes());<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">hs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        String stmp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; bytes != <span class="hljs-literal">null</span> &amp;&amp; n &lt; bytes.length; n++) &#123;<br>            stmp = Integer.toHexString(bytes[n] &amp; <span class="hljs-number">0XFF</span>);<br>            <span class="hljs-keyword">if</span> (stmp.length() == <span class="hljs-number">1</span>)<br>                hs.append(<span class="hljs-string">&#x27;0&#x27;</span>);<br>            hs.append(stmp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> hs.toString().toLowerCase();<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p>原来的url参数加上app_key和timestamp即可</p><p><img src="/Users/casonmo/Documents/Typora/%E5%9B%BE%E7%89%87/image-20230110172708810.png" alt="image-20230110172708810"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>WooCommerce搭建（docker）</title>
    <link href="/2023/01/04/WooCommerce%E6%90%AD%E5%BB%BA%EF%BC%88docker%EF%BC%89/"/>
    <url>/2023/01/04/WooCommerce%E6%90%AD%E5%BB%BA%EF%BC%88docker%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>平台对接WooCommerce api 记录一下创建过程</p><blockquote><p>api地址:<a href="https://woocommerce.github.io/woocommerce-rest-api-docs/?python&from_wecom=1#introduction">Introduction – WooCommerce REST API Documentation - WP REST API v3</a></p></blockquote><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p><code>docker pull mysql  </code></p><p><code>docker run --name mysql -e MYSQL_ROOT_PASSWORD=&lt;密码&gt; -p 3306:3306 -d mysql</code></p><p>创建一个DB ：wordpress 编码utf8mb4</p><h2 id="wordpress"><a href="#wordpress" class="headerlink" title="wordpress"></a>wordpress</h2><p><code>docker pull wordpress:latest</code></p><p><code>docker run -d --name wordpress -e WORDPRESS_DB_HOST=mysql -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=&lt;mysql密码&gt; -e WORDPRESS_DB_NAME=wordpress -p 80:80 --link mysql:mysql wordpress</code></p><p>最好使用80端口 否则wordpress rest api无法使用</p><h2 id="WooCommerce"><a href="#WooCommerce" class="headerlink" title="WooCommerce"></a>WooCommerce</h2><p>在Plugins安装WooCommerce</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202301041630702.png" alt="image-20230104162118061"></p>]]></content>
    
    
    
    <tags>
      
      <tag>woocommerce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法笔记</title>
    <link href="/2022/12/27/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/12/27/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>特征</p><ul><li>自身调用：原问题可以分解为子问题，子问题和原问题的求解方法是一致的，即都是调用自身的同一个函数。</li><li>终止条件：递归必须有一个终止的条件，即不能无限循环地调用本身。</li></ul><p>解决递归问题三步曲</p><ul><li>第一步，定义函数功能</li><li>第二步，寻找递归终止条件</li><li>第二步，递推函数的等价关系式</li></ul><p>递归存在的问题</p><ul><li>递归调用层级太多，导致栈溢出问题<ul><li>调大JVM的栈空间内存</li><li>优化一下你的递归</li></ul></li><li>递归重复计算，导致效率低下<ul><li>备忘录</li></ul></li></ul><blockquote><p><strong>「题目：」</strong> 翻转一棵二叉树。</p><p><a href="https://leetcode-cn.com/problems/invert-binary-tree/">https://leetcode-cn.com/problems/invert-binary-tree/</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br> <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">invertTree</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-comment">//节点为空 或 不为叶子节点</span><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span> || (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>)) &#123;<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br>        <span class="hljs-comment">//翻转左子树</span><br>        invertTree(root.left);<br>        <span class="hljs-comment">//翻转右子树</span><br>        invertTree(root.right);<br>        <span class="hljs-comment">//将当前节点的左右子树交换</span><br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> root.left;<br>        root.left = root.right;<br>        root.right = temp;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h1><h2 id="BF算法（Brute-Force）"><a href="#BF算法（Brute-Force）" class="headerlink" title="BF算法（Brute Force）"></a>BF算法（Brute Force）</h2><p>我们将模式串和主串进行比较，一致时则继续比较下一字符，直到比较完整个模式串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strStr</span><span class="hljs-params">(String haystack, String needle)</span> &#123;<br>       <span class="hljs-type">char</span>[] haystackChars = haystack.toCharArray();<br>       <span class="hljs-type">char</span>[] needleChars = needle.toCharArray();<br>       <span class="hljs-keyword">if</span> (haystackChars.length &lt; needleChars.length || StringUtils.isBlank(haystack) || StringUtils.isBlank(needle)) &#123;<br>           <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>       &#125;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; haystackChars.length; i++) &#123;<br>           <span class="hljs-type">int</span> j;<br>           <span class="hljs-keyword">for</span> ( j= <span class="hljs-number">0</span>; j &lt; needleChars.length; j++) &#123;<br>               <span class="hljs-keyword">if</span> (haystackChars[i+j] != needleChars[j]) &#123;<br>                   <span class="hljs-keyword">break</span>;<br>               &#125;<br>           &#125;<br>           <span class="hljs-keyword">if</span> (j == needleChars.length) &#123;<br>               <span class="hljs-keyword">return</span> i;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构笔记</title>
    <link href="/2022/12/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/12/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p><strong>栈（stack）是限制插入和删除只能在一个位置上进行的表</strong>，该位置是表的末端叫做栈的顶（top），对栈的基本操作有 push(进栈)和 pop(出栈),前者相当于插入，后者则是删除最后插入的元素。</p><p>栈的另一个名字是 LIFO（先进后出）表</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StackTest</span> &#123;<br><br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-type">int</span>[] elems;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StackTest</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-built_in">this</span>.len = len;<br>        <span class="hljs-built_in">this</span>.elems = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[len];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span>= len - <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span>= -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;empty stack&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.elems[top];<br>        top--;<br>        <span class="hljs-keyword">return</span> val;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;full stack&quot;</span>);<br>        &#125;<br>        top++;<br>        elems[top] = i;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>像栈一样，队列（queue）也是表。然而使用队列时插入在一端进行而删除在另一端进行，遵守先进先出的规则。所以队列的另一个名字是（FIFO）。</p><p>队列的基本操作是入队（enqueue）:它是在表的末端(队尾(rear)插入一个元素。出队（dequeue）:出队他是删除在表的开头（队头(front)）的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QueueTest</span> &#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">rear</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">front</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> size;<br>    <span class="hljs-type">int</span>[] elems;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">QueueTest</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;<br>        <span class="hljs-built_in">this</span>.size = size;<br>        <span class="hljs-built_in">this</span>.elems = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">rear</span> <span class="hljs-operator">=</span>= front;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (rear + <span class="hljs-number">1</span>) % <span class="hljs-built_in">this</span>.size == front;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dequeue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;empty queue&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.front = (<span class="hljs-built_in">this</span>.front + <span class="hljs-number">1</span>) % <span class="hljs-built_in">this</span>.size;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.elems[<span class="hljs-built_in">this</span>.front];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enqueue</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;full queue&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.rear = (<span class="hljs-built_in">this</span>.rear + <span class="hljs-number">1</span>) % <span class="hljs-built_in">this</span>.size;<br>        <span class="hljs-built_in">this</span>.elems[<span class="hljs-built_in">this</span>.rear] = val;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h1><p>散列过程</p><ul><li>通过<strong>散列函数</strong>计算记录的散列地址，并按此<strong>散列地址</strong>存储该记录</li><li>查找时，我们通过<strong>同样的散列函数</strong>计算记录的散列地址，按此散列地址访问该记录</li></ul><p>散列函数构造方法</p><ul><li><p>直接定址法</p></li><li><p>数字分析法</p></li><li><p>折叠法</p></li><li><p>除法散列法</p></li><li><p>乘法散列法</p></li><li><p>随机数法</p></li><li><p>平方取中法</p></li></ul><p>处理散列冲突的方法</p><ul><li>开放地址法</li><li>链地址法</li><li>公共溢出区法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashTest</span> &#123;<br>    KeyValue[] elements;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HashTest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.elements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyValue</span>[size];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(String key,String value)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> key.hashCode() % <span class="hljs-built_in">this</span>.size;<br>        <span class="hljs-type">KeyValue</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.elements[index];<br>        <span class="hljs-keyword">if</span> (element != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">while</span> (element.next != <span class="hljs-literal">null</span>) &#123;<br>                element = element.next;<br>            &#125;<br>            <span class="hljs-type">KeyValue</span> <span class="hljs-variable">newKv</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyValue</span>(key, value);<br>            newKv.setNext(element);<br>            <span class="hljs-built_in">this</span>.elements[index] = newKv;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            element = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyValue</span>(key, value);<br>            <span class="hljs-built_in">this</span>.elements[index] = element;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> key.hashCode() % <span class="hljs-built_in">this</span>.size;<br>        <span class="hljs-type">KeyValue</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.elements[index];<br>        <span class="hljs-keyword">while</span> (!element.getKey().equals(key)) &#123;<br>            element=element.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> element.getValue();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KeyValue</span> &#123;<br>        <span class="hljs-keyword">private</span> String key;<br>        <span class="hljs-keyword">private</span> String value;<br>        <span class="hljs-keyword">private</span> KeyValue next;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> key;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setKey</span><span class="hljs-params">(String key)</span> &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> value;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(String value)</span> &#123;<br>            <span class="hljs-built_in">this</span>.value = value;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> KeyValue <span class="hljs-title function_">getNext</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> next;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(KeyValue next)</span> &#123;<br>            <span class="hljs-built_in">this</span>.next = next;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">KeyValue</span><span class="hljs-params">(String key, String value)</span> &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.next = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>定义：链表是一种递归的数据结构，他或者为空（null），或者是指向一个结点（node）的引用，该结点含有一个泛型的元素和一个指向另一条链表的引用。是一种线性表，但是他不是按线性顺序存取数据。链表在内存不是连续分配的</p><p>链表的类型</p><ul><li>单链表</li><li>双向链表</li></ul><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p>树是 n （n &gt;&#x3D; 0） 个节点的有限集。 n &#x3D; 0 时 我们称之为空树, 空树是树的特例。</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202212281826260.png" alt="image-20221228121105999"></p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202212281826519.png" alt="image-20221228121120312"></p><p>整理源自<a href="https://github.com/chefyuan/algorithm-base/blob/main/animation-simulation/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80.md">algorithm-base&#x2F;二叉树基础.md at main · chefyuan&#x2F;algorithm-base · GitHub</a></p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ul><li>每个节点最多有两棵子树，也就是说二叉树中不存在度大于 2 的节点，节点的度可以为 0，1，2。</li><li>左子树和右子树是有顺序的,有左右之分。</li><li>假如只有一棵子树 ，也要区分它是左子树还是右子树</li></ul><h2 id="特殊的二叉树"><a href="#特殊的二叉树" class="headerlink" title="特殊的二叉树"></a>特殊的二叉树</h2><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><p>满二叉树：在一棵二叉树中，<code>所有分支节点都存在左子树和右子树</code>，并且<code>所有的叶子都在同一层</code></p><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p>叶子结点只能出现在最下层和次下层，且最下层的叶子结点集中在树的左部。</p><h3 id="斜二叉树"><a href="#斜二叉树" class="headerlink" title="斜二叉树"></a>斜二叉树</h3><p>斜二叉树也就是斜的二叉树,所有的节点只有左子树的称为左斜树,所有节点只有右子树的二叉树称为右斜树.</p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>前序遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">traverse</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; arr)</span> &#123;<br>     <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>         <span class="hljs-keyword">return</span> root;<br>     &#125;<br>     arr.add(root.val);<br>     traverse(root.left, arr);<br>     traverse(root.right, arr);<br>     <span class="hljs-keyword">return</span> root;<br> &#125;<br></code></pre></td></tr></table></figure><p>中序遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">traverse</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; arr)</span> &#123;<br>     <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>         <span class="hljs-keyword">return</span> root;<br>     &#125;<br>     traverse(root.left, arr);<br>   arr.add(root.val);<br>     traverse(root.right, arr);<br>     <span class="hljs-keyword">return</span> root;<br> &#125;<br></code></pre></td></tr></table></figure><p>后序遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">traverse</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; arr)</span> &#123;<br>     <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>         <span class="hljs-keyword">return</span> root;<br>     &#125;<br>     traverse(root.left, arr);<br>     traverse(root.right, arr);<br>   arr.add(root.val);<br>     <span class="hljs-keyword">return</span> root;<br> &#125;<br></code></pre></td></tr></table></figure><p>层级遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;List&lt;Integer&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> list;<br>        &#125;<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        queue.offer(root);<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            List&lt;Integer&gt; temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-comment">//提前取出这层的size ，queue的size是不断变化的</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> queue.size();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">treeNode</span> <span class="hljs-operator">=</span> queue.poll();<br>              <span class="hljs-comment">//出队列前就取出这个节点的左右子节点</span><br>                <span class="hljs-keyword">if</span>(treeNode.left!=<span class="hljs-literal">null</span>) queue.offer(treeNode.left);<br>                <span class="hljs-keyword">if</span>(treeNode.right!=<span class="hljs-literal">null</span>) queue.offer(treeNode.right);<br>                temp.add(treeNode.val);<br>            &#125;<br>            list.add(temp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试问题记录-Mysql select count(1)、count(*)、count(column)</title>
    <link href="/2022/08/01/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95-Mysql-select-count-1-%E3%80%81count-%E3%80%81count-column/"/>
    <url>/2022/08/01/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95-Mysql-select-count-1-%E3%80%81count-%E3%80%81count-column/</url>
    
    <content type="html"><![CDATA[<blockquote><p>摘抄自网络</p></blockquote><p>count(*)：先把星号翻译为具体字段名字，多了一步翻译，效率差点<br>count(1)：计算有多少符合条件的行，可以理解为每行数据存在某个值固定的字段，计算有多少个固定值</p><p><strong>从结果来说：</strong></p><ul><li>count(*) 和 count(1) 没区别，都不会过滤 NULL</li><li>count(column) 会过滤 NULL</li></ul><p><strong>从速度来说：</strong></p><ul><li>如果只有一列，count(<em>) 效率最高</em></li><li><em>多列时，count(1) 效率高于 count(</em>)</li><li>如果列为主键，count(column) 效率最高</li><li>如果列不为主键，count(1) 效率比 count(column) 效率高</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>面试问题</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 通过requests爬取shopify collections商品</title>
    <link href="/2022/08/01/python-%E9%80%9A%E8%BF%87requests%E7%88%AC%E5%8F%96shopify-collections%E5%95%86%E5%93%81/"/>
    <url>/2022/08/01/python-%E9%80%9A%E8%BF%87requests%E7%88%AC%E5%8F%96shopify-collections%E5%95%86%E5%93%81/</url>
    
    <content type="html"><![CDATA[<p>简单使用requests爬取shopify商品信息</p><p>需要自行分析商品链接、标题、价格、描述、图片的选择器</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">import</span> bs4<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># collections地址</span><br>url_pro = <span class="hljs-string">&#x27;https://www.naluboutique.com/collections/all&#x27;</span><br><br><span class="hljs-comment"># 分析xpath</span><br>product_link_select = <span class="hljs-string">&#x27;.grid-product__content .grid-product__link&#x27;</span><br>product_title_select = <span class="hljs-string">&#x27;.product-single__title&#x27;</span><br>product_price_select = <span class="hljs-string">&#x27;.product__price&#x27;</span><br>product_desc_select = <span class="hljs-string">&#x27;.product-single__description&#x27;</span><br>product_img_select = <span class="hljs-string">&#x27;.product__photos img&#x27;</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;采集商品集合开始&#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crawl_collections</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            res = requests.get(url, timeout=<span class="hljs-number">30</span>)<br>            res.encoding = res.apparent_encoding<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请求&#x27;</span>, url, <span class="hljs-string">&#x27;状态&#x27;</span>, res.status_code)<br>            <span class="hljs-comment"># 如果返回状态不是200，则抛出异常</span><br>            res.raise_for_status()<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span>:<br>            timeout = <span class="hljs-number">3</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;链接失败,等待&#x27;</span>, timeout, <span class="hljs-string">&#x27;秒重试&#x27;</span>)<br>            time.sleep(timeout)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;重新链接中&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请求成功，开始获取商品链接&#x27;</span>)<br>    <span class="hljs-comment"># html.parser 指定解析器</span><br>    noStarchSoup = bs4.BeautifulSoup(res.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    url = noStarchSoup.select(product_link_select)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(url)):<br>        imgurl = domainWithProtocol + url[i].get(<span class="hljs-string">&#x27;href&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;获取产品url&#x27;</span>)<br>        <span class="hljs-comment"># 调用采集内容方法</span><br>        crawl_product(imgurl)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;采集商品url结束&#x27;&#x27;&#x27;</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;采集商品内容开始&#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crawl_product</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始请求产品页面&#x27;</span>, url)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            res = requests.get(url, timeout=<span class="hljs-number">30</span>)<br>            res.encoding = res.apparent_encoding<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;成功请求商品页面:&#x27;</span>, res.status_code)<br>            res.raise_for_status()  <span class="hljs-comment"># 如果下载发生问题，就抛出异常</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请求商品页面&#x27;</span>, url, <span class="hljs-string">&#x27;失败，重新链接&#x27;</span>)<br><br>    noStarchSoup = bs4.BeautifulSoup(res.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    name = noStarchSoup.select(product_title_select)<br>    name = name[<span class="hljs-number">0</span>].getText()<br>    price = noStarchSoup.select(product_price_select)<br>    price = price[<span class="hljs-number">0</span>].getText()<br>    price = re.sub(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, price)<br>    price = re.sub(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, price)<br>    des = noStarchSoup.select(product_desc_select)<br>    des = des[<span class="hljs-number">0</span>].getText()<br>    img = noStarchSoup.select(product_img_select)<br>    l = []<br>    <span class="hljs-keyword">if</span> img != []:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(img)):<br>            imgurl = img[i].get(<span class="hljs-string">&#x27;src&#x27;</span>)<br>            <span class="hljs-keyword">if</span> imgurl <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                imgurl = img[i].get(<span class="hljs-string">&#x27;data-src&#x27;</span>)<br>            <span class="hljs-keyword">if</span> imgurl.__contains__(<span class="hljs-string">&#x27;&#123;width&#125;&#x27;</span>):<br>                <span class="hljs-keyword">continue</span><br>            l.append(<span class="hljs-string">&#x27;https:&#x27;</span> + imgurl)<br>        l = <span class="hljs-string">&#x27;\r\n&#x27;</span>.join(l)<br>    fileHeader = [<span class="hljs-string">&#x27;标题&#x27;</span>, <span class="hljs-string">&#x27;产品url&#x27;</span>, <span class="hljs-string">&#x27;价格&#x27;</span>, <span class="hljs-string">&#x27;描述&#x27;</span>, <span class="hljs-string">&#x27;图片&#x27;</span>]<br>    file = [name, url, price, des, l]<br>    <span class="hljs-comment"># 文件存储的地方，文件夹需要事先创建，并指定文件的格式为utf-8</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            csvFile = <span class="hljs-built_in">open</span>(csv_name, <span class="hljs-string">&#x27;a+&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br>            <span class="hljs-built_in">print</span>(csv_name + <span class="hljs-string">&#x27;文件写入失败，重试中。。。。。&#x27;</span>)<br>            time.sleep(<span class="hljs-number">5</span>)<br>    size = os.path.getsize(csv_name)  <span class="hljs-comment"># 判断文件大小，如果文件大于0则表示文件有内</span><br>    writer = csv.writer(csvFile)<br>    <span class="hljs-keyword">if</span> size == <span class="hljs-number">0</span>:<br>        writer.writerow(fileHeader)<br>        writer.writerow(file)<br>        csvFile.close()<br>    <span class="hljs-keyword">else</span>:<br>        writer.writerow(file)<br>        csvFile.close()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;采集成功！&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    protocol = <span class="hljs-string">&#x27;https://&#x27;</span><br>    domain = re.match(<span class="hljs-string">&#x27;https://(.*)/collections&#x27;</span>, url_pro).group(<span class="hljs-number">1</span>)<br>    domainWithProtocol = protocol + domain<br>    csv_name = domain + time.strftime(<span class="hljs-string">&#x27;_%Y-%m-%d-%H-%M-%S&#x27;</span>, time.localtime(time.time())) + <span class="hljs-string">&#x27;.csv&#x27;</span><br>    <span class="hljs-built_in">next</span> = [<span class="hljs-string">&#x27;1&#x27;</span>]<br>    n = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">next</span> != []:<br>        url = url_pro + <span class="hljs-string">&#x27;?sort_by=best-selling&amp;page=&#x27;</span> + <span class="hljs-built_in">str</span>(n)<br>        <span class="hljs-comment"># 调用采集列表方法</span><br>        crawl_collections(url)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;成功采集&#x27;</span>, n, <span class="hljs-string">&#x27;页&#x27;</span>)<br>        n = n + <span class="hljs-number">1</span><br>        res = requests.get(url)<br>        res.raise_for_status()<br>        noStarchSoup = bs4.BeautifulSoup(res.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>        <span class="hljs-built_in">next</span> = noStarchSoup.select(<span class="hljs-string">&#x27;.next&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;全部采集完毕！！&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202208011527113.png" alt="image-20220801152718166"></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OkhttpUtils 工具类</title>
    <link href="/2022/07/26/OkhttpUtils%20%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2022/07/26/OkhttpUtils%20%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>记录一下OkhttpUtils工具类</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by IntelliJ IDEA.</span><br><span class="hljs-comment"> * User: 贝先 [ Cason mo ]</span><br><span class="hljs-comment"> * Date: 2022/5/20</span><br><span class="hljs-comment"> * Time: 10:56</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OkHttpUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(OkHttpUtils.class);<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">readTimeout</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">connectTimeout</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">writeTimeout</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">MediaType</span> <span class="hljs-variable">JSON</span> <span class="hljs-operator">=</span> MediaType.parse(<span class="hljs-string">&quot;application/json; charset=utf-8&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] LOCKER = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> OkHttpUtils mInstance;<br>    <span class="hljs-keyword">private</span> OkHttpClient mOkHttpClient;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setReadTimeout</span><span class="hljs-params">(<span class="hljs-type">int</span> readTimeout)</span> &#123;<br>        <span class="hljs-built_in">this</span>.readTimeout = readTimeout;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setConnectTimeout</span><span class="hljs-params">(<span class="hljs-type">int</span> connectTimeout)</span> &#123;<br>        <span class="hljs-built_in">this</span>.connectTimeout = connectTimeout;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWriteTimeout</span><span class="hljs-params">(<span class="hljs-type">int</span> writeTimeout)</span> &#123;<br>        <span class="hljs-built_in">this</span>.writeTimeout = writeTimeout;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自定义网络回调接口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">NetCall</span> &#123;<br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">success</span><span class="hljs-params">(Call call, Response response)</span> <span class="hljs-keyword">throws</span> IOException;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">failed</span><span class="hljs-params">(Call call, IOException e)</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">OkHttpUtils</span><span class="hljs-params">()</span> &#123;<br>        okhttp3.OkHttpClient.<span class="hljs-type">Builder</span> <span class="hljs-variable">clientBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">okhttp3</span>.OkHttpClient.Builder();<br>        clientBuilder.readTimeout(readTimeout, TimeUnit.SECONDS);<span class="hljs-comment">//读取超时</span><br>        clientBuilder.connectTimeout(connectTimeout, TimeUnit.SECONDS);<span class="hljs-comment">//连接超时</span><br>        clientBuilder.writeTimeout(writeTimeout, TimeUnit.SECONDS);<span class="hljs-comment">//写入超时</span><br>        clientBuilder.hostnameVerifier(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HostnameVerifier</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">verify</span><span class="hljs-params">(String hostname, SSLSession session)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;);<br>        mOkHttpClient = clientBuilder.build();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> OkHttpUtils <span class="hljs-title function_">newInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpUtils</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 单例模式获取OkHttpUtil</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> OkHttpUtils <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (mInstance == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (LOCKER) &#123;<br>                <span class="hljs-keyword">if</span> (mInstance == <span class="hljs-literal">null</span>) &#123;<br>                    mInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpUtils</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> mInstance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">get</span><span class="hljs-params">(String url, Map&lt;String, String&gt; params, Headers headers)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (headers == <span class="hljs-literal">null</span>) &#123;<br>            headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>.Builder().build();<br>        &#125;<br>        Request.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder();<br>        <span class="hljs-type">UriBuilder</span> <span class="hljs-variable">uriBuilder</span> <span class="hljs-operator">=</span> UriBuilder.fromUri(url);<br>        <span class="hljs-keyword">if</span> (params != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; param : params.entrySet()) &#123;<br>                <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(param.getKey())) &#123;<br>                    uriBuilder.queryParam(param.getKey(), param.getValue());<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> builder.get().url(uriBuilder.build().toString()).headers(headers).build();<br>        logger.info(<span class="hljs-string">&quot;okhttp url : [&#123;&#125;] &#123;&#125; \nheader : &#123;&#125; \nrequestBody : &#123;&#125;&quot;</span>, request.method(), request.url(), request.headers(), getRequestBody(request));<br>        <span class="hljs-type">Call</span> <span class="hljs-variable">call</span> <span class="hljs-operator">=</span> mOkHttpClient.newCall(request);<br>        <span class="hljs-keyword">return</span> call.execute();<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> &lt;T&gt; Response <span class="hljs-title function_">post</span><span class="hljs-params">(String url, T t, Headers headers)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (headers == <span class="hljs-literal">null</span>) &#123;<br>            headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>.Builder().build();<br>        &#125;<br>        Request.<span class="hljs-type">Builder</span> <span class="hljs-variable">requestBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder();<br>        requestBuilder.post(RequestBody.create(JSON, <span class="hljs-string">&quot;&quot;</span>)).url(url).headers(headers);<br>        <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">RequestBody</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> RequestBody.create(JSON, JsonUtils.toJSONString(t));<br>            requestBuilder.post(body);<br>        &#125;<br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> requestBuilder.build();<br>        logger.info(<span class="hljs-string">&quot;okhttp url : [&#123;&#125;] &#123;&#125; \nheader : &#123;&#125; \nrequestBody : &#123;&#125;&quot;</span>, request.method(), request.url(), request.headers(), getRequestBody(request));<br>        <span class="hljs-type">Call</span> <span class="hljs-variable">call</span> <span class="hljs-operator">=</span> mOkHttpClient.newCall(request);<br>        <span class="hljs-keyword">return</span> call.execute();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> &lt;T&gt; Response <span class="hljs-title function_">patch</span><span class="hljs-params">(String url, T t, Headers headers)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (headers == <span class="hljs-literal">null</span>) &#123;<br>            headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>.Builder().build();<br>        &#125;<br>        Request.<span class="hljs-type">Builder</span> <span class="hljs-variable">requestBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder();<br>        requestBuilder.patch(RequestBody.create(JSON, <span class="hljs-string">&quot;&quot;</span>)).url(url).headers(headers);<br>        <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">RequestBody</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> RequestBody.create(JSON, JsonUtils.toJSONString(t));<br>            requestBuilder.patch(body);<br>        &#125;<br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> requestBuilder.build();<br>        logger.info(<span class="hljs-string">&quot;okhttp url : [&#123;&#125;] &#123;&#125; \nheader : &#123;&#125; \nrequestBody : &#123;&#125;&quot;</span>, request.method(), request.url(), request.headers(), getRequestBody(request));<br>        <span class="hljs-type">Call</span> <span class="hljs-variable">call</span> <span class="hljs-operator">=</span> mOkHttpClient.newCall(request);<br>        <span class="hljs-keyword">return</span> call.execute();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">postJson</span><span class="hljs-params">(String url, String json, Headers headers)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (headers == <span class="hljs-literal">null</span>) &#123;<br>            headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>.Builder().build();<br>        &#125;<br>        <span class="hljs-type">RequestBody</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> RequestBody.create(JSON, json);<br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder()<br>                .url(url)<br>                .post(body)<br>                .headers(headers)<br>                .build();<br>        logger.info(<span class="hljs-string">&quot;okhttp url : [&#123;&#125;] &#123;&#125; \nheader : &#123;&#125; \nrequestBody : &#123;&#125;&quot;</span>, request.method(), request.url(), request.headers(), getRequestBody(request));<br>        <span class="hljs-keyword">return</span> mOkHttpClient.newCall(request).execute();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> &lt;T&gt; Response <span class="hljs-title function_">put</span><span class="hljs-params">(String url, T t, Headers headers)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (headers == <span class="hljs-literal">null</span>) &#123;<br>            headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>.Builder().build();<br>        &#125;<br>        Request.<span class="hljs-type">Builder</span> <span class="hljs-variable">requestBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder();<br>        requestBuilder.put(RequestBody.create(JSON, <span class="hljs-string">&quot;&quot;</span>)).url(url).headers(headers);<br>        <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">RequestBody</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> RequestBody.create(JSON, JsonUtils.toJSONString(t));<br>            requestBuilder.put(body);<br>        &#125;<br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> requestBuilder.build();<br>        logger.info(<span class="hljs-string">&quot;okhttp url : [&#123;&#125;] &#123;&#125; \nheader : &#123;&#125; \nrequestBody : &#123;&#125;&quot;</span>, request.method(), request.url(), request.headers(), getRequestBody(request));<br>        <span class="hljs-type">Call</span> <span class="hljs-variable">call</span> <span class="hljs-operator">=</span> mOkHttpClient.newCall(request);<br>        <span class="hljs-keyword">return</span> call.execute();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">putJson</span><span class="hljs-params">(String url, String json, Headers headers)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (headers == <span class="hljs-literal">null</span>) &#123;<br>            headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>.Builder().build();<br>        &#125;<br>        <span class="hljs-type">RequestBody</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> RequestBody.create(JSON, json);<br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder()<br>                .url(url)<br>                .put(body)<br>                .headers(headers)<br>                .build();<br>        logger.info(<span class="hljs-string">&quot;okhttp url : [&#123;&#125;] &#123;&#125; \nheader : &#123;&#125; \nrequestBody : &#123;&#125;&quot;</span>, request.method(), request.url(), request.headers(), getRequestBody(request));<br>        <span class="hljs-keyword">return</span> mOkHttpClient.newCall(request).execute();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> &lt;T&gt; Response <span class="hljs-title function_">delete</span><span class="hljs-params">(String url, T t, Headers headers)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (headers == <span class="hljs-literal">null</span>) &#123;<br>            headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>.Builder().build();<br>        &#125;<br>        Request.<span class="hljs-type">Builder</span> <span class="hljs-variable">requestBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder();<br>        requestBuilder.delete().url(url).headers(headers);<br>        <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">RequestBody</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> RequestBody.create(JSON, JsonUtils.toJSONString(t));<br>            requestBuilder.delete(body);<br>        &#125;<br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> requestBuilder.build();<br>        logger.info(<span class="hljs-string">&quot;okhttp url : [&#123;&#125;] &#123;&#125; \nheader : &#123;&#125; \nrequestBody : &#123;&#125;&quot;</span>, request.method(), request.url(), request.headers(), getRequestBody(request));<br>        <span class="hljs-type">Call</span> <span class="hljs-variable">call</span> <span class="hljs-operator">=</span> mOkHttpClient.newCall(request);<br>        <span class="hljs-keyword">return</span> call.execute();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">deleteJson</span><span class="hljs-params">(String url, String json, Headers headers)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (headers == <span class="hljs-literal">null</span>) &#123;<br>            headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>.Builder().build();<br>        &#125;<br>        <span class="hljs-type">RequestBody</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> RequestBody.create(JSON, json);<br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder()<br>                .url(url)<br>                .delete(body)<br>                .headers(headers)<br>                .build();<br>        logger.info(<span class="hljs-string">&quot;okhttp url : [&#123;&#125;] &#123;&#125; \nheader : &#123;&#125; \nrequestBody : &#123;&#125;&quot;</span>, request.method(), request.url(), request.headers(), getRequestBody(request));<br>        <span class="hljs-keyword">return</span> mOkHttpClient.newCall(request).execute();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getRequestBody</span><span class="hljs-params">(Request request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Buffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Buffer</span>();<br>        <span class="hljs-keyword">if</span> (request.body() != <span class="hljs-literal">null</span>) &#123;<br>            request.body().writeTo(buffer);<br>            <span class="hljs-keyword">return</span> buffer.clone().readUtf8();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取指定包下使用指定注解相关的类、方法、字段</title>
    <link href="/2022/07/20/%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E5%8C%85%E4%B8%8B%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AE%9A%E6%B3%A8%E8%A7%A3%E7%9B%B8%E5%85%B3%E7%9A%84%E7%B1%BB%E3%80%81%E6%96%B9%E6%B3%95%E3%80%81%E5%AD%97%E6%AE%B5/"/>
    <url>/2022/07/20/%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E5%8C%85%E4%B8%8B%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AE%9A%E6%B3%A8%E8%A7%A3%E7%9B%B8%E5%85%B3%E7%9A%84%E7%B1%BB%E3%80%81%E6%96%B9%E6%B3%95%E3%80%81%E5%AD%97%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[<p>通过对指定包下的所有类文件进行扫描，获取使用指定注解的所有类、方法、字段</p><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.core.io.DefaultResourceLoader;<br><span class="hljs-keyword">import</span> org.springframework.core.io.Resource;<br><span class="hljs-keyword">import</span> org.springframework.core.io.ResourceLoader;<br><span class="hljs-keyword">import</span> org.springframework.core.io.support.ResourcePatternResolver;<br><span class="hljs-keyword">import</span> org.springframework.core.io.support.ResourcePatternUtils;<br><span class="hljs-keyword">import</span> org.springframework.core.type.ClassMetadata;<br><span class="hljs-keyword">import</span> org.springframework.core.type.classreading.MetadataReader;<br><span class="hljs-keyword">import</span> org.springframework.core.type.classreading.MetadataReaderFactory;<br><span class="hljs-keyword">import</span> org.springframework.core.type.classreading.SimpleMetadataReaderFactory;<br><span class="hljs-keyword">import</span> org.springframework.util.ClassUtils;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.annotation.Annotation;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by IntelliJ IDEA.</span><br><span class="hljs-comment"> * User: 贝先 [ Cason mo ]</span><br><span class="hljs-comment"> * Date: 2022/6/29</span><br><span class="hljs-comment"> * Time: 10:45</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(AnnotationUtils.class);<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_RESOURCE_PATTERN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;**/*.class&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> AnnotationUtils mInstance;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">LOCKER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 单例模式获取AnnotationUtils</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AnnotationUtils <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (mInstance == <span class="hljs-literal">null</span>) &#123;<br>            LOCKER.lock();<br>            <span class="hljs-keyword">if</span> (mInstance == <span class="hljs-literal">null</span>) &#123;<br>                mInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationUtils</span>();<br>            &#125;<br>            LOCKER.unlock();<br>        &#125;<br>        <span class="hljs-keyword">return</span> mInstance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Class&lt;?&gt;&gt; getClassCandidates(String basePackages, Class clazz) &#123;<br>        List&lt;Class&lt;?&gt;&gt; candidates = scanPackagesForClass(basePackages, clazz);<br>        validateCandidates(basePackages, candidates.isEmpty());<br>        <span class="hljs-keyword">return</span> candidates;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Method&gt; <span class="hljs-title function_">getMethodCandidates</span><span class="hljs-params">(String basePackages, Class clazz)</span> &#123;<br>        List&lt;Method&gt; candidates = scanPackagesForMethod(basePackages, clazz);<br>        validateCandidates(basePackages, candidates.isEmpty());<br>        <span class="hljs-keyword">return</span> candidates;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Field&gt; <span class="hljs-title function_">getFieldCandidates</span><span class="hljs-params">(String basePackages, Class clazz)</span> &#123;<br>        List&lt;Field&gt; candidates = scanPackagesForField(basePackages, clazz);<br>        validateCandidates(basePackages, candidates.isEmpty());<br>        <span class="hljs-keyword">return</span> candidates;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Class&lt;?&gt;&gt; scanPackagesForClass(String basePackages, Class clazz) &#123;<br>        List&lt;Class&lt;?&gt;&gt; candidates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Class&lt;?&gt;&gt;();<br>        <span class="hljs-keyword">try</span> &#123;<br>            candidates.addAll(findCandidateClasses(basePackages, clazz));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            logger.error(<span class="hljs-string">&quot;扫描指定包时出现异常&quot;</span>, basePackages);<br>        &#125;<br>        <span class="hljs-keyword">return</span> candidates;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Method&gt; <span class="hljs-title function_">scanPackagesForMethod</span><span class="hljs-params">(String basePackages, Class clazz)</span> &#123;<br>        List&lt;Method&gt; candidates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Method&gt;();<br>        <span class="hljs-keyword">try</span> &#123;<br>            candidates.addAll(findCandidateMethod(basePackages, clazz));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            logger.error(<span class="hljs-string">&quot;扫描指定包时出现异常&quot;</span>, basePackages);<br>        &#125;<br>        <span class="hljs-keyword">return</span> candidates;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Field&gt; <span class="hljs-title function_">scanPackagesForField</span><span class="hljs-params">(String basePackages, Class clazz)</span> &#123;<br>        List&lt;Field&gt; candidates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Field&gt;();<br>        <span class="hljs-keyword">try</span> &#123;<br>            candidates.addAll(findCandidateField(basePackages, clazz));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            logger.error(<span class="hljs-string">&quot;扫描指定包时出现异常&quot;</span>, basePackages);<br>        &#125;<br>        <span class="hljs-keyword">return</span> candidates;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Class&lt;?&gt;&gt; findCandidateClasses(String basePackage, Class clazz) <span class="hljs-keyword">throws</span> IOException &#123;<br>        List&lt;Class&lt;?&gt;&gt; candidates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Class&lt;?&gt;&gt;();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">packageSearchPath</span> <span class="hljs-operator">=</span> getPackageSearchPath(basePackage);<br>        <span class="hljs-type">ResourceLoader</span> <span class="hljs-variable">resourceLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultResourceLoader</span>();<br>        <span class="hljs-type">MetadataReaderFactory</span> <span class="hljs-variable">readerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMetadataReaderFactory</span>(resourceLoader);<br>        Resource[] resources = ResourcePatternUtils.getResourcePatternResolver(resourceLoader).getResources(packageSearchPath);<br>        <span class="hljs-keyword">for</span> (Resource resource : resources) &#123;<br>            <span class="hljs-type">MetadataReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> readerFactory.getMetadataReader(resource);<br>            <span class="hljs-keyword">if</span> (match(reader.getClassMetadata(), clazz)) &#123;<br>                Class&lt;?&gt; candidateClass = transform(reader.getClassMetadata().getClassName());<br>                <span class="hljs-keyword">if</span> (candidateClass != <span class="hljs-literal">null</span>) &#123;<br>                    candidates.add(candidateClass);<br>                    logger.debug(<span class="hljs-string">&quot;扫描到符合要求的类：&quot;</span> + candidateClass.getName());<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> candidates;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Method&gt; <span class="hljs-title function_">findCandidateMethod</span><span class="hljs-params">(String basePackage, Class clazz)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        List&lt;Method&gt; candidates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Method&gt;();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">packageSearchPath</span> <span class="hljs-operator">=</span> getPackageSearchPath(basePackage);<br>        <span class="hljs-type">ResourceLoader</span> <span class="hljs-variable">resourceLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultResourceLoader</span>();<br>        <span class="hljs-type">MetadataReaderFactory</span> <span class="hljs-variable">readerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMetadataReaderFactory</span>(resourceLoader);<br>        Resource[] resources = ResourcePatternUtils.getResourcePatternResolver(resourceLoader).getResources(packageSearchPath);<br>        <span class="hljs-keyword">for</span> (Resource resource : resources) &#123;<br>            <span class="hljs-type">MetadataReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> readerFactory.getMetadataReader(resource);<br>            matchMethod(clazz, candidates, reader);<br>        &#125;<br>        <span class="hljs-keyword">return</span> candidates;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Field&gt; <span class="hljs-title function_">findCandidateField</span><span class="hljs-params">(String basePackage, Class clazz)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        List&lt;Field&gt; candidates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Field&gt;();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">packageSearchPath</span> <span class="hljs-operator">=</span> getPackageSearchPath(basePackage);<br>        <span class="hljs-type">ResourceLoader</span> <span class="hljs-variable">resourceLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultResourceLoader</span>();<br>        <span class="hljs-type">MetadataReaderFactory</span> <span class="hljs-variable">readerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMetadataReaderFactory</span>(resourceLoader);<br>        Resource[] resources = ResourcePatternUtils.getResourcePatternResolver(resourceLoader).getResources(packageSearchPath);<br>        <span class="hljs-keyword">for</span> (Resource resource : resources) &#123;<br>            <span class="hljs-type">MetadataReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> readerFactory.getMetadataReader(resource);<br>            matchField(clazz, candidates, reader);<br>        &#125;<br>        <span class="hljs-keyword">return</span> candidates;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">matchMethod</span><span class="hljs-params">(Class clazz, List&lt;Method&gt; candidates, MetadataReader reader)</span> &#123;<br>        Class&lt;?&gt; clz = transformToClass(reader.getClassMetadata().getClassName());<br>        Method[] methods = clz.getMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            <span class="hljs-type">Annotation</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> method.getAnnotation(clazz);<br><br>            <span class="hljs-keyword">if</span> (annotation == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (method != <span class="hljs-literal">null</span> &amp;&amp; method.isAnnotationPresent(clazz)) &#123;<br>                candidates.add(method);<br>                logger.debug(<span class="hljs-string">&quot;扫描到符合要求的method：&quot;</span> + method.getName());<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">matchField</span><span class="hljs-params">(Class clazz, List&lt;Field&gt; candidates, MetadataReader reader)</span> &#123;<br>        Class&lt;?&gt; clz = transformToClass(reader.getClassMetadata().getClassName());<br>        Field[] declaredFields = clz.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field field : declaredFields) &#123;<br>            <span class="hljs-type">Annotation</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> field.getAnnotation(clazz);<br><br>            <span class="hljs-keyword">if</span> (annotation == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (field != <span class="hljs-literal">null</span> &amp;&amp; field.isAnnotationPresent(clazz)) &#123;<br>                candidates.add(field);<br>                logger.debug(<span class="hljs-string">&quot;扫描到符合要求的field：&quot;</span> + field.getName());<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">convertPath</span><span class="hljs-params">(String path)</span> &#123;<br>        <span class="hljs-keyword">return</span> StringUtils.replace(path, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; transform(String className) &#123;<br>        Class&lt;?&gt; clazz = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            clazz = ClassUtils.forName(className, <span class="hljs-built_in">this</span>.getClass().getClassLoader());<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            logger.info(<span class="hljs-string">&quot;未找到指定类&quot;</span>, className);<br>        &#125;<br>        <span class="hljs-keyword">return</span> clazz;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">match</span><span class="hljs-params">(ClassMetadata metadata, Class c)</span> &#123;<br>        Class&lt;?&gt; clazz = transformToClass(metadata.getClassName());<br>        <span class="hljs-keyword">return</span> clazz != <span class="hljs-literal">null</span> &amp;&amp; clazz.isAnnotationPresent(c);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; transformToClass(String className) &#123;<br>        Class&lt;?&gt; clazz = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            clazz = ClassUtils.forName(className, <span class="hljs-built_in">this</span>.getClass().getClassLoader());<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            logger.info(<span class="hljs-string">&quot;未找到指定类&quot;</span>, className);<br>        &#125;<br>        <span class="hljs-keyword">return</span> clazz;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">validateCandidates</span><span class="hljs-params">(String basePackages, <span class="hljs-type">boolean</span> empty)</span> &#123;<br>        <span class="hljs-keyword">if</span> (empty) &#123;<br>            logger.info(<span class="hljs-string">&quot;扫描指定包下，未发现符合条件的类&quot;</span>, basePackages);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getPackageSearchPath</span><span class="hljs-params">(String basePackage)</span> &#123;<br>        <span class="hljs-keyword">return</span> ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +<br>                convertPath(basePackage) + <span class="hljs-string">&#x27;/&#x27;</span> + DEFAULT_RESOURCE_PATTERN;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取使用指定注解的所有类</span><br>List&lt;Class&lt;?&gt;&gt; candidates = AnnotationUtils.getInstance().getClassCandidates(<span class="hljs-string">&quot;com.cason&quot;</span>, PermitAccountStatus.class);<br><span class="hljs-comment">//获取使用指定注解的所有方法</span><br>List&lt;Method&gt; methodCandidates = AnnotationUtils.getInstance().getMethodCandidates(<span class="hljs-string">&quot;com.cason&quot;</span>, PermitAccountStatus.class);<br><span class="hljs-comment">//获取使用指定注解的所有字段</span><br>List&lt;Field&gt; fieldCandidates = AnnotationUtils.getInstance().getFieldCandidates(<span class="hljs-string">&quot;com.cason&quot;</span>, PermitAccountStatus.class);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Springboot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用ImageIO读取网络图片或本地图片</title>
    <link href="/2022/07/19/%E4%BD%BF%E7%94%A8ImageIO%E8%AF%BB%E5%8F%96%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%89%87%E6%88%96%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
    <url>/2022/07/19/%E4%BD%BF%E7%94%A8ImageIO%E8%AF%BB%E5%8F%96%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%89%87%E6%88%96%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<blockquote><p>来自网络</p></blockquote><h3 id="读取网络图片"><a href="#读取网络图片" class="headerlink" title="读取网络图片"></a>读取网络图片</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(path);<br>BufferedImage source= ImageIO.read(url);<br></code></pre></td></tr></table></figure><h3 id="读取本地图片"><a href="#读取本地图片" class="headerlink" title="读取本地图片"></a>读取本地图片</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">BufferedImage source= ImageIO.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path));<br></code></pre></td></tr></table></figure><h3 id="获取网络图片工具类"><a href="#获取网络图片工具类" class="headerlink" title="获取网络图片工具类"></a>获取网络图片工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpImageUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(HttpImageUtils.class);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TIMEOUT</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span> * <span class="hljs-number">1000</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取网络图片转成字节流</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> strUrl 完整图片地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 图片资源数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getNetImgByUrl(String strUrl) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(strUrl);<br>            <span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> (HttpURLConnection) url.openConnection();<br>            conn.setRequestMethod(<span class="hljs-string">&quot;GET&quot;</span>);<br>            conn.setConnectTimeout(TIMEOUT);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inStream</span> <span class="hljs-operator">=</span> conn.getInputStream();<br>            <span class="hljs-keyword">return</span> readInputStream(inStream);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            logger.error(e.getMessage(),e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从输入流中获取字节流数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inStream 输入流</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  图片流</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] readInputStream(InputStream inStream) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">outStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[Integer.MAX_VALUE];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((len = inStream.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>            outStream.write(buffer, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        inStream.close();<br>        <span class="hljs-keyword">return</span> outStream.toByteArray();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Springboot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决Okhttp只能获取一次responsebody的问题</title>
    <link href="/2022/07/18/%E8%A7%A3%E5%86%B3Okhttp%E5%8F%AA%E8%83%BD%E8%8E%B7%E5%8F%96%E4%B8%80%E6%AC%A1responsebody%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/07/18/%E8%A7%A3%E5%86%B3Okhttp%E5%8F%AA%E8%83%BD%E8%8E%B7%E5%8F%96%E4%B8%80%E6%AC%A1responsebody%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>okhttp通过response.body().string() 获取字符串类型的responsebody</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">string</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> source()) &#123;<br>      <span class="hljs-type">Charset</span> <span class="hljs-variable">charset</span> <span class="hljs-operator">=</span> Util.bomAwareCharset(source, charset());<br>      <span class="hljs-keyword">return</span> source.readString(charset);<br>    &#125;<br>  &#125;<br><br><br><span class="hljs-meta">@Override</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>    Util.closeQuietly(source());<br>  &#125;<br></code></pre></td></tr></table></figure><p>ResponseBody，其实现了 <code>Closeable</code> 接口，通过复写 <code>close()</code> 方法来 <strong>关闭并释放资源</strong>，关闭 <code>ResponseBody</code> 子类所持有的 <code>BufferedSource</code> 接口对象，当我们第一次调用 <code>response.body().string()</code> 时，OkHttp 将响应体的缓冲资源返回的同时，调用 <code>closeQuietly()</code> 方法默默释放了资源</p><h3 id="获取responseBody"><a href="#获取responseBody" class="headerlink" title="获取responseBody"></a>获取responseBody</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getResponseBody</span><span class="hljs-params">(Response response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>     <span class="hljs-type">BufferedSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> response.body().source();<br>     source.request(Long.MAX_VALUE);<br>     <span class="hljs-type">Buffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> source.getBuffer();<br>     <span class="hljs-type">String</span> <span class="hljs-variable">responseBody</span> <span class="hljs-operator">=</span> buffer.clone().readUtf8();<br>     <span class="hljs-keyword">return</span> responseBody;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="获取requestBody"><a href="#获取requestBody" class="headerlink" title="获取requestBody"></a>获取requestBody</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getRequestBody</span><span class="hljs-params">(Request request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Buffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Buffer</span>();<br>        <span class="hljs-keyword">if</span> (request.body() != <span class="hljs-literal">null</span>) &#123;<br>            request.body().writeTo(buffer);<br>            <span class="hljs-keyword">return</span> buffer.clone().readUtf8();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>okhttp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>InheritableThreadLocal解决ThreadLocal子线程不可继承父线程变量的问题</title>
    <link href="/2022/06/17/InheritableThreadLocal%E8%A7%A3%E5%86%B3ThreadLocal%E5%AD%90%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%8F%AF%E7%BB%A7%E6%89%BF%E7%88%B6%E7%BA%BF%E7%A8%8B%E5%8F%98%E9%87%8F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/06/17/InheritableThreadLocal%E8%A7%A3%E5%86%B3ThreadLocal%E5%AD%90%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%8F%AF%E7%BB%A7%E6%89%BF%E7%88%B6%E7%BA%BF%E7%A8%8B%E5%8F%98%E9%87%8F%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>当我用Mybatis-plus自动填充创建人员，更新人员字段的时候，发现数据库中又很多字段都没有记录这两个字段，通过分析发现是因为这些更新或者创建操作是在异步的情况下去执行的，由于父线程创建的子线程无法获取父线程的ThreadLocal变量，导致无法正确的获取这两个字段。</p><blockquote><p>以下代码说明使用ThreadLocal 子线程无法访问父线程的线程变量</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThreadLocal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;String&gt; username = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        username.set(<span class="hljs-string">&quot;beixian&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;子线程获取：&quot;</span>+username.get());<br>            &#125;<br>        &#125;);<br>        thread.start();<br>        System.out.println(<span class="hljs-string">&quot;main线程获取&quot;</span>+username.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202206180001004.png" alt="TestThreadLocal.main执行结果"></p><p>原因：子线程ThreadLocal get()获取的的是子线程的threadLocals里的值，而父线程set()的是父线程的threadLocals里的值，而子线程创建的时候没有继承threadLocals里的值。</p><blockquote><p>以下代码说明使用InheritableThreadLocal子线程可以访问父线程的线程变量</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestInheritableThreadLocal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InheritableThreadLocal&lt;String&gt; username = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InheritableThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        username.set(<span class="hljs-string">&quot;beixian&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;子线程获取：&quot;</span>+username.get());<br>            &#125;<br>        &#125;);<br>        thread.start();<br>        System.out.println(<span class="hljs-string">&quot;main线程获取&quot;</span>+username.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202206180001992.png" alt="TestInheritableThreadLocal.main执行结果"></p><p>解决方案：InheritableThreadLocal可以帮助我们解决这个问题，子线程在初始化的时候会通过父线程的inheritThreadLocals变量初始化子线程的inheritThreadLocals变量，这样子线程拥有了父线程的线程变量并可访问。</p><h5 id="Thread-init-源码"><a href="#Thread-init-源码" class="headerlink" title="Thread init()源码"></a>Thread init()源码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Thread的构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Thread</span><span class="hljs-params">(Runnable target)</span> &#123;<br>        init(<span class="hljs-literal">null</span>, target, <span class="hljs-string">&quot;Thread-&quot;</span> + nextThreadNum(), <span class="hljs-number">0</span>);<br>    &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ThreadGroup g, Runnable target, String name,</span><br><span class="hljs-params">                      <span class="hljs-type">long</span> stackSize)</span> &#123;<br>  <span class="hljs-comment">//这里设置了inheritThreadLocals为true</span><br>        init(g, target, name, stackSize, <span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ThreadGroup g, Runnable target, String name,</span><br><span class="hljs-params">                      <span class="hljs-type">long</span> stackSize, AccessControlContext acc,</span><br><span class="hljs-params">                      <span class="hljs-type">boolean</span> inheritThreadLocals)</span> &#123;<br>      <span class="hljs-comment">/**省略部分代码**/</span><br>  <span class="hljs-comment">// inheritThreadLocals为true 且 父线程的inheritThreadLocals不为空</span><br>        <span class="hljs-keyword">if</span> (inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != <span class="hljs-literal">null</span>)<br>            <span class="hljs-built_in">this</span>.inheritableThreadLocals =<br>                ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);<br>       <span class="hljs-comment">/**省略部分代码**/</span><br>    &#125;<br><br><span class="hljs-keyword">static</span> ThreadLocalMap <span class="hljs-title function_">createInheritedMap</span><span class="hljs-params">(ThreadLocalMap parentMap)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalMap</span>(parentMap);<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="InheritableThreadLocal源码"><a href="#InheritableThreadLocal源码" class="headerlink" title="InheritableThreadLocal源码"></a>InheritableThreadLocal源码</h5><p>InheritableThreadLocal继承于ThreadLocal，只是重写了childValue()，getMap()，createMap()方法，重写的原因是因为要获取和操作的不在是Thread.threadLocals这个变量，而是inheritableThreadLocals这个变量</p><p>get()、set()等方法同ThreadLocal，可以参考【Threadlocal的简单理解和部分源码分析】这篇文章</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InheritableThreadLocal</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ThreadLocal</span>&lt;T&gt; &#123;<br>  <br>    <span class="hljs-keyword">protected</span> T <span class="hljs-title function_">childValue</span><span class="hljs-params">(T parentValue)</span> &#123;<br>        <span class="hljs-keyword">return</span> parentValue;<br>    &#125;<br><br>    ThreadLocalMap <span class="hljs-title function_">getMap</span><span class="hljs-params">(Thread t)</span> &#123;<br>       <span class="hljs-keyword">return</span> t.inheritableThreadLocals;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">createMap</span><span class="hljs-params">(Thread t, T firstValue)</span> &#123;<br>        t.inheritableThreadLocals = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalMap</span>(<span class="hljs-built_in">this</span>, firstValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>并发编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThreadLocal</tag>
      
      <tag>InheritableThreadLocal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Threadlocal的简单理解和部分源码分析</title>
    <link href="/2022/06/16/Threadlocal%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E5%92%8C%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2022/06/16/Threadlocal%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E5%92%8C%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>Mybatis-plus 可以实现字段自动填充功能，我通常会把多个表中共同字段抽离到了一个公共实体类中，如创建时间，创建人员，更新时间，更新人员等等，但是如何获取当前用户信息填入创建人员，更新人员字段？</p><p>ThreadLocal可以帮助我解决这个问题，我使用的的是JWT token 验证登陆状态，在每次Http请求时Header都会附带token，token中就会附带用户信息，当我们验证完后把用户信息set进Threadlocal，就可以在同一个线程中通过ThreadLocal获取用户信息。</p><h4 id="ThreadLocal理解"><a href="#ThreadLocal理解" class="headerlink" title="ThreadLocal理解"></a>ThreadLocal理解</h4><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202206162045177.png" alt="图源自网络"></p><p>ThreadLocal是线程安全的，它可以确保多线程访问时每个线程只能访问到自己的线程私有变量。它的线程隔离机制是通过把共享变量的副本存储到Thread.threadLocals实现，每个线程只能访问自己的副本，就能避免线程安全问题。</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202206162045799.png" alt="Thread类截图"></p><p>ThreadLocal实际上就是一个操作Thread.threadLocals的外壳。Thread.threadLocals变量是一个keyvalueMap，Thread创建的时候默认初始化threadLocals为null，在ThreadLocal首次读或写的时候初始化threadLocals。ThreadLocalMap是ThreadLocal中的静态内部类，ThreadLocalMap通过Entry键值对的方式存储数据，是一个定制化的Map。</p><h4 id="ThreadLocal源码分析"><a href="#ThreadLocal源码分析" class="headerlink" title="ThreadLocal源码分析"></a>ThreadLocal源码分析</h4><h5 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h5><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(T value)</span> &#123;<br>  <span class="hljs-comment">//获取当前线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>  <span class="hljs-comment">//获取Thread.threadLocals</span><br>        <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>  <span class="hljs-comment">//map不为空就设入键值对 key为当前ThreadLocal对象 </span><br>        <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>)<br>            map.set(<span class="hljs-built_in">this</span>, value);<br>        <span class="hljs-keyword">else</span><br>          <span class="hljs-comment">//否则创建Thread.threadLocals</span><br>            createMap(t, value);<br>    &#125;<br></code></pre></td></tr></table></figure><p>我们可以发现ThreadLocal set的方法是对Thread.threadLocals这个定制化的Map进行操作</p><h6 id="getMap"><a href="#getMap" class="headerlink" title="getMap()"></a>getMap()</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ThreadLocalMap <span class="hljs-title function_">getMap</span><span class="hljs-params">(Thread t)</span> &#123;<br>  <span class="hljs-comment">//就是取出Thread.threadLocals</span><br>    <span class="hljs-keyword">return</span> t.threadLocals;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="createMap"><a href="#createMap" class="headerlink" title="createMap()"></a>createMap()</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">createMap</span><span class="hljs-params">(Thread t, T firstValue)</span> &#123;<br>  <span class="hljs-comment">//以当前TreadLocal对象为key 创建并初始化一个Thread.threadLocals</span><br>    t.threadLocals = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalMap</span>(<span class="hljs-built_in">this</span>, firstValue);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">//获取当前线程</span><br>     <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>  <span class="hljs-comment">//获取Thread.threadLocals</span><br>     <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>  <span class="hljs-comment">//map不为空 通过当前对象作为key 获取值</span><br>     <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>) &#123;<br>         ThreadLocalMap.<span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> map.getEntry(<span class="hljs-built_in">this</span>);<br>       <span class="hljs-comment">//map部位空还得判断当前键在不在map里</span><br>         <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>             <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>             <span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (T)e.value;<br>             <span class="hljs-keyword">return</span> result;<br>         &#125;<br>     &#125;<br>  <span class="hljs-comment">// map为空就创建并初始化</span><br>     <span class="hljs-keyword">return</span> setInitialValue();<br> &#125;<br></code></pre></td></tr></table></figure><h6 id="setInitialValue"><a href="#setInitialValue" class="headerlink" title="setInitialValue()"></a>setInitialValue()</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">private</span> T <span class="hljs-title function_">setInitialValue</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-comment">//初始化value为null</span><br>       <span class="hljs-type">T</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> initialValue();<br>     <span class="hljs-comment">//获取当前线程</span><br>       <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>     <span class="hljs-comment">//获取Thread.threadLocals</span><br>       <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>     <span class="hljs-comment">//判断map是否为空 不为空就把 key为当前对象 value为null 设置进map</span><br>       <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>)<br>           map.set(<span class="hljs-built_in">this</span>, value);<br>       <span class="hljs-keyword">else</span><br>         <span class="hljs-comment">//否则就创建并初始化Thread.threadLocals</span><br>           createMap(t, value);<br>       <span class="hljs-keyword">return</span> value;<br>   &#125;<br><br><span class="hljs-keyword">protected</span> T <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">//在当前线程里获取Thread.threadLocals</span><br>        <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> getMap(Thread.currentThread());<br>        <span class="hljs-keyword">if</span> (m != <span class="hljs-literal">null</span>)<br>           <span class="hljs-comment">//在map里移除 以当前对象为key的 键值对</span><br>            m.remove(<span class="hljs-built_in">this</span>);<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>并发编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThreadLocal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot集成WebSocket实现消息推送 记录</title>
    <link href="/2022/06/07/Springboot%E9%9B%86%E6%88%90WebSocket%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81-%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/06/07/Springboot%E9%9B%86%E6%88%90WebSocket%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81-%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="一、什么是WebSocket？"><a href="#一、什么是WebSocket？" class="headerlink" title="一、什么是WebSocket？"></a>一、什么是WebSocket？</h3><p>WebSocket是HTML5开始提供的一种在单个TCP连接上进行全双工通讯的协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。</p><p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据，在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。–来源自<a href="https://juejin.cn/post/6844904004762222606?utm_source=gold_browser_extension">https://juejin.cn/post/6844904004762222606?utm_source=gold_browser_extension</a></p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202206071031666.jpeg" alt="img"></p><center><small>(图源自网络)</small></center><h3 id="二、与springboot集成"><a href="#二、与springboot集成" class="headerlink" title="二、与springboot集成"></a>二、与springboot集成</h3><h4 id="引入spring-boot-starter-websocket依赖"><a href="#引入spring-boot-starter-websocket依赖" class="headerlink" title="引入spring-boot-starter-websocket依赖"></a>引入spring-boot-starter-websocket依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;springboot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="新建WebSocketHandler"><a href="#新建WebSocketHandler" class="headerlink" title="新建WebSocketHandler"></a>新建WebSocketHandler</h4><p>MercuryWebsocketHandler.class 对连接建立处理，消息处理，错误处理，以及连接关闭处理等等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MercuryWebSocketHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebSocketHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionEstablished</span><span class="hljs-params">(WebSocketSession webSocketSession)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">wsId</span> <span class="hljs-operator">=</span> WsSessionManager.getWsId(webSocketSession.getUri().getPath());<br>        <span class="hljs-keyword">if</span> (wsId != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 用户连接成功，放入在线用户缓存</span><br>            WsSessionManager.add(wsId, webSocketSession);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户登录已经失效!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(WebSocketSession webSocketSession, WebSocketMessage&lt;?&gt; webSocketMessage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> webSocketMessage.getPayload().toString();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">wsId</span> <span class="hljs-operator">=</span> WsSessionManager.getWsId(webSocketSession.getUri().getPath());<br>        System.out.println(<span class="hljs-string">&quot;server 接收到 &quot;</span> + wsId + <span class="hljs-string">&quot; 发送的 &quot;</span> + payload);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleTransportError</span><span class="hljs-params">(WebSocketSession webSocketSession, Throwable throwable)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.error(<span class="hljs-string">&quot;发生错误&quot;</span>, throwable);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionClosed</span><span class="hljs-params">(WebSocketSession webSocketSession, CloseStatus closeStatus)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">wsId</span> <span class="hljs-operator">=</span> WsSessionManager.getWsId(webSocketSession.getUri().getPath());<br>        <span class="hljs-keyword">if</span> (wsId != <span class="hljs-literal">null</span>) &#123;<br>            WsSessionManager.removeAndClose(wsId);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsPartialMessages</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="实现WebSocketConfigurer-来对握手前后进行逻辑处理"><a href="#实现WebSocketConfigurer-来对握手前后进行逻辑处理" class="headerlink" title="实现WebSocketConfigurer 来对握手前后进行逻辑处理"></a>实现WebSocketConfigurer 来对握手前后进行逻辑处理</h4><p>因为我需要对websocket 握手前进行校验，所以创建WebSocketHandshakeInterceptor.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketHandshakeInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpSessionHandshakeInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">beforeHandshake</span><span class="hljs-params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler webSocketHandler, Map&lt;String, Object&gt; attributes)</span><br>            <span class="hljs-keyword">throws</span> Exception &#123;<br>       <span class="hljs-comment">/**省略校验逻辑 校验不通过 return false**/</span><br>      <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.beforeHandshake(request, response, webSocketHandler, attributes);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHandshake</span><span class="hljs-params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception e)</span> &#123;<br>        <span class="hljs-built_in">super</span>.afterHandshake(request, response, wsHandler, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现WebSocketConfigurer"><a href="#实现WebSocketConfigurer" class="headerlink" title="实现WebSocketConfigurer"></a>实现WebSocketConfigurer</h4><p>新建websocket配置类，添加拦截地址以及相应的websocket消息处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSocket</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketServerConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebSocketConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerWebSocketHandlers</span><span class="hljs-params">(WebSocketHandlerRegistry registry)</span> &#123;<br>        <span class="hljs-comment">// 添加拦截地址以及相应的websocket消息处理器</span><br>        <span class="hljs-type">WebSocketHandlerRegistration</span> <span class="hljs-variable">registration</span> <span class="hljs-operator">=</span> registry<br>                .addHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MercuryWebSocketHandler</span>(), <span class="hljs-string">&quot;/api/websocket/**&quot;</span>)<br>                .setAllowedOrigins(<span class="hljs-string">&quot;*&quot;</span>);<br>        <span class="hljs-comment">// 添加拦截器</span><br>        registration.addInterceptors(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketHandshakeInterceptor</span>());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建WsSessionManager存储websocket-session"><a href="#创建WsSessionManager存储websocket-session" class="headerlink" title="创建WsSessionManager存储websocket session"></a>创建WsSessionManager存储websocket session</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WsSessionManager</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConcurrentHashMap&lt;String, WebSocketSession&gt; SESSION_POOL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">onlineCount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加 session</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wsId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String wsId, WebSocketSession session)</span> &#123;<br>        addOnlineCount();<br>        SESSION_POOL.put(wsId, session);<br>        log.info(<span class="hljs-string">&quot;有新窗口开始监听:&quot;</span> + wsId + <span class="hljs-string">&quot;,当前在线人数为:&quot;</span> + getOnlineCount());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除 session,会返回删除的 session</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wsId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> WebSocketSession <span class="hljs-title function_">remove</span><span class="hljs-params">(String wsId)</span> &#123;<br>        <span class="hljs-type">WebSocketSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> SESSION_POOL.remove(wsId);<br>        subOnlineCount();<br>        log.info(<span class="hljs-string">&quot;释放的wsId为：&quot;</span> + wsId);<br>        log.info(<span class="hljs-string">&quot;有一连接关闭！当前在线人数为&quot;</span> + getOnlineCount());<br>        <span class="hljs-keyword">return</span> session;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除并同步关闭连接</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wsId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeAndClose</span><span class="hljs-params">(String wsId)</span> &#123;<br>        <span class="hljs-type">WebSocketSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> remove(wsId);<br>        <span class="hljs-keyword">if</span> (session != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 关闭连接</span><br>                session.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                log.error(e.getMessage(),e);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得 session</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> WebSocketSession <span class="hljs-title function_">get</span><span class="hljs-params">(String wsId)</span> &#123;<br>        <span class="hljs-comment">// 获得 session</span><br>        <span class="hljs-keyword">return</span> SESSION_POOL.get(wsId);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实现服务器主动推送</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String wsId,String message)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        get(wsId).sendMessage(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextMessage</span>(message));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 非多机部署请注释此方法</span><br><span class="hljs-comment">     * 实现服务器主动推送 用于解决分布式websocket session不共享的问题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessageBroadcasting</span><span class="hljs-params">(String wsId,String message)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">RocketMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> SpringContextUtils.getBean(RocketMQProducer.class);<br>        <span class="hljs-type">WebSocketMessageSendDto</span> <span class="hljs-variable">webSocketMessageSendDto</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketMessageSendDto</span>();<br>        webSocketMessageSendDto.setWsId(wsId);<br>        webSocketMessageSendDto.setMessage(message);<br>        producer.sendObject(RocketMqConstant.Topic.MERCURY_WEB_SOCKET_MESSAGE_SEND,webSocketMessageSendDto);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOnlineCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> WsSessionManager.onlineCount.get();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOnlineCount</span><span class="hljs-params">()</span> &#123;<br>        WsSessionManager.onlineCount.getAndIncrement();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">subOnlineCount</span><span class="hljs-params">()</span> &#123;<br>        WsSessionManager.onlineCount.getAndDecrement();<br>    &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * url template：http://localhost/api/websocket/&#123;ws_id&#125;</span><br><span class="hljs-comment">    * 需要在url提取ws_id</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getWsId</span><span class="hljs-params">(String requestUrl)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        String[] split = requestUrl.split(<span class="hljs-string">&quot;/api/websocket/&quot;</span>);<br>        <span class="hljs-keyword">if</span> (split.length &lt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;invalid ws request&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> split[split.length - <span class="hljs-number">1</span>];<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="发送消息给前端"><a href="#发送消息给前端" class="headerlink" title="发送消息给前端"></a>发送消息给前端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">WsSessionManager.sendMessage(ws_id,message)<br></code></pre></td></tr></table></figure><h3 id="三、前端Vue与websocket集成"><a href="#三、前端Vue与websocket集成" class="headerlink" title="三、前端Vue与websocket集成"></a>三、前端Vue与websocket集成</h3><h4 id="新建websocket-js"><a href="#新建websocket-js" class="headerlink" title="新建websocket.js"></a>新建websocket.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// import &#123; showInfoMsg, showErrorMsg &#125; from &#x27;@/utils/popInfo&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">WS_API</span> = <span class="hljs-string">`ws://localhost:8080`</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">initWebSocket</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-string">&#x27;WebSocket&#x27;</span><span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)) &#123;<br>        <span class="hljs-title class_">ElementUI</span>.<span class="hljs-title class_">Notification</span>(&#123;<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;当前浏览器 Not support websocket&#x27;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br>            <span class="hljs-attr">duration</span>: <span class="hljs-number">0</span>,<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">const</span> wsUri = <span class="hljs-variable constant_">WS_API</span> + <span class="hljs-string">&#x27;/api/websocket/&#x27;</span> + e;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(wsUri); <span class="hljs-comment">//这里面的this都指向vue</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-property">onerror</span> = webSocketOnError;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-property">onmessage</span> = webSocketOnMessage;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-property">onclose</span> = closeWebsocket;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">webSocketOnError</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-comment">// console.log(e)</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>    <span class="hljs-title class_">ElementUI</span>.<span class="hljs-title class_">Notification</span>(&#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;WebSocket连接发生错误&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br>        <span class="hljs-attr">duration</span>: <span class="hljs-number">3000</span>,<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">webSocketOnMessage</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(e.<span class="hljs-property">data</span>);<br>  <span class="hljs-title class_">ElementUI</span>.<span class="hljs-title class_">Notification</span>(&#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">message</span>: data.<span class="hljs-property">msg</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>    <span class="hljs-attr">duration</span>: <span class="hljs-number">5000</span>,<br>  &#125;);<br>&#125;<br><br><span class="hljs-comment">// 关闭websiocket</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">closeWebsocket</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;连接已关闭...&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">close</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-title function_">close</span>(); <span class="hljs-comment">// 关闭 websocket</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e); <span class="hljs-comment">//监听关闭事件</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;关闭&#x27;</span>);<br>    &#125;;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">webSocketSend</span>(<span class="hljs-params">agentData</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">socket</span>.<span class="hljs-title function_">send</span>(agentData);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    initWebSocket,<br>    close,<br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="在main-js引入"><a href="#在main-js引入" class="headerlink" title="在main.js引入"></a>在main.js引入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> websocket <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;具体地址/websocket&quot;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$websocket</span> = websocket;<br></code></pre></td></tr></table></figure><p>然后在需要初始化websocket的地方，我是在App.vue全局mounted以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$websocket</span>.<span class="hljs-title function_">initWebSocket</span>(&#123;ws_id&#125;)<span class="hljs-comment">//请根据具体逻辑替换ws_id 我这里填入的是jwt token</span><br></code></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202206071032239.png" alt="image-20220606183934456"></p><center><small>进入页面就会连接websocket</small></center><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202206071032020.png" alt="image-20220606183828420"></p><center><small>后端通过调用WsSessionManager.sendMessage(ws_id,message)发送消息给具体用户</small></center><h3 id="三、解决websocket-session在分布式系统不共享问题"><a href="#三、解决websocket-session在分布式系统不共享问题" class="headerlink" title="三、解决websocket session在分布式系统不共享问题"></a>三、解决websocket session在分布式系统不共享问题</h3><p>在Spring所集成的WebSocket里面，每个ws连接都有一个对应的session：WebSocketSession，在Spring WebSocket中，我们建立ws连接之后可以通过类似这样的方式进行与客户端的通信。但是 ws的session无法序列化到redis， 因此在集群中，我们无法将所有WebSocketSession都缓存到redis进行session共享。</p><p>本文简单解决方案思路：利用rocketmq广播的特性使得每一台机子都能执行发送消息的动作，这样的操作可能会导致没有对应webSocketSession的机器执行一直没必要的操作，但是因为根据键值ws_id在map中定位session，可以忽略不计。</p><h4 id="简单定义一个数据传输对象"><a href="#简单定义一个数据传输对象" class="headerlink" title="简单定义一个数据传输对象"></a>简单定义一个数据传输对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketMessageSendDto</span> &#123;<br>    <span class="hljs-keyword">private</span> String wsId;<br>    <span class="hljs-keyword">private</span> String message;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h4><p>重点：messageModel &#x3D; MessageModel.BROADCASTING</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RocketMQMessageListener(topic = RocketMqConstant.Topic.MERCURY_WEB_SOCKET_MESSAGE_SEND</span><br><span class="hljs-meta">        , consumerGroup = RocketMqConstant.ComsumerGroup.MERCURY_WEB_SOCKET_MESSAGE_SEND,</span><br><span class="hljs-meta">        messageModel = MessageModel.BROADCASTING)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketMessageSendConsumer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RocketMQListener</span>&lt;WebSocketMessageSendDto&gt;, RocketMQPushConsumerLifecycleListener &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(WebSocketMessageSendDto dto)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;WebSocketMessageSendConsumer 接收到信息：&#123;&#125;&quot;</span>,JSON.toJSONString(dto));<br>        <span class="hljs-keyword">try</span> &#123;<br>            WsSessionManager.sendMessage(dto.getWsId(),dto.getMessage());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(e.getMessage(),e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareStart</span><span class="hljs-params">(DefaultMQPushConsumer consumer)</span> &#123;<br>        consumer.setMaxReconsumeTimes(<span class="hljs-number">2</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="消息生产者"><a href="#消息生产者" class="headerlink" title="消息生产者"></a>消息生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 实现服务器主动推送</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessageBroadcasting</span><span class="hljs-params">(String wsId,String message)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>     <span class="hljs-type">RocketMQTemplate</span> <span class="hljs-variable">rocketMQTemplate</span> <span class="hljs-operator">=</span> SpringContextUtils.getBean(RocketMQTemplate.class);<br>     <span class="hljs-type">WebSocketMessageSendDto</span> <span class="hljs-variable">webSocketMessageSendDto</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketMessageSendDto</span>();<br>     webSocketMessageSendDto.setWsId(wsId);<br>     webSocketMessageSendDto.setMessage(message);<br>   rocketMQTemplate.convertAndSend(RocketMqConstant.Topic.MERCURY_WEB_SOCKET_MESSAGE_SEND, JSON.toJSONString(webSocketMessageSendDto))<br> &#125;<br>  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebSocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>店匠插件开发-创建店匠应用</title>
    <link href="/2022/05/09/%E5%BA%97%E5%8C%A0%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91-%E5%88%9B%E5%BB%BA%E5%BA%97%E5%8C%A0%E5%BA%94%E7%94%A8/"/>
    <url>/2022/05/09/%E5%BA%97%E5%8C%A0%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91-%E5%88%9B%E5%BB%BA%E5%BA%97%E5%8C%A0%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>因为公司最近有需求需要开发商品批量导入到店匠，所以简单记录一下操作过程</p><h3 id="创建店匠私有App"><a href="#创建店匠私有App" class="headerlink" title="创建店匠私有App"></a>创建店匠私有App</h3><p>店匠官网：<a href="https://promo.shoplazza.cn/">https://promo.shoplazza.cn</a></p><p>官方教程：<a href="https://www.shoplazza.dev/reference">https://www.shoplazza.dev/reference</a></p><blockquote><p>创建店铺过程忽略</p></blockquote><p>进入店铺&gt;Apps&gt;管理私有App&gt;创建应用</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205091923902.png" alt="image-20220509151049132"></p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205091920237.png" alt="image-20220509192015711"></p><p>填入应用名称，开发者邮箱，然后按需选择接口调用权限</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205091923235.png" alt="image-20220509151137589"></p><p>创建app成功后即可获得Token、App UID、App Secret，后续开发会用到</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205091924048.png" alt="image-20220509151302132"></p><h3 id="使用Postman调试"><a href="#使用Postman调试" class="headerlink" title="使用Postman调试"></a>使用Postman调试</h3><p>使用Token和官方提供的API进行接口调试</p><p>填入token 复制CURL语句</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205091919133.png" alt="image-20220509191946173"></p><p>粘贴到postman进行调试</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205091924847.png" alt="image-20220509191446157"></p><p>有返回值且状态码为200表示测试成功</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205091924934.png" alt="image-20220509191601006"></p><blockquote><p>接下来就可以根据对应接口进行定制化开发啦，后续是公司定制化代码就不展示上来了</p></blockquote><h3 id="创建店匠公有App"><a href="#创建店匠公有App" class="headerlink" title="创建店匠公有App"></a>创建店匠公有App</h3><h4 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h4><p>官网：<a href="https://partners.shoplazza.com/">https://partners.shoplazza.com/</a></p><h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h4><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205092121186.png" alt="image-20220509212114676"></p><table><thead><tr><th align="left"><strong>App URL</strong></th><th align="left">App’s main service URL</th><th align="left">在应用程序安装过程中使用。 当商家安装您的应用或进入该应用时，您的应用会收到对该应用 URL 的 GET 请求。 您的应用在收到 GET 请求后需要启动 OAuth 流程来安装应用，无论应用安装过程是从 Shoplaza 应用商店的“添加应用”开始，还是从合作伙伴中心仪表板的“安装应用”开始。–谷歌翻译</th></tr></thead><tbody><tr><td align="left"><strong>Redirect URL</strong></td><td align="left">App’s redirect URL</td><td align="left">在应用程序安装过程中使用。 商户在 OAuth 过程中授予权限后，商户将被重定向到带有 OAuth 代码和其他字段的重定向 URL。–谷歌翻译</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205092121847.png" alt="image-20220509212107975"></p><h4 id="授权流程"><a href="#授权流程" class="headerlink" title="授权流程"></a>授权流程</h4><blockquote><p> 以下大部分内容是直接谷歌翻译自店匠官方</p></blockquote><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205092153822.png" alt="img"></p><center><small>基于商家、您的应用和 Shoplaza 的操作的 OAuth 流程-图源来自店匠官网</small></center><ol><li>商家发出安装应用程序的请求。</li><li>应用重定向到Shoplazza Store的应用安装页面，请求商家授权。</li><li>Shoplazza 商店的应用安装页面提示 OAuth 授权屏幕并请求商家授权所需的范围。</li><li>商家通过同意应用请求的权限来授权应用。</li><li>该应用程序收到一个授权代码。</li><li>该应用程序通过使用授权代码向 Shoplazza Store 发送请求来请求访问令牌。</li><li>Shoplazza 对应用程序进行身份验证，验证授权代码，然后发出并返回访问令牌。该应用程序现在可以从 Shoplazza 请求数据。</li><li>该应用程序使用访问令牌向<a href="https://www.shoplazza.dev/reference/overview">Shoplazza Open API</a>发出请求。</li><li>Shoplazza 验证访问令牌并返回请求的数据。</li></ol><h5 id="OAuth授权流程的步骤"><a href="#OAuth授权流程的步骤" class="headerlink" title="OAuth授权流程的步骤"></a>OAuth授权流程的步骤</h5><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205092153672.png" alt="img"></p><center><small>OAuth授权流程-图源来自店匠官网</small></center><blockquote><p> PHP和GO可以使用官网的SDK进行授权第二步，自行尝试</p></blockquote><h5 id="Java对接店匠OAuth授权流程"><a href="#Java对接店匠OAuth授权流程" class="headerlink" title="Java对接店匠OAuth授权流程"></a>Java对接店匠OAuth授权流程</h5>]]></content>
    
    
    <categories>
      
      <category>外贸电商</category>
      
    </categories>
    
    
    <tags>
      
      <tag>店匠</tag>
      
      <tag>外贸电商</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>让 Google 收录博客</title>
    <link href="/2022/05/08/%E8%AE%A9google-%E6%94%B6%E5%BD%95%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/05/08/%E8%AE%A9google-%E6%94%B6%E5%BD%95%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>注意：本文以Fluid主题当示例来介绍</p></blockquote><h3 id="Google-Search-Console配置"><a href="#Google-Search-Console配置" class="headerlink" title="Google Search Console配置"></a>Google Search Console配置</h3><p>进入网址<a href="https://search.google.com/search-console">https://search.google.com/search-console</a></p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081849682.png" alt="image-20220508183546777" /><p>我选择的是&lt;网址前缀&gt; 输入网址后提示</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081849684.png" alt="image-20220508183818914"></p><p>我选择的是HTML标识验证 把元标记复制添加到hexo配置</p><h3 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h3><p>因为上文中已使用覆盖配置的方式使<strong>主题配置</strong>放置在 &lt;主题&gt; 目录之外，所以我们需要在hexo根目录下修改_config.&lt;主题名称&gt;.yml即可</p><p>我这里是_config.fluid.yml，全局搜索comment找到以下内容添加google提供的meta</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081849685.png" alt="image-20220508183318695"></p><p>添加成功并Hexo部署</p><p>然后再回到Google Search Console点击验证，显示这个代表配置成功</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081849686.png" alt="image-20220508183634549"></p><h3 id="Google-Search-Console-请求编入索引"><a href="#Google-Search-Console-请求编入索引" class="headerlink" title="Google Search Console 请求编入索引"></a>Google Search Console 请求编入索引</h3><p>登录你的 <a href="https://search.google.com/search-console/about">Google search console</a>，登陆后在控制台点击网址检查。</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081849687.png" alt="image-20220508184304499"></p><p>点击请求编入索引，耐心等待</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081849688.png" alt="image-20220508184322245"></p><p>显示以下内容表示编入索引成功</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081849689.png" alt="image-20220508184351161"></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 配置评论功能</title>
    <link href="/2022/05/08/Hexo-%E9%85%8D%E7%BD%AE%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/05/08/Hexo-%E9%85%8D%E7%BD%AE%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<blockquote><p>注意：本文以Fluid主题当示例来介绍如何配置评论，其他主题请根据对应用户手册配置</p></blockquote><p>我是用的主题Fluid支持多种评论插件，utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | </p><p>cusdis，每种插件有不同的配置方法，为了和评论用户有真实反馈、长久的交互和尽可能简单配置我这里选择了基于 GitHub Issues实现的utterances</p><h3 id="新建github仓库"><a href="#新建github仓库" class="headerlink" title="新建github仓库"></a>新建github仓库</h3><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081715639.png" alt="image-20220508171452067"></p><p>（我这里已经创建过了，所以显示报错）</p><h3 id="github-Install-utterances-app"><a href="#github-Install-utterances-app" class="headerlink" title="github Install utterances app"></a>github Install utterances app</h3><p>utterances官网：<a href="https://utteranc.es/">https://utteranc.es/</a></p><p>点击此链接github安装<a href="https://github.com/apps/utterances">utterances app</a>。</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081720238.png" alt="image-20220508172011715"></p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081730113.png" alt="image-20220508172028588"></p><h3 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h3><p>因为上文中已使用覆盖配置的方式使<strong>主题配置</strong>放置在 &lt;主题&gt; 目录之外，所以我们需要在hexo根目录下修改_config.&lt;主题名称&gt;.yml即可</p><p>我这里是_config.fluid.yml，全局搜索comment找到以下内容开启评论并使用utterances插件 修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugin</span><br><span class="hljs-attr">comments:</span><br><span class="hljs-comment">#开启评论插件</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>  <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>  <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">utterances</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081730114.png" alt="image-20220508170721628"></p><p>配置utterances插件 在_config.fluid.yml文件全局搜索utterances找到以下内容修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Utterances</span><br><span class="hljs-comment"># 基于 GitHub Issues</span><br><span class="hljs-comment"># Based on GitHub Issues</span><br><span class="hljs-comment"># See: https://utteranc.es</span><br><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">repo仓库</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">label:</span> <span class="hljs-string">utterances</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><br>  <span class="hljs-attr">crossorigin:</span> <span class="hljs-string">anonymous</span><br></code></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>打开你的博客文章 看到以下内容 即为配置成功</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081730181.png" alt="image-20220508172837182"></p><p>注：如果有些页面没有出现此评论插件可以在文章开头手动打开</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081729044.png" alt="image-20220508172937108"></p><p>一旦有评论我就会第一时间收到邮件啦，我就会在第一时间回复啦🤪，欢迎评论</p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081734441.png" alt="image-20220508173435809" />]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 搭建博客Blog记录</title>
    <link href="/2022/05/07/Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2Blog%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/05/07/Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2Blog%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p><strong>我的第一篇文章 记录一下博客搭建过程</strong></p><center><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/202205081923624.jpg" alt="GitHub+Hexo 搭建个人网站详细教程" style="width:100%;"/></center><center><small><font color="gray">(此图来源于网络)</font></small></center><h4 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h4><p>Hexo官网地址 &gt; <a href="https://hexo.io/">https://hexo.io/</a></p><blockquote><p>What is Hexo?</p><p>Hexo is a fast, simple and powerful blog framework. You write posts in <a href="http://daringfireball.net/projects/markdown/">Markdown</a> (or other markup languages) and Hexo generates static files with a beautiful theme in seconds.—引用自官网</p></blockquote><p>Hexo是什么？ Hexo是一个快速、简单且功能强大的博客框架。你用Markdown（或其他标记语言）写文章，Hexo会在几秒钟内生成带有漂亮主题的静态文件。</p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/image-20220507225447240.png" alt="image-20220507225447240"></p><p>注：本文安装教程针对 Mac系统，部分命令不适用于Windows</p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul><li><p><a href="http://nodejs.org/">Node.js</a> (Should be at least Node.js 10.13, recommends 12.0 or higher)</p><p><code>brew install node</code></p><blockquote><p>官网：</p><ul><li>Windows: Download &amp; install <a href="https://git-scm.com/download/win">git</a>.</li><li>Mac: Install it with <a href="https://brew.sh/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> or <a href="http://sourceforge.net/projects/git-osx-installer/">installer</a>.</li><li>Linux (Ubuntu, Debian): <code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS): <code>sudo yum install git-core</code></li></ul></blockquote></li><li><p><a href="http://git-scm.com/">Git</a></p><p><code>brew install git</code></p><blockquote><p>官网：</p><ul><li>Windows: Install it with <a href="https://github.com/jasongin/nvs/">nvs</a> (recommended) or <a href="https://github.com/nvm-sh/nvm">nvm</a>.</li><li>Mac: Install it with <a href="https://brew.sh/">Homebrew</a> or <a href="http://www.macports.org/">MacPorts</a>.</li><li>Linux (DEB&#x2F;RPM-based): Install it with <a href="https://github.com/nodesource/distributions">NodeSource</a>.</li><li>Others: Install it through respective package manager. Refer to <a href="https://nodejs.org/en/download/package-manager/">the guide</a> provided by Node.js.</li></ul></blockquote></li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>npm install hexo-cli -g hexo init blog cd blog npm install</code></p><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p><code>hexo server</code></p><p>显示以下内容为启动成功</p><p><left><img src="/Users/casonmo/Documents/Typora/图片/image-20220507231042826.png" alt="image-20220507231042826" style="zoom:50%;" /></left></p><p>访问<a href="http://localhost:4000/">http://localhost:4000/</a> 即可进入你的博客</p><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>主题地址：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/image-20220507233206084.png" alt="image-20220507233206084"></p><p>挑选喜欢的主题 点击进入github地址</p><p>在初始化的hexo目录下执行git clone 到theme下指定目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs git">git clone https://github.com/fluid-dev/hexo-theme-fluid.git themes/fluid<br></code></pre></td></tr></table></figure><p>主题都会有自己的用户手册 我用的是Fluid主题 用户手册：<a href="https://hexo.fluid-dev.com/docs/start">https://hexo.fluid-dev.com/docs/start</a></p><p>主题跟这个用户手册配置就好了 我这里就不赘述了</p><h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><blockquote><p> 详细使用教程 <a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p></blockquote><ul><li>可以使用以下命令新建文章</li></ul><p><code>hexo new &quot;&lt;文章名称&gt;&quot;</code></p><ul><li><p>然后cd &lt;hexo目录&gt;&#x2F;source&#x2F;_posts 就可以用markdown语句编辑文档</p></li><li><p>可以在文件顶部通过tags 修改标签 、通过categories修改分类、通过hide隐藏文章、通过archives归档</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">搭建博客Blog记录</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-05-07 17:44:14</span><br><span class="hljs-attr">hide:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">archives:</span> <span class="hljs-string">/archives</span><br><span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">first</span> <span class="hljs-string">tags</span><br><span class="hljs-attr">categories:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">first</span> <span class="hljs-string">categories</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">&lt;正文内容&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/image-20220508045636333.png" alt="image-20220508045636333"></p><p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/image-20220508045657889.png" alt="image-20220508045657889"></p><h4 id="关于部署"><a href="#关于部署" class="headerlink" title="关于部署"></a>关于部署</h4><blockquote><p>Hexo 支持多种部署方式 具体可到官网查看：<a href="https://hexo.io/zh-cn/docs/one-command-deployment">https://hexo.io/zh-cn/docs/one-command-deployment</a></p></blockquote><h5 id="新建github仓库"><a href="#新建github仓库" class="headerlink" title="新建github仓库"></a>新建github仓库</h5><p>注意：固定名称&lt;用户名&gt;.github.io</p><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/image-20220508050126798.png" alt="·" style="zoom:50%;" /><h5 id="关联git仓库和Hexo"><a href="#关联git仓库和Hexo" class="headerlink" title="关联git仓库和Hexo"></a>关联git仓库和Hexo</h5><p>在你初始化Hexo的根目录 修改_config.yml 在#Deployment下添加以下内容 注意空格</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">仓库地址</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">分支</span><br></code></pre></td></tr></table></figure><h5 id="安装部署插件"><a href="#安装部署插件" class="headerlink" title="安装部署插件"></a>安装部署插件</h5><p><code>npm install hexo-deployer-git --save</code></p><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><p><code>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</code></p><p>可简写为</p><p><code>hexo clean &amp;&amp; hexo g -d</code></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><p>覆盖配置可以使<strong>主题配置</strong>放置在 fluid 目录之外，避免在更新主题时丢失自定义的配置。</p><p>在博客目录下创建 <code>_config.&lt;主题名称&gt;.yml</code> 文件，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml (opens new window)</a>全部配置（或部分配置）复制过去。</p><p>以后如果修改任何主题配置，都只需修改 <code>_config.&lt;主题名称&gt;.yml</code> 的配置即可。</p><p><left><img src="https://raw.githubusercontent.com/CasonMo/pic-go/master/img/image-20220508154920223.png" alt="image-20220508154920223"  /></left></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
