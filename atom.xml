<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog|CasonMo</title>
  
  
  <link href="https://cason.work/atom.xml" rel="self"/>
  
  <link href="https://cason.work/"/>
  <updated>2024-05-30T08:09:57.958Z</updated>
  <id>https://cason.work/</id>
  
  <author>
    <name>Cason Mo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动测量合作伙伴（MMP）的广告归因链路</title>
    <link href="https://cason.work/2024/05/30/%E7%A7%BB%E5%8A%A8%E6%B5%8B%E9%87%8F%E5%90%88%E4%BD%9C%E4%BC%99%E4%BC%B4%EF%BC%88MMP%EF%BC%89%E7%9A%84%E5%B9%BF%E5%91%8A%E5%BD%92%E5%9B%A0%E9%93%BE%E8%B7%AF/"/>
    <id>https://cason.work/2024/05/30/%E7%A7%BB%E5%8A%A8%E6%B5%8B%E9%87%8F%E5%90%88%E4%BD%9C%E4%BC%99%E4%BC%B4%EF%BC%88MMP%EF%BC%89%E7%9A%84%E5%B9%BF%E5%91%8A%E5%BD%92%E5%9B%A0%E9%93%BE%E8%B7%AF/</id>
    <published>2024-05-30T07:02:22.000Z</published>
    <updated>2024-05-30T08:09:57.958Z</updated>
    
    <content type="html"><![CDATA[<h3 id="移动测量合作伙伴（MMP）的广告归因链路"><a href="#移动测量合作伙伴（MMP）的广告归因链路" class="headerlink" title="移动测量合作伙伴（MMP）的广告归因链路"></a>移动测量合作伙伴（MMP）的广告归因链路</h3><p>移动测量合作伙伴（Mobile Measurement Partner，简称MMP）是一类专门提供移动应用广告归因和分析服务的第三方平台。MMP的主要功能是帮助广告主和应用开发者跟踪和分析广告效果，确定用户的来源，从而优化广告投放策略，提高广告投放的投资回报率（ROI）。广告归因是MMP的核心功能之一，通过收集和分析用户的点击和安装数据，确定用户是通过哪个广告平台、广告活动甚至具体的广告创意下载并安装了应用。</p><h4 id="无链接广告的归因链路"><a href="#无链接广告的归因链路" class="headerlink" title="无链接广告的归因链路"></a>无链接广告的归因链路</h4><p>![image-20240530145119242](..&#x2F;..&#x2F;..&#x2F;..&#x2F;Library&#x2F;Mobile Documents&#x2F;iCloud<del>md</del>obsidian&#x2F;Documents&#x2F;typora&#x2F;images&#x2F;image-20240530145119242.png)</p><p>无链接广告通常指那些不包含深度链接或特定归因链接的广告。这类广告的归因依赖于设备标识符和时间窗口。以下是无链接广告的归因链路详细过程：</p><ol><li><strong>广告展示与点击</strong>：<ul><li>用户在广告平台（如Google、Facebook）上看到广告并点击。</li><li>广告平台记录下点击事件，包括设备ID（如IDFA、GAID）和点击时间。</li><li>为了能够进行准确的归因，广告平台（如Google、Facebook）在用户点击广告时，会将点击数据（如点击时间、设备ID等）发送到MMP。</li></ul></li><li><strong>应用下载与安装</strong>：<ul><li>用户被引导到应用商店，下载并安装应用。</li></ul></li><li><strong>应用激活与MMP SDK的作用</strong>：<ul><li>用户首次打开应用时，应用内集成的MMP SDK（如Adjust、AppsFlyer）会触发一次激活事件。</li><li>SDK收集设备标识符、安装时间等信息，并发送到MMP服务器。</li></ul></li><li><strong>广告归因处理</strong>：<ul><li>MMP服务器将接收到的激活数据与之前从广告平台获取的点击数据进行匹配。</li><li>通过时间窗口（通常为点击后的24至48小时）和设备标识符，MMP确定用户的安装行为与哪个点击事件相关联。</li></ul></li><li><strong>归因报告</strong>：<ul><li>MMP回传数据告知是通过哪个广告平台的广告安装了应用。</li></ul></li></ol><p>这种归因方法依赖于设备标识符和时间窗口来推断用户行为，可能会因设备ID的变化或其他因素影响归因准确性。</p><h4 id="有链接广告的归因链路"><a href="#有链接广告的归因链路" class="headerlink" title="有链接广告的归因链路"></a>有链接广告的归因链路</h4><p>![image-20240530145130921](..&#x2F;..&#x2F;..&#x2F;..&#x2F;Library&#x2F;Mobile Documents&#x2F;iCloud<del>md</del>obsidian&#x2F;Documents&#x2F;typora&#x2F;images&#x2F;image-20240530145130921.png)</p><p>有链接广告包含深度链接或特定的归因链接，例如Branch链接或AppsFlyer Onelink。这些链接能直接追踪用户的点击行为，使归因过程更为精确。以下是有链接广告的归因链路详细过程：</p><ol><li><strong>广告展示与点击</strong>：<ul><li>用户在广告平台上看到包含归因链接的广告（如Branch链接或AppsFlyer Onelink）。</li><li>用户点击广告链接。</li></ul></li><li><strong>链接重定向与归因信息收集</strong>：<ul><li>点击广告链接后，用户会被重定向到归因平台的中间页面。</li><li>中间页面收集用户点击信息，包括设备ID、点击时间、广告来源等。</li></ul></li><li><strong>重定向到应用商店</strong>：<ul><li>收集完必要信息后，用户被重定向到应用商店的应用下载页面。</li></ul></li><li><strong>应用下载与安装</strong>：<ul><li>用户下载并安装应用。</li></ul></li><li><strong>应用激活与SDK的作用</strong>：<ul><li>用户首次打开应用时，应用内集成的归因平台SDK（如Branch SDK、AppsFlyer SDK）会触发一次激活事件。</li><li>SDK将设备标识符和安装时间等信息发送到归因平台服务器。</li></ul></li><li><strong>归因匹配</strong>：<ul><li>归因平台服务器将激活事件与之前收集的点击数据进行匹配。</li><li>由于链接中包含了具体的归因信息，归因平台能够直接将用户安装归因到特定的广告点击。</li></ul></li><li><strong>归因报告</strong>：<ul><li>归因平台回调告知是通过哪个广告平台和具体的广告链接下载并安装了应用。</li></ul></li></ol><p>有链接广告的归因方法由于使用了明确的点击信息和广告来源，归因过程更加直接和精确。</p><h4 id="无链接广告与有链接广告的区别"><a href="#无链接广告与有链接广告的区别" class="headerlink" title="无链接广告与有链接广告的区别"></a>无链接广告与有链接广告的区别</h4><ol><li><strong>归因信息收集</strong>：<ul><li><strong>无链接广告</strong>：依赖于设备标识符和时间窗口进行归因，需要更多的匹配步骤。</li><li><strong>有链接广告</strong>：通过深度链接或归因链接直接收集点击信息，归因过程更加直接和精确。</li></ul></li><li><strong>中间页面重定向</strong>：<ul><li><strong>无链接广告</strong>：用户点击广告后直接跳转到应用商店，归因信息通过后台匹配。</li><li><strong>有链接广告</strong>：用户点击广告后首先重定向到归因平台的中间页面，收集归因信息后再跳转到应用商店。</li></ul></li><li><strong>准确性</strong>：<ul><li><strong>无链接广告</strong>：归因准确性可能受限于设备标识符的变化和点击后的时间窗口。</li><li><strong>有链接广告</strong>：归因更准确，因为链接中包含了明确的点击信息和广告来源。</li></ul></li><li><strong>归因速度</strong>：<ul><li><strong>无链接广告</strong>：归因过程可能需要更多时间来匹配和确认。</li><li><strong>有链接广告</strong>：归因过程更加迅速，因为点击信息在链接中已经明确。</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;移动测量合作伙伴（MMP）的广告归因链路&quot;&gt;&lt;a href=&quot;#移动测量合作伙伴（MMP）的广告归因链路&quot; class=&quot;headerlink&quot; title=&quot;移动测量合作伙伴（MMP）的广告归因链路&quot;&gt;&lt;/a&gt;移动测量合作伙伴（MMP）的广告归因链路&lt;/h3&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Springboot-Redisson实现延迟消息队列</title>
    <link href="https://cason.work/2024/04/29/Springboot-Redisson%E5%AE%9E%E7%8E%B0%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <id>https://cason.work/2024/04/29/Springboot-Redisson%E5%AE%9E%E7%8E%B0%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</id>
    <published>2024-04-29T03:42:13.000Z</published>
    <updated>2024-04-29T04:04:27.018Z</updated>
    
    <content type="html"><![CDATA[<p>Redisson是一个基于Redis的Java驻留库，旨在简化Java应用程序对Redis的操作。它提供了丰富的功能和易于使用的API，使得在Java应用中集成Redis变得更加简单和高效。Redisson的主要功能包括分布式对象、分布式锁、分布式队列、分布式调度器等，使得在分布式环境中进行协作变得更加容易。</p><p>延迟队列是Redisson提供的一个功能强大的组件之一。它允许开发者在指定的延迟时间之后自动执行任务，这对于需要在一定时间后执行操作的应用程序非常有用，如消息通知、订单处理、定时任务等。</p><p>Redisson实现延迟队列的原理基于Redis的有序集合（Sorted Set）和Redis的过期时间机制</p><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><p>因为<code>RDelayedQueue</code>并不直接存储任务。相反，它是一种装饰器或包装器，用于添加延迟功能到一个标准的Redisson队列（如<code>RBlockingQueue</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissonDelayQueueProducer</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDelayedTask</span><span class="hljs-params">(String topic, Object task, <span class="hljs-type">long</span> delay, TimeUnit timeUnit)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;redis的延迟队列 &#123;&#125; (添加)的key:&#123;&#125;,time:&#123;&#125;,当前时间:&#123;&#125;&quot;</span>, topic, task, delay, LocalDateTimeUtil.formatNormal(LocalDateTime.now()));<br>        redissonClient.getDelayedQueue(redissonClient.getBlockingQueue(topic)).offerAsync(task, delay, timeUnit);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">cancelDelayedTask</span><span class="hljs-params">(String topic, Object task)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;redis的延迟队列&#123;&#125; (移除)的key:&#123;&#125;,当前时间:&#123;&#125;&quot;</span>, topic, task, LocalDateTimeUtil.formatNormal(LocalDateTime.now()));<br>        <span class="hljs-comment">// 从延迟队列中移除任务</span><br>        <span class="hljs-keyword">return</span> redissonClient.getDelayedQueue(redissonClient.getBlockingQueue(topic)).remove(task);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p>起一个线程循环监听延迟队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissonDelayedQueueConsumer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">topic</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic&quot;</span>;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建延迟队列</span><br>        log.info(<span class="hljs-string">&quot;&#123;&#125; 开始监听&quot;</span>, topic);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    RBlockingQueue&lt;Object&gt; aaa = redissonClient.getBlockingQueue(topic);<br>                    RDelayedQueue&lt;Object&gt; delayedQueue = redissonClient.getDelayedQueue(aaa);<br>                    <span class="hljs-comment">// 从延迟队列中取出任务</span><br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">take</span> <span class="hljs-operator">=</span> aaa.take();<br>                    <span class="hljs-comment">// 处理延迟任务，例如执行某个操作</span><br>                    log.info(<span class="hljs-string">&quot;redis的延迟队列:&#123;&#125;,当前时间:&#123;&#125;&quot;</span>, take, LocalDateTimeUtil.formatNormal(LocalDateTime.now()));<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    log.error(<span class="hljs-string">&quot;redis的延迟队列抛出异常&quot;</span>, e);<br>                &#125;<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h4><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240429115537300.png" alt="image-20240429115537300"></p><h4 id="redisson配置"><a href="#redisson配置" class="headerlink" title="redisson配置"></a>redisson配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.17.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissonConfig</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.data.redis.host&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String redisHost;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.data.redis.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String redisPort;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.data.redis.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@Bean(destroyMethod = &quot;shutdown&quot;)</span><br>    <span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redissonClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://&quot;</span> + redisHost + <span class="hljs-string">&quot;:&quot;</span> + redisPort);<br>        <span class="hljs-keyword">if</span>(StringUtils.isBlank(password)) &#123;<br>            config.useSingleServer().setPassword(<span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            config.useSingleServer().setPassword(password);<br>        &#125;<br>        <span class="hljs-keyword">return</span> Redisson.create(config);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Redisson是一个基于Redis的Java驻留库，旨在简化Java应用程序对Redis的操作。它提供了丰富的功能和易于使用的API，使得在Java应用中集成Redis变得更加简单和高效。Redisson的主要功能包括分布式对象、分布式锁、分布式队列、分布式调度器等，使得</summary>
      
    
    
    
    <category term="Springboot" scheme="https://cason.work/categories/Springboot/"/>
    
    
    <category term="Redisson" scheme="https://cason.work/tags/Redisson/"/>
    
    <category term="Redis" scheme="https://cason.work/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>实用的 IntelliJ 插件</title>
    <link href="https://cason.work/2024/04/22/%E5%AE%9E%E7%94%A8%E7%9A%84-IntelliJ-%E6%8F%92%E4%BB%B6/"/>
    <id>https://cason.work/2024/04/22/%E5%AE%9E%E7%94%A8%E7%9A%84-IntelliJ-%E6%8F%92%E4%BB%B6/</id>
    <published>2024-04-22T03:13:42.000Z</published>
    <updated>2024-04-22T03:39:58.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h2><p>最好用过的翻译工具</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240422111533246.png" alt="image-20240422111533246"></p><h2 id="RoboPOJOGenerator"><a href="#RoboPOJOGenerator" class="headerlink" title="RoboPOJOGenerator"></a>RoboPOJOGenerator</h2><p>IntelliJ Idea 和 Android Studio 的插件，用于将 JSON 转换为 POJO。 从 JSON 生成 Java、Java Records 和 Kotlin 的 POJO 文件：GSON、FastJSON、AutoValue（GSON）、Logan Square、Jackson、Lombok、Jakarta JSON Binding、空注解模板。支持：原始类型、多个内部 JSONArray。</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240422112843612.png" alt="image-20240422112843612"></p><h2 id="Java-Bean-to-Json"><a href="#Java-Bean-to-Json" class="headerlink" title="Java Bean to Json"></a>Java Bean to Json</h2><p> Java类对象转换成一个 json</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240422111653856.png" alt="image-20240422111653856"></p><h2 id="SequenceDiagram"><a href="#SequenceDiagram" class="headerlink" title="SequenceDiagram"></a>SequenceDiagram</h2><p> Java类直接生成时序图</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240422111717408.png" alt="image-20240422111717408"></p><h2 id="CamelCase"><a href="#CamelCase" class="headerlink" title="CamelCase"></a>CamelCase</h2><p>可以轻松地在kebab-case、SNAKE_CASE、PascalCase、camelCase、snake_case或者space case之间切换。查看编辑菜单或使用 ⇧ + ⌥ + U &#x2F; Shift + Alt + U。</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240422111856198.png" alt="image-20240422111856198"></p><h2 id="GenerateAllSetter"><a href="#GenerateAllSetter" class="headerlink" title="GenerateAllSetter"></a>GenerateAllSetter</h2><p>一键调用一个对象的所有的set方法,get方法等，在方法上生成两个对象的转换</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240422112011976.png" alt="image-20240422112011976"></p><h2 id="Key-Promoter-X"><a href="#Key-Promoter-X" class="headerlink" title="Key Promoter X"></a>Key Promoter X</h2><p>Key Promoter X能帮助你在工作时学习必要的快捷键。当你在IDE内使用鼠标点击按钮时，Key Promoter X会显示你应该使用的键盘快捷键。这为学习如何用键盘按键替换繁琐的鼠标操作提供了一种简单的方法，并有助于过渡到更快速、无需鼠标的开发方式。Key Promoter X工具窗口会显示你最常使用的鼠标操作的清单，并直接提供可替代的快捷键。对于没有快捷键的按钮，Key Promoter X会提示你直接创建一个快捷键。</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240422112110446.png" alt="image-20240422112110446"></p><h2 id="LeetCode-Editor"><a href="#LeetCode-Editor" class="headerlink" title="LeetCode Editor"></a>LeetCode Editor</h2><p>支持leetcode.com和leetcode.cn，可以测试和提交问题</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240422112201974.png" alt="image-20240422112201974"></p><h2 id="Maven-Helper"><a href="#Maven-Helper" class="headerlink" title="Maven Helper"></a>Maven Helper</h2><p>一个必备的 Maven 工作插件。 </p><ul><li>分析和排除冲突依赖的简便方式。 </li><li>在包含当前文件的模块或根模块上运行&#x2F;调试 Maven 目标的操作。 </li><li>在当前 Maven 模块路径打开终端的操作。 运行&#x2F;调试当前测试文件的操作。</li></ul><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240422112321393.png" alt="image-20240422112321393"></p><h2 id="MyBatis-Log-Free"><a href="#MyBatis-Log-Free" class="headerlink" title="MyBatis Log Free"></a>MyBatis Log Free</h2><p>将MyBatis的SQL日志还原为原始的完整可执行SQL。</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240422112434638.png" alt="image-20240422112434638"></p><h2 id="MyBatisX"><a href="#MyBatisX" class="headerlink" title="MyBatisX"></a>MyBatisX</h2><p>MybatisX插件功能：</p><ul><li>Mapper和XML之间可以相互跳转</li><li>提示MyBatis.xml和Mapper.xml文件</li><li>Mapper和XML支持像JPA一样的自动提示（参考MybatisCodeHelperPro）</li><li>集成MyBatis Generator GUI（从免费MyBatis插件复制）</li></ul><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240422112524955.png" alt="image-20240422112524955"></p><h2 id="Rainbow-Brackets"><a href="#Rainbow-Brackets" class="headerlink" title="Rainbow Brackets"></a>Rainbow Brackets</h2><p>彩虹色的花括号</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240422112711489.png" alt="image-20240422112711489"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Translation&quot;&gt;&lt;a href=&quot;#Translation&quot; class=&quot;headerlink&quot; title=&quot;Translation&quot;&gt;&lt;/a&gt;Translation&lt;/h2&gt;&lt;p&gt;最好用过的翻译工具&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https:/</summary>
      
    
    
    
    
    <category term="IntelliJ" scheme="https://cason.work/tags/IntelliJ/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云大文件迁移教程-内网互联+scp</title>
    <link href="https://cason.work/2024/04/15/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%A4%A7%E6%96%87%E4%BB%B6%E8%BF%81%E7%A7%BB%E6%95%99%E7%A8%8B-%E5%86%85%E7%BD%91%E4%BA%92%E8%81%94-scp/"/>
    <id>https://cason.work/2024/04/15/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%A4%A7%E6%96%87%E4%BB%B6%E8%BF%81%E7%A7%BB%E6%95%99%E7%A8%8B-%E5%86%85%E7%BD%91%E4%BA%92%E8%81%94-scp/</id>
    <published>2024-04-15T06:08:55.000Z</published>
    <updated>2024-04-15T07:14:34.981Z</updated>
    
    <content type="html"><![CDATA[<p>超过几十GB的大文件传输，通过公网会非常的慢几乎2mb&#x2F;s，腾讯云提供了内网互联的功能，内网传输就会很快上100mb&#x2F;s</p><h4 id="创建内网互联"><a href="#创建内网互联" class="headerlink" title="创建内网互联"></a>创建内网互联</h4><ul><li><p><a href="https://console.cloud.tencent.com/vpc/ccn">云联网 - 私有网络 - 控制台 (tencent.com)</a></p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240415141102214.png" alt="image-20240415141102214"></p></li><li><p>获取账号ID和云联网ID</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240415141202604.png" alt="image-20240415141202604"></p></li></ul><h4 id="云服务器关联云联网"><a href="#云服务器关联云联网" class="headerlink" title="云服务器关联云联网"></a>云服务器关联云联网</h4><ul><li><p>点击实例-&gt;网络信息-&gt;所属网络  点击进去</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240415141409631.png" alt="image-20240415141409631"></p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240415141540933.png" alt="image-20240415141540933"></p></li></ul><p>​</p><ul><li><p>输入刚刚获取的账号ID和云联网ID</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240415141546636.png" alt="image-20240415141546636"></p></li><li><p>同意加入云联网</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240415141716611.png" alt="image-20240415141716611"></p></li></ul><p>同意了以后，就可以通过腾讯云提供的内网ip进行内网数据传输了</p><h4 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h4><ul><li><p>借助screen来后台执行传输job，断开ssh也不会停止</p><p>Linux 的 <code>screen</code> 命令是一种非常实用的工具，它可以让用户在单个终端窗口中创建多个会话，并能够在这些会话之间自由切换。<code>screen</code> 还能够让这些会话在用户断开连接后继续运行，这对于远程工作和长时间运行的进程非常有用。</p><p>如果没有安装screen可以使用yum安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install screen<br></code></pre></td></tr></table></figure></li><li><p>创建一个名为restore的回话</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">screen -S restore<br></code></pre></td></tr></table></figure></li><li><p>使用scp从指定服务器拷贝数据到本地</p><p><code>scp</code> 是一个在 Linux 和 Unix 系统中用于在不同主机之间安全地传输文件的命令行工具</p><p>命令结构是：scp [选项] [源文件] [目标位置]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp -r xxx.xx.xx.xx:/home/data /tmp/data<br></code></pre></td></tr></table></figure></li><li><p>输入ctrl + z 暂停</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[1]+ 已停止 scp -r xxx.xx.xx.xx:/home/data /tmp/data<br></code></pre></td></tr></table></figure></li><li><p>查看任务，输入命令：jobs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost /]# jobs<br>[1]+ 已停止 scp -r xxx.xx.xx.xx:/home/data /tmp/data<br></code></pre></td></tr></table></figure></li><li><p>bg将其放入后台，输入命令：bg %1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost /]# bg %1<br>[1]+ scp -r xxx.xx.xx.xx:/home/data /tmp/data<br></code></pre></td></tr></table></figure></li><li><p>查看任务是否在后台</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@localhost /]<span class="hljs-comment"># jobs</span><br>[<span class="hljs-number">1</span>]+ 运行中 scp -r xxx.xx.xx.xx:<span class="hljs-regexp">/home/</span>data <span class="hljs-regexp">/tmp/</span>data<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;超过几十GB的大文件传输，通过公网会非常的慢几乎2mb&amp;#x2F;s，腾讯云提供了内网互联的功能，内网传输就会很快上100mb&amp;#x2F;s&lt;/p&gt;
&lt;h4 id=&quot;创建内网互联&quot;&gt;&lt;a href=&quot;#创建内网互联&quot; class=&quot;headerlink&quot; title=&quot;创建</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Springboot Guava Eventbus简单使用</title>
    <link href="https://cason.work/2024/04/12/Springboot-Guava-Eventbus%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://cason.work/2024/04/12/Springboot-Guava-Eventbus%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2024-04-12T10:16:31.000Z</published>
    <updated>2024-04-12T11:04:52.060Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h4><p>EventBus是 Google Guava 提供的一个事件总线库，用于简化组件之间的通信。它基于发布-订阅模式，允许组件在不直接依赖彼此的情况下进行通信。在一个应用程序中，当某个组件触发了一个事件，所有订阅了该事件的组件都会收到通知并执行相应的操作。</p><p>简单来说，<code>EventBus</code> 可以帮助你解耦代码，使得组件之间更加灵活和独立。</p><h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><ol><li><p><strong>事件（Event）</strong></p><p>事件是系统中某一特定状态的表示，可以是用户操作、系统状态改变等。通常是一个普通的POJO对象，用于封装事件相关的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyEvent</span> &#123;<br>    <span class="hljs-keyword">private</span> String message;<br>    ..........<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>事件发布者（Event Publisher）</strong></p><p>负责发布事件的组件，通常是某个服务、控制器或其他业务逻辑组件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyEventBus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EventBus</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(Object object)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;&#123;&#125; 订阅成功 &quot;</span>, object.getClass().getSimpleName());<br>        <span class="hljs-built_in">super</span>.register(object);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unregister</span><span class="hljs-params">(Object object)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;&#123;&#125; 移除订阅成功 &quot;</span>, object.getClass().getSimpleName());<br>        <span class="hljs-built_in">super</span>.unregister(object);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">post</span><span class="hljs-params">(Object event)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;notify : &#123;&#125;&quot;</span>, JSON.toJSONString(event));<br>        <span class="hljs-built_in">super</span>.post(event);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>事件订阅者（Event Subscriber）</strong></p><p>负责订阅并处理特定类型事件的组件，通常是一个或多个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyEventBusSubscribe</span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MyEventBus eventBus;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">()</span> &#123;<br>        eventBus.register(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Subscribe</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(MyEvent t)</span>&#123;<br>    <span class="hljs-comment">//执行业务</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>使用</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//依赖注入</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> MyEventBus myEventBus;<br><br><span class="hljs-comment">//定义消息</span><br>MyEvent myevent=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyEvent</span>();<br>myevent.setMessage(<span class="hljs-string">&quot;message&quot;</span>);<br><span class="hljs-comment">//发送消息</span><br>myEventBus.post(myevent);<br></code></pre></td></tr></table></figure></li></ol><h4 id="同步消费-EventBus"><a href="#同步消费-EventBus" class="headerlink" title="同步消费-EventBus"></a>同步消费-EventBus</h4><p><code>EventBus</code> 是按照先到先服务（FIFO）的顺序依次处理事件的。也就是说，当一个事件被发布后，<code>EventBus</code> 会依次通知所有订阅者并让它们处理该事件，只有当当前事件的所有订阅者处理完成后，<code>EventBus</code> 才会发布下一个事件。</p><blockquote><p>验证代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.google.common.eventbus.EventBus;<br><span class="hljs-keyword">import</span> com.google.common.eventbus.Subscribe;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">// 定义一个事件类</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageEvent</span> &#123;<br>    <span class="hljs-keyword">private</span> String message;<br>&#125;<br><br><span class="hljs-comment">// 定义一个订阅者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageSubscriber</span> &#123;<br>    <span class="hljs-meta">@Subscribe</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveMessage</span><span class="hljs-params">(MessageEvent event)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Received message: &quot;</span> + event.getMessage());<br>        Thread.sleep((<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">5</span>) + <span class="hljs-number">1</span>) * <span class="hljs-number">1000</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个事件总线</span><br>        <span class="hljs-type">EventBus</span> <span class="hljs-variable">eventBus</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventBus</span>();<br>        <span class="hljs-comment">// 注册订阅者</span><br>        <span class="hljs-type">MessageSubscriber</span> <span class="hljs-variable">subscriber</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageSubscriber</span>();<br>        eventBus.register(subscriber);<br>        <span class="hljs-comment">// 发布事件</span><br>        eventBus.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageEvent</span>(<span class="hljs-string">&quot;Hello, EventBus1!&quot;</span>));<br>        eventBus.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageEvent</span>(<span class="hljs-string">&quot;Hello, EventBus2!&quot;</span>));<br>        eventBus.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageEvent</span>(<span class="hljs-string">&quot;Hello, EventBus3!&quot;</span>));<br>        eventBus.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageEvent</span>(<span class="hljs-string">&quot;Hello, EventBus4!&quot;</span>));<br>        eventBus.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageEvent</span>(<span class="hljs-string">&quot;Hello, EventBus5!&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240412183032548.png" alt="image-20240412183032548"></p><center>（图片展示为即使消费速度快慢不同仍依次消费）</center><h4 id="异步消费-AsyncEventBus"><a href="#异步消费-AsyncEventBus" class="headerlink" title="异步消费-AsyncEventBus"></a>异步消费-AsyncEventBus</h4><p>对于AsyncEventBus.post方法会立即将事件加入到事件队列中，但它并不会等待事件的消费者（订阅者）处理完一条消息再继续发布下一条消息。相反，它会在将事件放入队列后立即返回，允许代码继续执行。</p><p>异步事件处理的机制会确保订阅者在后台线程中处理事件，因此即使在一条事件还未被完全处理完成时，<code>AsyncEventBus</code> 也可以接受和处理其他事件。</p><p>这意味着，在使用 <code>AsyncEventBus</code> 时，即使在短时间内多次调用 <code>post</code> 方法来发布多个事件，它们也会被立即加入到事件队列中，并在后台线程中异步处理。</p><blockquote><p>验证代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.google.common.eventbus.AsyncEventBus;<br><span class="hljs-keyword">import</span> com.google.common.eventbus.Subscribe;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-comment">// 定义一个事件类</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageEvent</span> &#123;<br>    <span class="hljs-keyword">private</span> String message;<br>&#125;<br><br><span class="hljs-comment">// 定义一个订阅者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageSubscriber</span> &#123;<br>    <span class="hljs-meta">@Subscribe</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveMessage</span><span class="hljs-params">(MessageEvent event)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Received message: &quot;</span> + event.getMessage());<br>        Thread.sleep((<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">5</span>) + <span class="hljs-number">1</span>) * <span class="hljs-number">1000</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个异步事件总线</span><br>        <span class="hljs-type">AsyncEventBus</span> <span class="hljs-variable">eventBus</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncEventBus</span>(Executors.newCachedThreadPool());<br>        <span class="hljs-comment">// 注册订阅者</span><br>        <span class="hljs-type">MessageSubscriber</span> <span class="hljs-variable">subscriber</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageSubscriber</span>();<br>        eventBus.register(subscriber);<br>        <span class="hljs-comment">// 发布事件</span><br>        eventBus.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageEvent</span>(<span class="hljs-string">&quot;Hello, EventBus1!&quot;</span>));<br>        eventBus.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageEvent</span>(<span class="hljs-string">&quot;Hello, EventBus2!&quot;</span>));<br>        eventBus.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageEvent</span>(<span class="hljs-string">&quot;Hello, EventBus3!&quot;</span>));<br>        eventBus.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageEvent</span>(<span class="hljs-string">&quot;Hello, EventBus4!&quot;</span>));<br>        eventBus.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageEvent</span>(<span class="hljs-string">&quot;Hello, EventBus5!&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240412185436477.png" alt="image-20240412185436477"></p><center>（图片展示为消费速度快慢不同导致执行结果次序不同）</center>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;简单介绍&quot;&gt;&lt;a href=&quot;#简单介绍&quot; class=&quot;headerlink&quot; title=&quot;简单介绍&quot;&gt;&lt;/a&gt;简单介绍&lt;/h4&gt;&lt;p&gt;EventBus是 Google Guava 提供的一个事件总线库，用于简化组件之间的通信。它基于发布-订阅模式，允许组件在</summary>
      
    
    
    
    <category term="Springboot" scheme="https://cason.work/categories/Springboot/"/>
    
    
    <category term="EventBus" scheme="https://cason.work/tags/EventBus/"/>
    
  </entry>
  
  <entry>
    <title>Hexo giscus配置评论功能</title>
    <link href="https://cason.work/2024/04/07/Hexo-giscus%E9%85%8D%E7%BD%AE%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
    <id>https://cason.work/2024/04/07/Hexo-giscus%E9%85%8D%E7%BD%AE%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</id>
    <published>2024-04-07T09:55:23.000Z</published>
    <updated>2024-04-11T02:27:28.324Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注意：本文以Fluid主题当示例来介绍如何配置评论，其他主题请根据对应用户手册配置</p></blockquote><p>Giscus 允许你将 GitHub Discussions 集成到你的网站上作为评论系统。这样做的好处是评论数据存储在 GitHub 上，不需要第三方服务。</p><p>官方地址：<a href="https://giscus.app/">https://giscus.app/</a></p><ul><li><p>首先先看看自己的theme&#x2F;fluid下是否包含giscus相关的文件，如果fluid版本过旧没有相关文件就要先更新fluid支持giscus</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm update --save hexo-theme-fluid<br></code></pre></td></tr></table></figure></li><li><p>新建github仓库</p></li></ul><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202205081715639.png" alt="image-20220508171452067"></p><p>（我这里已经创建过了，所以显示报错）</p><ul><li>github仓库启用Discussions功能 settings-&gt;General-&gt;Features</li></ul><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240407175728062.png" alt="image-20240407175728062"></p><ul><li>点击链接安装gisacus <a href="https://github.com/apps/giscus">https://github.com/apps/giscus</a></li></ul><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240407175530551.png" alt="image-20240407175530551"></p><ul><li>然后根据官网提示填写对应信息</li></ul><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240407175638999.png" alt="image-20240407175638999"></p><ul><li>然后就能获取到repo-id等相关信息</li></ul><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240407175938792.png" alt="image-20240407175938792"></p><ul><li>修改_config.fluid.yml文件</li></ul><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">giscus</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">repo</span><span class="hljs-punctuation">:</span> <span class="hljs-string">xxxx/xxxx</span><br>  <span class="hljs-attribute">repo-id</span><span class="hljs-punctuation">:</span> <span class="hljs-string">xxxx</span><br>  <span class="hljs-attribute">category</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Announcements</span><br>  <span class="hljs-attribute">category-id</span><span class="hljs-punctuation">:</span> <span class="hljs-string">xxxx</span><br>  <span class="hljs-comment"># Available values: pathname | url | title | og:title</span><br>  <span class="hljs-attribute">mapping</span><span class="hljs-punctuation">:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-comment"># Available values: 0 | 1</span><br>  <span class="hljs-attribute">reactions-enabled</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>   <span class="hljs-comment"># Available values: 0 | 1</span><br>  <span class="hljs-attribute">emit-metadata</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0</span><br>  <span class="hljs-comment"># Available values: light | dark | dark_high_contrast | transparent_dark | preferred-color-scheme</span><br>  <span class="hljs-attribute">theme</span><span class="hljs-punctuation">:</span> <span class="hljs-string">preferred_color_scheme</span><br>  <span class="hljs-comment"># Available values: en | zh-CN</span><br>  <span class="hljs-attribute">lang</span><span class="hljs-punctuation">:</span> <span class="hljs-string">zh-CN</span><br>  <span class="hljs-comment"># Place the comment box above the comments</span><br>  <span class="hljs-attribute">input-position</span><span class="hljs-punctuation">:</span> <span class="hljs-string">top</span><br></code></pre></td></tr></table></figure><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coq">comments:<br>  enable: true<br>  # 指定的插件，需要同时设置对应插件的必要参数<br>  # The specified plugin needs to <span class="hljs-built_in">set</span> the necessary parameters <span class="hljs-built_in">at</span> the same <span class="hljs-built_in">time</span><br>  # <span class="hljs-keyword">Options</span>: utterances | <span class="hljs-type">disqus</span> | <span class="hljs-type">gitalk</span> | <span class="hljs-type">valine</span> | <span class="hljs-type">waline</span> | <span class="hljs-type">changyan</span> | <span class="hljs-type">livere</span> | <span class="hljs-type">remark42</span> | <span class="hljs-type">twikoo</span> | <span class="hljs-type">cusdis</span><br>  type: giscus<br></code></pre></td></tr></table></figure><ul><li>打开自己的网站看到以下评论框就大功告成</li></ul><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240407183951630.png" alt="image-20240407183951630"></p><p>注意：以前用Utterances的可以把github issue 转成discussion</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240407185028973.png" alt="image-20240407185028973"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;注意：本文以Fluid主题当示例来介绍如何配置评论，其他主题请根据对应用户手册配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Giscus 允许你将 GitHub Discussions 集成到你的网站上作为评论系统。这样做的好处是评论数据存储在 </summary>
      
    
    
    
    <category term="Hexo" scheme="https://cason.work/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://cason.work/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Github-Action持续部署Springboot或vue</title>
    <link href="https://cason.work/2024/01/11/%E4%BD%BF%E7%94%A8Github-Action%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Springboot%E6%88%96vue/"/>
    <id>https://cason.work/2024/01/11/%E4%BD%BF%E7%94%A8Github-Action%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2Springboot%E6%88%96vue/</id>
    <published>2024-01-11T02:45:13.000Z</published>
    <updated>2024-04-11T02:27:28.317Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub Actions 是 GitHub 提供的一项持续集成 (CI) 和持续部署 (CD) 服务。它允许你在代码仓库中定义和运行自动化的工作流程，以响应存储库中的事件或调度。GitHub Actions 可以用于构建、测试、打包和部署项目，也可以执行其他自动化任务。</p><blockquote><p>详细github action相关信息请看最底部</p></blockquote><p><strong>第一步需要先配置secrets，保证我们的服务器信息不暴露</strong></p><p>GitHub Actions 中的 secrets 和 variables 都是用于存储和访问敏感信息或配置的机制</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20240111105350117.png" alt="image-20240111105350117"></p><p>因为我的服务器用的宝塔面板环境，加上构建出来的包和文件并不是很大，所以使用的方式是先在github action的环境构建打包，然后将包发送到目标服务器。你也可以在github action里让目标服务器执行命令去做git，构建，部署，启动等等相关的</p><h2 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Java</span> <span class="hljs-string">CI</span> <span class="hljs-string">with</span> <span class="hljs-string">Maven</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [ <span class="hljs-string">&quot;master&quot;</span> ]<br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">up</span> <span class="hljs-string">JDK</span> <span class="hljs-number">17</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-java@v3</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">java-version:</span> <span class="hljs-string">&#x27;17&#x27;</span><br>        <span class="hljs-attr">distribution:</span> <span class="hljs-string">&#x27;temurin&#x27;</span><br>        <span class="hljs-attr">cache:</span> <span class="hljs-string">maven</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">with</span> <span class="hljs-string">Maven</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">mvn</span> <span class="hljs-string">-B</span> <span class="hljs-string">package</span> <span class="hljs-string">--file</span> <span class="hljs-string">pom.xml</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">copy</span> <span class="hljs-string">jar</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">cross-the-world/ssh-scp-ssh-pipelines@latest</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.HOST</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">user:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.USERNAME</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">pass:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.PASSWORD</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>        <span class="hljs-attr">scp:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          ./target/springboot.jar =&gt; /home/</span><br><span class="hljs-string"></span>        <span class="hljs-attr">last_ssh:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          JAR_NAME=&quot;springboot.jar&quot;; PID=$(ps aux | grep &quot;$JAR_NAME&quot; | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;); if [ -n &quot;$PID&quot; ]; then kill -9 $PID &amp;&amp; echo &quot;进程 $PID 已被杀死&quot;; else echo &quot;未找到与 $JAR_NAME 相关的进程&quot;; fi</span><br><span class="hljs-string">          /usr/bin/java -jar -Xmx1024M -Xms256M  /home/springboot.jar &amp;</span><br></code></pre></td></tr></table></figure><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">Server</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [ <span class="hljs-string">&quot;master&quot;</span> ]<br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span> <br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-number">16</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">project</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <span class="hljs-string">generate</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">zip</span> <span class="hljs-string">dist</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">zip</span> <span class="hljs-string">-r</span> <span class="hljs-string">dist.zip</span> <span class="hljs-string">dist/</span><br><br>        <span class="hljs-comment"># 部署到服务器</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">🚀</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">cross-the-world/ssh-scp-ssh-pipelines@latest</span><br>        <span class="hljs-attr">with:</span><br>            <span class="hljs-attr">host:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.HOST</span> <span class="hljs-string">&#125;&#125;</span><br>            <span class="hljs-attr">user:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.USERNAME</span> <span class="hljs-string">&#125;&#125;</span><br>            <span class="hljs-attr">pass:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.PASSWORD</span> <span class="hljs-string">&#125;&#125;</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>            <span class="hljs-attr">scp:</span> <span class="hljs-string">|</span><br><span class="hljs-string">                &#x27;./dist.zip&#x27; =&gt; /home</span><br><span class="hljs-string"></span>            <span class="hljs-attr">last_ssh:</span> <span class="hljs-string">|</span><br><span class="hljs-string">                cd /home/</span><br><span class="hljs-string">                rm -rf dist/ || true</span><br><span class="hljs-string">                unzip dist.zip</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h2 id="常见的-GitHub-Actions-YAML-语法和关键概念"><a href="#常见的-GitHub-Actions-YAML-语法和关键概念" class="headerlink" title="常见的 GitHub Actions YAML 语法和关键概念"></a>常见的 GitHub Actions YAML 语法和关键概念</h2><p>GitHub Actions 使用 YAML 文件来定义工作流程。以下是一些常见的 GitHub Actions YAML 语法和关键概念：</p><h3 id="工作流程（Workflow）的定义："><a href="#工作流程（Workflow）的定义：" class="headerlink" title="工作流程（Workflow）的定义："></a>工作流程（Workflow）的定义：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">My</span> <span class="hljs-string">Workflow</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">my_job:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">Repository</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>      <span class="hljs-comment"># 其他步骤...</span><br></code></pre></td></tr></table></figure><ul><li><code>name</code>: 工作流程的名称。</li><li><code>on</code>: 触发工作流程的事件，例如 <code>push</code> 到特定分支。</li><li><code>jobs</code>: 包含一个或多个任务的部分。</li></ul><h3 id="任务（Job）的定义："><a href="#任务（Job）的定义：" class="headerlink" title="任务（Job）的定义："></a><strong>任务（Job）的定义：</strong></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">my_job:</span><br>  <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>  <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Step</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Hello, World!&quot;</span><br>    <span class="hljs-comment"># 其他步骤...</span><br></code></pre></td></tr></table></figure><ul><li><code>runs-on</code>: 指定任务运行的操作系统和环境。</li><li><code>steps</code>: 包含一个或多个步骤的列表。</li></ul><h3 id="步骤（Steps）的定义："><a href="#步骤（Steps）的定义：" class="headerlink" title="步骤（Steps）的定义："></a><strong>步骤（Steps）的定义：</strong></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">steps:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Step</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Hello, World!&quot;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Step</span> <span class="hljs-number">2</span><br>    <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v3</span><br>    <span class="hljs-attr">with:</span><br>      <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;14&#x27;</span><br>  <span class="hljs-comment"># 其他步骤...</span><br></code></pre></td></tr></table></figure><ul><li><code>name</code>: 步骤的名称。</li><li><code>run</code>: 执行的命令或脚本。</li><li><code>uses</code>: 使用的动作（可以是内置动作或自定义动作）。</li><li><code>with</code>: 传递给动作的参数。</li></ul><h3 id="触发器（Trigger）的定义："><a href="#触发器（Trigger）的定义：" class="headerlink" title="触发器（Trigger）的定义："></a><strong>触发器（Trigger）的定义：</strong></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br>  <span class="hljs-attr">pull_request:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">feature/*</span><br></code></pre></td></tr></table></figure><ul><li><code>on</code>: 触发工作流程的事件。</li><li><code>push</code>: 代码推送事件。</li><li><code>pull_request</code>: 合并请求事件。</li></ul><h3 id="环境变量（Environment-Variables）的定义："><a href="#环境变量（Environment-Variables）的定义：" class="headerlink" title="环境变量（Environment Variables）的定义："></a><strong>环境变量（Environment Variables）的定义：</strong></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">my_job:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">env:</span><br>      <span class="hljs-attr">MY_VARIABLE:</span> <span class="hljs-string">my_value</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-comment"># 步骤...</span><br></code></pre></td></tr></table></figure><ul><li><code>env</code>: 定义任务运行时的环境变量。</li></ul><h2 id="Secrets-和-Variables"><a href="#Secrets-和-Variables" class="headerlink" title="Secrets 和 Variables"></a>Secrets 和 Variables</h2><h3 id="使用-Secrets："><a href="#使用-Secrets：" class="headerlink" title="使用 Secrets："></a>使用 Secrets：</h3><p>GitHub Actions 的 secrets 是用于存储敏感信息，例如 API 密钥、访问令牌等。这些 secrets 可以被工作流程中的步骤引用，但它们是加密的，并且只有在运行工作流程时才会暴露给步骤。</p><ol><li><p><strong>在 GitHub 存储库中创建 secret：</strong></p><ul><li>转到 GitHub 存储库的页面。</li><li>在存储库顶部导航栏中，点击 “Settings”。</li><li>在左侧边栏中，选择 “Secrets”。</li><li>点击 “New repository secret”，然后输入 secret 名称和值。</li></ul></li><li><p><strong>在工作流程中使用 secret：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">my_job:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">secret</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.MY_SECRET</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure></li></ol><p>这里 <code>MY_SECRET</code> 是你创建的 secret 的名称，可以在步骤中使用 <code>$&#123;&#123; secrets.MY_SECRET &#125;&#125;</code> 引用它。</p><h3 id="使用-Variables："><a href="#使用-Variables：" class="headerlink" title="使用 Variables："></a>使用 Variables：</h3><p>GitHub Actions 的 variables 是由 GitHub 提供的一组默认环境变量，同时你也可以定义自己的环境变量。这些变量可以在工作流程的任何步骤中使用。</p><ol><li><p><strong>在工作流程中使用 GitHub 提供的 variables：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">my_job:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">GitHub-provided</span> <span class="hljs-string">variable</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.event_name</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>这里的 <code>github.event_name</code> 是 GitHub 提供的一个默认变量，表示触发工作流程的事件的名称。</p></li><li><p><strong>在工作流程中定义自己的 variables：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">my_job:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">env:</span><br>      <span class="hljs-attr">MY_VARIABLE:</span> <span class="hljs-string">my_value</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">custom</span> <span class="hljs-string">variable</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">$MY_VARIABLE</span><br></code></pre></td></tr></table></figure></li></ol><p>在 <code>env</code> 部分定义自己的环境变量，然后在步骤中使用 <code>$MY_VARIABLE</code> 引用它。</p><p>注意：GitHub Actions 中的环境变量（包括 secrets 和 variables）在步骤中的引用方式使用 <code>$&#123;&#123; ... &#125;&#125;</code> 语法。此外，secrets 只能在工作流程的同一存储库中使用，而 variables 则可以在不同存储库的工作流程中共享。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;GitHub Actions 是 GitHub 提供的一项持续集成 (CI) 和持续部署 (CD) 服务。它允许你在代码仓库中定义和运行自动化的工作流程，以响应存储库中的事件或调度。GitHub Actions 可以用于构建、测试、打包和部署项目，也可以执行其他自动化任务。</summary>
      
    
    
    
    
    <category term="github action" scheme="https://cason.work/tags/github-action/"/>
    
    <category term="springboot" scheme="https://cason.work/tags/springboot/"/>
    
    <category term="vue" scheme="https://cason.work/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Easypoi-大数据量导出</title>
    <link href="https://cason.work/2024/01/09/Easypoi-%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%87%8F%E5%AF%BC%E5%87%BA/"/>
    <id>https://cason.work/2024/01/09/Easypoi-%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%87%8F%E5%AF%BC%E5%87%BA/</id>
    <published>2024-01-09T08:52:27.000Z</published>
    <updated>2024-01-09T09:15:10.388Z</updated>
    
    <content type="html"><![CDATA[<p>EasyExcel 在处理 Excel 文件时，需要占用一定的内存。如果导出的数据量过大，可能导致内存占用过高，从而引发 CPU 过高的问题。并发访问导出接口也会导致性能问题，所以尽量在数据量比较大的导出接口添加锁控制。</p><blockquote><p>以下是虚化业务后的代码，记录一下遇到的问题解决方案</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 导出大数据量Excel文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response HttpServletResponse对象，用于设置响应头和输出流</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> requestForm 包含查询参数的表单对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ParseException 当日期解析发生错误时抛出异常</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException 当输入或输出操作发生错误时抛出异常</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exportBigExcelist</span><span class="hljs-params">(HttpServletResponse response, RequestForm requestForm)</span> <span class="hljs-keyword">throws</span> ParseException, IOException &#123;<br>    <span class="hljs-comment">// 设置Excel导出参数，包括标题和sheet名称</span><br>    <span class="hljs-type">ExportParams</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExportParams</span>(<span class="hljs-string">&quot;标题&quot;</span>, <span class="hljs-string">&quot;sheet名称&quot;</span>);<br><br>    <span class="hljs-comment">// 使用EasyExcel工具类导出大数据Excel文件</span><br>    <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> ExcelExportUtil.exportBigExcel(params, ExcelDto.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IExcelExportServer</span>() &#123;<br>        <span class="hljs-meta">@SneakyThrows</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">selectListForExcelExport</span><span class="hljs-params">(Object queryParams, <span class="hljs-type">int</span> page)</span> &#123;<br>            <span class="hljs-comment">// 强制转换查询参数为RequestForm对象</span><br>            <span class="hljs-type">RequestForm</span> <span class="hljs-variable">tempForm</span> <span class="hljs-operator">=</span> (RequestForm) queryParams;<br>            <br>            <span class="hljs-comment">// 设置分页参数</span><br>            tempForm.setPage(page);<br>            tempForm.setPageSize(<span class="hljs-number">10000</span>);<br>            <br>            <span class="hljs-comment">// 调用业务服务进行分页查询逻辑</span><br>            List&lt;ExcelDto&gt; list = service.selectlist(tempForm);<br>            <br>            <span class="hljs-comment">// 将查询结果转化为List&lt;Object&gt;</span><br>            List&lt;Object&gt; objects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(list);<br>            <br>            <span class="hljs-comment">// 如果查询结果为空，则返回null</span><br>            <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <br>            <span class="hljs-keyword">return</span> objects;<br>        &#125;<br>    &#125;, requestForm);<br><br>    <span class="hljs-comment">// 设置响应头，指定导出文件类型为Excel</span><br>    response.setHeader(<span class="hljs-string">&quot;content-Type&quot;</span>, <span class="hljs-string">&quot;application/vnd.ms-excel&quot;</span>);<br>    <span class="hljs-comment">// 设置响应头，指定导出文件的名称，并对文件名进行UTF-8编码</span><br>    response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(<span class="hljs-string">&quot;filename.xls&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>    <br>    <span class="hljs-comment">// 将生成的Excel文件写入到响应输出流</span><br>    workbook.write(response.getOutputStream());<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;EasyExcel 在处理 Excel 文件时，需要占用一定的内存。如果导出的数据量过大，可能导致内存占用过高，从而引发 CPU 过高的问题。并发访问导出接口也会导致性能问题，所以尽量在数据量比较大的导出接口添加锁控制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下是虚化业</summary>
      
    
    
    
    <category term="Springboot" scheme="https://cason.work/categories/Springboot/"/>
    
    
    <category term="Easypoi" scheme="https://cason.work/tags/Easypoi/"/>
    
    <category term="Excel" scheme="https://cason.work/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>Threadlocal-内存泄露问题</title>
    <link href="https://cason.work/2024/01/03/Threadlocal-%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E9%97%AE%E9%A2%98/"/>
    <id>https://cason.work/2024/01/03/Threadlocal-%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E9%97%AE%E9%A2%98/</id>
    <published>2024-01-03T06:57:14.000Z</published>
    <updated>2024-01-03T07:13:45.586Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://cason.work/2022/06/16/Threadlocal%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E5%92%8C%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">Threadlocal的简单理解和部分源码分析 - Blog|CasonMo</a></p></blockquote><p>在ThreadLocalMap中，用Entry来保存K-V结构数据的。Entry的构造方法已经限定Entry中key只能是ThreadLocal对象。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WeakReference</span>&lt;ThreadLocal&gt; &#123;<br>    <span class="hljs-comment">/** The value associated with this ThreadLocal. */</span><br>    Object value;<br><br>    Entry(ThreadLocal k, Object v) &#123;<br>        <span class="hljs-built_in">super</span>(k);<br>        value = v;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Entry继承自WeakReference（弱引用，生命周期只能存活到下次GC前），但只有Key是弱引用类型的，Value并非弱引用。（问题马上就来了）</p><blockquote><h4 id="四种引用类型"><a href="#四种引用类型" class="headerlink" title="四种引用类型"></a>四种引用类型</h4><ol><li>强引用（StrongReference）</li></ol><p>  类似Object obj &#x3D; new Object()这类似的引用，强引用在程序代码中普遍存在，只要强引用在，垃圾搜集器永远不会搜集被引用的对象。也就是说，<strong>宁愿出现内存溢出（OutOfMemoryError），也不会回收这些对象</strong></p><ol start="2"><li>软引用（SoftReference）</li></ol><p>  在Java中用java.lang.ref.SoftReference类来表示。<strong>对于软引用关联着的对象，只有在内存不足的时候JVM才会回收该对象</strong></p><ol start="3"><li>弱引用（WeakReference）</li></ol><p>  弱引用也是用来描述非必需对象的，用java.lang.ref.WeakReference类来表示，<strong>当JVM进行垃圾回收时，无论内存是否充足，都会回收被弱引用关联的对象。</strong></p><ol start="4"><li>虚引用 （PhantomReference）</li></ol><p>  java.lang.ref.PhantomReference类表示。如果一个对象与虚引用关联，则跟没有引用与之关联一样，<strong>在任何时候都可能被垃圾回收器回收</strong>。</p><p>  虚引用与软引用和弱引用的区别：<strong>虚引用必须和引用队列联合使用。</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-type">ReferenceQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceQueue</span> ();<br><span class="hljs-type">PhantomReference</span> <span class="hljs-variable">pr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PhantomReference</span> (object, queue); <br></code></pre></td></tr></table></figure></blockquote><p>由于ThreadLocalMap的key是弱引用，而Value是强引用。这就导致了一个问题，ThreadLocal在没有外部对象强引用时，发生GC时弱引用Key会被回收，而Value不会回收。</p><p>当线程没有结束，但是ThreadLocal已经被回收，则可能导致线程中存在<code>ThreadLocalMap&lt;null, Object&gt;</code>的键值对，造成内存泄露。（ThreadLocal被回收，ThreadLocal关联的线程共享变量还存在）。</p><h2 id="如何避免泄漏"><a href="#如何避免泄漏" class="headerlink" title="如何避免泄漏"></a>如何避免泄漏</h2><p>为了防止此类情况的出现，我们有两种手段。</p><ul><li><p>使用完线程共享变量后，显示调用<code>ThreadLocalMap.remove</code>方法清除线程共享变量；</p><p>既然Key是弱引用，那么我们要做的事，就是在调用ThreadLocal的<code>get()</code>、<code>set()</code>方法时完成后再调用remove方法，将Entry节点和Map的引用关系移除，这样整个Entry对象在GC Roots分析后就变成不可达了，下次GC的时候就可以被回收。</p></li><li><p>JDK建议ThreadLocal定义为<code>private static</code>，这样ThreadLocal的弱引用问题则不存在了。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://cason.work/2022/06/16/Threadlocal%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E5%92%8C%E9%83%A8%E5%88%86%E</summary>
      
    
    
    
    <category term="并发编程" scheme="https://cason.work/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="ThreadLocal" scheme="https://cason.work/tags/ThreadLocal/"/>
    
  </entry>
  
  <entry>
    <title>Mybatisplus-动态获取sql字符串</title>
    <link href="https://cason.work/2023/12/11/Mybatisplus-%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96sql%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://cason.work/2023/12/11/Mybatisplus-%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96sql%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2023-12-11T08:35:41.000Z</published>
    <updated>2023-12-11T08:57:27.692Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录贴</p></blockquote><p>借助mybatisplus构建动态 SQL 查询语句的功能，来动态构建sql来做presto查询，这样就不用在代码里写sql了</p><p><code>getBoundSql</code> 是 MyBatis 中 <code>org.apache.ibatis.mapping.BoundSql</code> 接口的方法，用于获取一个表示 SQL 语句和相关参数映射的对象。<code>BoundSql</code> 实例包含了预编译的 SQL 语句以及参数映射信息，可以用于执行数据库操作。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.ibatis.mapping.BoundSql;<br><span class="hljs-keyword">import</span> org.apache.ibatis.mapping.MappedStatement;<br><span class="hljs-keyword">import</span> org.apache.ibatis.mapping.ParameterMapping;<br><span class="hljs-keyword">import</span> org.apache.ibatis.reflection.MetaObject;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.Configuration;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicSqlUtils</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SqlSession sqlSession;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSql</span><span class="hljs-params">(Class clz,String method, Object obj)</span> &#123;<br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> sqlSession.getConfiguration();<br>        <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> configuration.getMappedStatement(clz.getName() + <span class="hljs-string">&quot;.&quot;</span> + method);<br>        <span class="hljs-type">BoundSql</span> <span class="hljs-variable">boundSql</span> <span class="hljs-operator">=</span> ms.getBoundSql(obj);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">parsedSql</span> <span class="hljs-operator">=</span> boundSql.getSql();<br>      <span class="hljs-comment">// #&#123;&#125;会被替换成? ,$&#123;&#125;才会被替换成对应的值</span><br>        <span class="hljs-comment">// 获取参数映射</span><br>        List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();<br>        <span class="hljs-comment">// 获取参数对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parameterObject</span> <span class="hljs-operator">=</span> boundSql.getParameterObject();<br>        <span class="hljs-comment">// 打印参数占位符和对应的参数值</span><br>        <span class="hljs-keyword">for</span> (ParameterMapping parameterMapping : parameterMappings) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">property</span> <span class="hljs-operator">=</span> parameterMapping.getProperty();<br>            <span class="hljs-comment">// 获取参数值</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">if</span> (boundSql.hasAdditionalParameter(property)) &#123;<br>                <span class="hljs-comment">// 对于额外的参数，直接获取</span><br>                value = boundSql.getAdditionalParameter(property);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parameterObject != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 对于参数对象，通过反射获取属性值</span><br>                <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaObject</span> <span class="hljs-operator">=</span> configuration.newMetaObject(parameterObject);<br>                value = metaObject.getValue(property);<br>            &#125;<br>            <span class="hljs-comment">// 替换 SQL 语句中的占位符</span><br>            parsedSql = parsedSql.replaceFirst(<span class="hljs-string">&quot;\\?&quot;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>+value.toString()+<span class="hljs-string">&quot;&#x27;&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> parsedSql;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demoList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.*.dto.DemoDTO&quot;</span>&gt;</span><br>  select * from t demo where 1=1<br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;form.status != null&quot;</span>&gt;</span><br>     and  t.status = #&#123;form.status&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DemoMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;DemoEntity&gt; &#123;<br>List&lt;DemoDTO&gt; <span class="hljs-title function_">demoList</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;form&quot;)</span> DemoForm form)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用</p><p>值得注意的是，如果使用了@Param(“form”)给方法参数起别名，那么就要使用Map来包装一下map.put(“form”,原来的form对象)，否则获取不到form</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>Map&lt;String, Object&gt; map2 = JSON.parseObject(JSON.toJSONString(demoForm), <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;Map&lt;String, Object&gt;&gt;() &#123;&#125;);<br>map.put(<span class="hljs-string">&quot;form&quot;</span>, map2);<br>String sql=dynamicSqlUtils.getSql(DemoMapper.class, <span class="hljs-string">&quot;demoList&quot;</span>, map);<br><span class="hljs-comment">//presto.query(sql) 或者 hive.query(sql)</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;记录贴&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;借助mybatisplus构建动态 SQL 查询语句的功能，来动态构建sql来做presto查询，这样就不用在代码里写sql了&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getBoundSql&lt;/code&gt; 是 M</summary>
      
    
    
    
    <category term="Springboot" scheme="https://cason.work/categories/Springboot/"/>
    
    
    <category term="Mybatis" scheme="https://cason.work/tags/Mybatis/"/>
    
    <category term="presto" scheme="https://cason.work/tags/presto/"/>
    
    <category term="SQL" scheme="https://cason.work/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>简单实现分流功能</title>
    <link href="https://cason.work/2023/12/11/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%88%86%E6%B5%81%E5%8A%9F%E8%83%BD/"/>
    <id>https://cason.work/2023/12/11/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%88%86%E6%B5%81%E5%8A%9F%E8%83%BD/</id>
    <published>2023-12-11T08:06:02.000Z</published>
    <updated>2024-04-11T02:27:28.319Z</updated>
    
    <content type="html"><![CDATA[<p>逻辑比较简单就是对字符串一顿加解密操作然后hashcode然后取模100，然后看取模结果落在哪个组的区间</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;<br><span class="hljs-keyword">import</span> org.springframework.util.DigestUtils;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.math.RoundingMode;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Percent</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 流量切分算法（随机）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rid       rid</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> groupMap 对照组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 分组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">choose</span><span class="hljs-params">(String rid, Map&lt;String, Double&gt; groupMap)</span> &#123;<br>        <span class="hljs-keyword">if</span> (groupMap == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        List&lt;String&gt; groups = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(groupMap.keySet());<br>        List&lt;Double&gt; rates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(groupMap.values());<br>        <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(groupMap) || CollectionUtils.isEmpty(rates)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">digest</span> <span class="hljs-operator">=</span> DigestUtils.md5DigestAsHex(rid.getBytes());<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hashCode</span> <span class="hljs-operator">=</span> digest.hashCode();<br>        <span class="hljs-comment">//百分比</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> Math.abs(hashCode) % <span class="hljs-number">100</span>;<br>        <span class="hljs-comment">//murmur3_32算法比较好，分布很均匀</span><br>        <span class="hljs-comment">//int random = Math.abs(Hashing.murmur3_32().hashString(rid, Charset.forName(&quot;utf-8&quot;)).asInt())%100;</span><br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; rates.size(); i++) &#123;<br>            end = end + rates.get(i);<br>            <span class="hljs-keyword">if</span> (start &lt;= random &amp;&amp; random &lt; end) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> groups.get(i);<br>                <span class="hljs-keyword">for</span> (String tempGroup : groups) &#123;<br>                    <span class="hljs-keyword">if</span> (group.equals(tempGroup)) &#123;<br>                        log.info(<span class="hljs-string">&quot;choose [rid]: &#123;&#125; [group]: &#123;&#125; random ;&#123;&#125;&quot;</span>, rid, group, random);<br>                        <span class="hljs-keyword">return</span> group;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            start = start + rates.get(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>写个main方法测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Map&lt;String, Double&gt; groups = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    groups.put(<span class="hljs-string">&quot;g1&quot;</span>, <span class="hljs-number">15d</span>);<br>    groups.put(<span class="hljs-string">&quot;g2&quot;</span>, <span class="hljs-number">25d</span>);<br>    groups.put(<span class="hljs-string">&quot;g3&quot;</span>, <span class="hljs-number">30d</span>);<br>    groups.put(<span class="hljs-string">&quot;g4&quot;</span>, <span class="hljs-number">30d</span>);<br>    Map&lt;String, Integer&gt; groupCountMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> <span class="hljs-number">100000</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; total; i++) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">group_super_id</span> <span class="hljs-operator">=</span> choose(UUID.randomUUID().toString(), groups);<br>        <span class="hljs-keyword">if</span> (!groupCountMap.containsKey(group_super_id)) &#123;<br>            groupCountMap.put(group_super_id, <span class="hljs-number">1</span>);<br>        &#125;<br>        groupCountMap.put(group_super_id, groupCountMap.get(group_super_id) + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : groupCountMap.entrySet()) &#123;<br>        log.info(<span class="hljs-string">&quot;group : &#123;&#125; count : &#123;&#125; percent :&#123;&#125;&quot;</span>, entry.getKey(), entry.getValue(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(entry.getValue()).divide(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(total), <span class="hljs-number">4</span>, RoundingMode.UP).multiply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">100</span>)) + <span class="hljs-string">&quot;%&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果逼近预设值</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20231211160804894.png" alt="image-20231211160804894"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;逻辑比较简单就是对字符串一顿加解密操作然后hashcode然后取模100，然后看取模结果落在哪个组的区间&lt;/p&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class</summary>
      
    
    
    
    <category term="Springboot" scheme="https://cason.work/categories/Springboot/"/>
    
    
    <category term="Java" scheme="https://cason.work/tags/Java/"/>
    
    <category term="算法" scheme="https://cason.work/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="分流" scheme="https://cason.work/tags/%E5%88%86%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-生成站点地图（sitemap）</title>
    <link href="https://cason.work/2023/12/08/Hexo-%E7%94%9F%E6%88%90%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE%EF%BC%88sitemap%EF%BC%89/"/>
    <id>https://cason.work/2023/12/08/Hexo-%E7%94%9F%E6%88%90%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE%EF%BC%88sitemap%EF%BC%89/</id>
    <published>2023-12-08T09:36:00.000Z</published>
    <updated>2024-04-11T02:27:28.307Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SiteMap是什么"><a href="#SiteMap是什么" class="headerlink" title="SiteMap是什么"></a>SiteMap是什么</h3><p>Sitemap 是一种列举了网站中所有页面的 XML 文件。它可以被搜索引擎（如 Google、Bing）用来更有效地抓取网站，了解网站的结构。Sitemap 文件提供了网站上每个页面的链接以及有关页面最后修改时间、更新频率和相对重要性的附加信息，这有助于搜索引擎确定哪些页面应该优先考虑以及多久抓取一次这些页面。</p><p>对于大型网站、具有许多动态页面的网站或新网站，Sitemap 尤其重要，因为它能确保搜索引擎能够发现并索引网站上的所有重要页面。即便对于小型网站，拥有 Sitemap 也有助于提高SEO（搜索引擎优化）的效果。</p><p>站点地图有两种常见类型：</p><ol><li><p>XML Sitemap：<br>这是给搜索引擎的，规范定义比较严格，它使用 XML 语言编写，一般会放在网站的根目录下，并可以通过 &#x2F;sitemap.xml 访问。这样做可以使搜索引擎更容易找到和抓取所有的页面。</p></li><li><p>HTML Sitemap：<br>这类 Sitemap 是给用户的，通常是一个简单的 HTML 页面，包含了网站上所有或是最重要的页面的链接。这可以帮助用户快速导航到他们想要找的页面，并提高网站的用户体验。</p></li></ol><h3 id="Hexo如何生成Sitemap"><a href="#Hexo如何生成Sitemap" class="headerlink" title="Hexo如何生成Sitemap"></a>Hexo如何生成Sitemap</h3><ul><li><p>Google 版本</p><p><code>npm install hexo-generator-sitemap --save</code></p></li><li><p>Baidu 版本</p><p><code>npm install hexo-generator-baidu-sitemap --save</code></p></li><li><p>在<code>_config.yml</code>中找到<code>url</code>，改成你自己的域名，影响生成的sitemap下的每一条链接</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">&lt;这里&gt;</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></code></pre></td></tr></table></figure></li><li><p>打包自动在<code>public</code>下生成<code>sitemap.xml</code>和<code>baidusitemap.xml</code></p><p><code>hexo g -d</code></p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20231208174125354.png" alt="image-20231208174125354"></p><p>浏览器访问<code>https://&lt;域名&gt;/sitemap.xml</code>和<code>https://&lt;域名&gt;/baidusitemap.xml</code>即可看到内容<img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20231208174254230.png" alt="image-20231208174254230"></p></li></ul><h3 id="提交站点到百度"><a href="#提交站点到百度" class="headerlink" title="提交站点到百度"></a>提交站点到百度</h3><ul><li><p>到百度资源平台提交站点</p><blockquote><p><a href="https://ziyuan.baidu.com/site/index#/">站点管理_站长工具_百度搜索资源平台 (baidu.com)</a></p></blockquote><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20231208174539329.png" alt="image-20231208174539329"></p></li><li><p>提交Sitemap<br><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20231208174443927.png" alt="image-20231208174443927"></p></li></ul><h3 id="提交站点到谷歌"><a href="#提交站点到谷歌" class="headerlink" title="提交站点到谷歌"></a>提交站点到谷歌</h3><ul><li><p>到google search console 提交站点</p><blockquote><p><a href="https://search.google.com/search-console">https://search.google.com/search-console</a></p></blockquote><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20231208174713820.png" alt="image-20231208174713820"></p></li><li><p>提交站点地图Sitemap</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20231208174929691.png" alt="image-20231208174929691"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;SiteMap是什么&quot;&gt;&lt;a href=&quot;#SiteMap是什么&quot; class=&quot;headerlink&quot; title=&quot;SiteMap是什么&quot;&gt;&lt;/a&gt;SiteMap是什么&lt;/h3&gt;&lt;p&gt;Sitemap 是一种列举了网站中所有页面的 XML 文件。它可以被搜索引擎</summary>
      
    
    
    
    <category term="Hexo" scheme="https://cason.work/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://cason.work/tags/Hexo/"/>
    
    <category term="Seo" scheme="https://cason.work/tags/Seo/"/>
    
    <category term="Sitemap" scheme="https://cason.work/tags/Sitemap/"/>
    
  </entry>
  
  <entry>
    <title>Easypoi-导出excel单元格添加下拉列表</title>
    <link href="https://cason.work/2023/12/08/Easypoi-%E5%AF%BC%E5%87%BAexcel%E5%8D%95%E5%85%83%E6%A0%BC%E6%B7%BB%E5%8A%A0%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8/"/>
    <id>https://cason.work/2023/12/08/Easypoi-%E5%AF%BC%E5%87%BAexcel%E5%8D%95%E5%85%83%E6%A0%BC%E6%B7%BB%E5%8A%A0%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8/</id>
    <published>2023-12-08T08:09:38.000Z</published>
    <updated>2024-04-11T02:27:28.313Z</updated>
    
    <content type="html"><![CDATA[<p>我们在使用excel进行批量导入的时候，通常会提供导入模板excel来给用户来规范用户的输入，其中就会用到下拉选项来约束这一种方式</p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20231208165732976.png" alt="image-20231208165732976" style="zoom:50%;" /><h3 id="方法一：-Excel"><a href="#方法一：-Excel" class="headerlink" title="方法一：@Excel"></a>方法一：@Excel</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Excel(name = &quot;状态&quot;, width = 25, replace = &#123;&quot;待审_1&quot;, &quot;通过_2&quot;, &quot;驳回_3&quot;&#125;,addressList = true,orderNum = &quot;25&quot;)</span><br><span class="hljs-keyword">private</span> Integer status;<br></code></pre></td></tr></table></figure><p>主要是replace和addressList这两个属性配置。</p><p><code>replace</code>：替换字段内容，通常用于状态字段的显示（例如：”男_1,女_2”）。</p><p><code>addressList</code>：是否生成下拉的选项。</p><blockquote><p><code>@Excel</code> 是 easypoi 中用于 Excel 导入导出的注解，可以用于实体类的字段上，用以定义该字段数据与 Excel 文件中的列的对应关系以及进行导入导出时的各种设置。以下是 <code>@Excel</code> 注解的一些主要属性和它们的功能：</p><ol><li><code>name</code>：设置导出时在表格中的显示名称。</li><li><code>width</code>：列宽度，单位为字符。</li><li><code>height</code>：行高度，单位为字符。</li><li><code>orderNum</code>：导出排序顺序，数值小的先导出。</li><li><code>needMerge</code>：是否需要合并单元格。</li><li><code>mergeVertical</code>：纵向合并内容相同的单元格。</li><li><code>mergeRely</code>：合并依赖于某些列的情况。</li><li><code>replace</code>：替换字段内容，通常用于状态字段的显示（例如：”男_1,女_2”）。</li><li><code>suffix</code>：文本后缀，如%、元、个。</li><li><code>isImportField</code>：是否为导入字段，导入模板时是否需要显示。</li><li><code>exportType</code>：导出类型，指导出文本还是导出图片等类型。</li><li><code>format</code>：时间格式化，比如：”yyyy-MM-dd”。</li><li><code>databaseFormat</code>：数据库格式，通常配合 <code>format</code> 使用。</li><li><code>dict</code>：数据字典标识。</li><li><code>savePath</code>：图片等文件保存路径。</li><li><code>type</code>：字段类型（文本、图片、文件）。</li><li><code>imageType</code>：图片类型，控制导出图片的方式。</li><li><code>suffix</code>：文本类型的字段后缀标记。</li><li><code>statistics</code>：是否统计当前列，生成统计行。</li></ol></blockquote><h3 id="方法二：DataValidation"><a href="#方法二：DataValidation" class="headerlink" title="方法二：DataValidation"></a>方法二：DataValidation</h3><p>由于有的时候我们的下拉列表选项来自数据库，可以使用dict属性搭配IExcelDictHandler，也可以直接在workbook上操作，把列表约束作用到指定单元格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * firstRow 开始行号 根据此项目，默认为2(下标0开始)</span><br><span class="hljs-comment">     * lastRow  根据此项目，默认为最大65535</span><br><span class="hljs-comment">     * firstCol 区域中第一个单元格的列号 (下标0开始)</span><br><span class="hljs-comment">     * lastCol 区域中最后一个单元格的列号</span><br><span class="hljs-comment">     * strings 下拉内容</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDropdown</span><span class="hljs-params">(Workbook workbook,<span class="hljs-type">int</span> firstRow, <span class="hljs-type">int</span> col, String[] strings )</span>&#123;<br>       <span class="hljs-comment">//对工作簿中第一个工作表进行操作</span><br>        <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.getSheetAt(<span class="hljs-number">0</span>);<br>       <span class="hljs-comment">// 创建`CellRangeAddressList`对象，该对象指定下拉列表的适用区域：</span><br>      <span class="hljs-comment">//该区域从`firstRow`起始行（包含）到第65535行（包含），在`col`列上。（由于我们作用于同一列，所以firstCol=lastCol）</span><br>        <span class="hljs-type">CellRangeAddressList</span> <span class="hljs-variable">cellRangeAddressList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CellRangeAddressList</span>(firstRow, <span class="hljs-number">65535</span>, col,col);<br>        <span class="hljs-type">DataValidationHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> sheet.getDataValidationHelper();<br>       <span class="hljs-comment">//使用传入的字符串数组创建一个显式列表约束，确定下拉列表中的选项</span><br>        <span class="hljs-type">DataValidationConstraint</span> <span class="hljs-variable">dvConstraint</span> <span class="hljs-operator">=</span> helper.createExplicitListConstraint(strings);<br>       <span class="hljs-comment">//把创建的列表约束作用到那些范围内的单元格</span><br>        <span class="hljs-type">DataValidation</span> <span class="hljs-variable">validation</span> <span class="hljs-operator">=</span> helper.createValidation(dvConstraint, cellRangeAddressList);<br>       <span class="hljs-comment">//  作用到sheet上</span><br>        sheet.addValidationData(validation);<br>    &#125;<br></code></pre></td></tr></table></figure><p>但是以上代码有个问题就是，如果下拉选项过多，会无法显示，这时候我们就需要借助一个隐藏的字典sheet，这时候我们就需要修改一下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLongDropdown</span><span class="hljs-params">(Workbook workbook,<span class="hljs-type">int</span> firstRow, <span class="hljs-type">int</span> col, String[] strings )</span>&#123;<br>       <span class="hljs-type">XSSFSheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> (XSSFSheet)workbook.getSheetAt(<span class="hljs-number">0</span>);<br>       <span class="hljs-comment">//默认为最大65535</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">endRow</span> <span class="hljs-operator">=</span><span class="hljs-number">65535</span>;<br>       <span class="hljs-comment">//随便起个sheet名</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">hiddenName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hidden&quot;</span>+col;<br>       <span class="hljs-comment">//1.创建隐藏的sheet页。</span><br>       <span class="hljs-type">XSSFSheet</span> <span class="hljs-variable">hidden</span> <span class="hljs-operator">=</span> (XSSFSheet)workbook.createSheet(hiddenName);<br>       <span class="hljs-comment">//2.循环赋值（为了防止下拉框的行数与隐藏域的行数相对应，将隐藏域加到结束行之后）</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, length = strings.length; i &lt; length; i++) &#123;<br>           hidden.createRow(endRow + i).createCell(col).setCellValue(strings[i]);<br>       &#125;<br>       <span class="hljs-comment">//创建可被其他单元格引用的名称</span><br>       <span class="hljs-type">Name</span> <span class="hljs-variable">workbookName</span> <span class="hljs-operator">=</span> workbook.createName();<br>       workbookName.setNameName(hiddenName);<br>       <span class="hljs-comment">//3 A1:A代表隐藏域创建第N列createCell(N)时。以A1列开始A行数据获取下拉数组</span><br>       workbookName.setRefersToFormula(hiddenName + <span class="hljs-string">&quot;!A1:A&quot;</span> + (strings.length + endRow));<br>       <span class="hljs-type">DataValidationHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> sheet.getDataValidationHelper();<br>       <span class="hljs-type">DataValidationConstraint</span> <span class="hljs-variable">constraint</span> <span class="hljs-operator">=</span> helper.createFormulaListConstraint(hiddenName);<br>       <span class="hljs-type">CellRangeAddressList</span> <span class="hljs-variable">addressList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CellRangeAddressList</span>(firstRow, endRow, col, col);<br>       <span class="hljs-type">DataValidation</span> <span class="hljs-variable">dataValidation</span> <span class="hljs-operator">=</span> helper.createValidation(constraint, addressList);<br>       <span class="hljs-keyword">if</span> (dataValidation <span class="hljs-keyword">instanceof</span> XSSFDataValidation) &#123;<br>           <span class="hljs-comment">// 数据校验</span><br>           dataValidation.setSuppressDropDownArrow(<span class="hljs-literal">true</span>);<br>           dataValidation.setShowErrorBox(<span class="hljs-literal">true</span>);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           dataValidation.setSuppressDropDownArrow(<span class="hljs-literal">false</span>);<br>       &#125;<br>       <span class="hljs-comment">// 作用在目标sheet上</span><br>       sheet.addValidationData(dataValidation);<br>       <span class="hljs-comment">// 为了用户友好，设置hiddenSheet隐藏</span><br>       workbook.setSheetHidden(workbook.getSheetIndex(hiddenName), <span class="hljs-literal">true</span>);<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们在使用excel进行批量导入的时候，通常会提供导入模板excel来给用户来规范用户的输入，其中就会用到下拉选项来约束这一种方式&lt;/p&gt;
&lt;img src=&quot;https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/im</summary>
      
    
    
    
    <category term="Springboot" scheme="https://cason.work/categories/Springboot/"/>
    
    
    <category term="Easypoi" scheme="https://cason.work/tags/Easypoi/"/>
    
    <category term="Excel" scheme="https://cason.work/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>Arthas:排查cpu异常过高的问题</title>
    <link href="https://cason.work/2023/10/27/Arthas-%E6%8E%92%E6%9F%A5cpu%E5%BC%82%E5%B8%B8%E8%BF%87%E9%AB%98%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://cason.work/2023/10/27/Arthas-%E6%8E%92%E6%9F%A5cpu%E5%BC%82%E5%B8%B8%E8%BF%87%E9%AB%98%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2023-10-27T03:24:17.000Z</published>
    <updated>2024-04-11T02:27:28.316Z</updated>
    
    <content type="html"><![CDATA[<p>下载arthas</p><p><code>curl -O https://alibaba.github.io/arthas/arthas-boot.jar</code></p><p>启动arthas</p><p><code>java -jar arthas-boot.jar</code></p><p>dashboard 仪表板</p><blockquote><p>第一部分是显示JVM中运行的所有线程：所在线程组，优先级，线程的状态，CPU的占用率，是否是后台进程等</p><p>第二部分显示的JVM内存的使用情况</p><p>第三部分是操作系统的一些信息和Java版本号</p></blockquote><p><code>dashboard</code></p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20231226145518601.png" alt="image-20231226145518601"></p><p>通过 thread 命令来获取线程信息</p><blockquote><p>1、当没有参数时，显示所有线程的信息</p><p>thread<br>2、展示当前最忙的前3个线程并打印堆栈</p><p>thread -n 3<br>3、显示1号线程的运行堆栈</p><p>thread 1<br>4、找出当前阻塞其他线程的线程，有时候我们发现应用卡住了， 通常是由于某个线程拿住了某个锁， 并且其他线程都在等待这把锁造成的。 为了排查这类问题， arthas提供了thread -b， 一键找出那个罪魁祸首。</p><p>thread -b<br>5、指定采样时间间隔，每过1000毫秒采样，显示最占时间的3个线程</p><p>thread -i 1000 -n 3<br>6、查看处于等待状态的线程</p></blockquote><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/image-20231226145349492.png" alt="image-20231226145349492"></p><p>找对对应方法解决</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下载arthas&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl -O https://alibaba.github.io/arthas/arthas-boot.jar&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;启动arthas&lt;/p&gt;
&lt;p&gt;&lt;code&gt;java -jar arthas-boot.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Elasticseatch简单实践</title>
    <link href="https://cason.work/2023/09/05/Elasticseatch%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/"/>
    <id>https://cason.work/2023/09/05/Elasticseatch%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/</id>
    <published>2023-09-05T02:59:45.000Z</published>
    <updated>2024-04-11T02:27:28.311Z</updated>
    
    <content type="html"><![CDATA[<p>Elasticsearch是一个开源的分布式搜索和分析引擎，用于存储、搜索和分析大量数据。它最初由Elasticsearch BV（现在称为Elastic NV）开发，是Elastic Stack（以前称为ELK Stack）的核心组件之一。Elastic Stack是一个用于日志和数据分析的开源解决方案，包括Elasticsearch、Logstash和Kibana。</p><p>Elasticsearch的主要特点包括：</p><ol><li>分布式性能：Elasticsearch可以轻松地扩展到多个节点，以处理大规模的数据和查询。它使用分片和复制来确保数据的高可用性和性能。</li><li>实时搜索：Elasticsearch能够在文档被索引后几乎立即提供实时搜索结果，使其非常适用于各种应用，包括日志分析、搜索引擎、监控和仪表板等。</li><li>多数据类型支持：Elasticsearch支持多种数据类型，包括文本、数值、日期、地理位置等。这使得它非常灵活，可以应用于各种不同类型的数据分析任务。</li><li>强大的查询功能：Elasticsearch提供了丰富的查询语言和功能，包括全文搜索、模糊搜索、范围查询、聚合分析等，使用户可以针对不同的数据进行复杂的查询和分析。</li><li>可扩展性和插件生态系统：Elasticsearch具有丰富的插件生态系统，可以扩展其功能，包括安全性、监控、报告等方面。</li><li>开源和免费：Elasticsearch是开源软件，可免费使用，并且有一个活跃的社区支持和维护。</li></ol><p>Elasticsearch通常与其他Elastic Stack组件一起使用，例如Logstash用于数据收集和处理，Kibana用于数据可视化和仪表板创建。这些组件共同构建了强大的数据分析和搜索解决方案，广泛用于各种应用领域，包括企业搜索、日志分析、安全信息和事件管理（SIEM）、电子商务搜索等。</p><h2 id="安装ElasticSearch"><a href="#安装ElasticSearch" class="headerlink" title="安装ElasticSearch"></a>安装ElasticSearch</h2><ul><li><p>从Docker镜像仓库（通常是Docker Hub或其他镜像仓库）下载（或拉取）elasticsearch镜像到本地计算机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull elasticsearch:7.16.2<br></code></pre></td></tr></table></figure></li><li><p>创建启动一个名为 “es” 的后台运行的Elasticsearch容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name es -p 9200:9200 -p 9300:9300 -e ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot; -e &quot;discovery.type=single-node&quot; -v es:/usr/share/elasticsearch/data  elasticsearch:7.16.2<br></code></pre></td></tr></table></figure><blockquote><ol><li><code>docker run</code>: 这是Docker命令行工具中用于创建和运行容器的命令。</li><li><code>-d</code>: 这是一个选项，表示容器将以后台（守护进程）模式运行，即不会阻止终端。</li><li><code>--name es</code>: 这是一个选项，用于指定容器的名称为 “es”。这将使您能够使用容器名称引用容器，而不必依赖于容器的ID。</li><li><code>-p 9200:9200 -p 9300:9300</code>: 这是用于端口映射的选项。它将容器内部的9200端口映射到主机的9200端口，同时将容器内部的9300端口映射到主机的9300端口。这些端口是Elasticsearch用于与外部通信的端口，其中9200用于HTTP请求，9300用于内部节点通信。</li><li><code>-e ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot;</code>: 这是一个选项，用于设置Elasticsearch的Java虚拟机选项。在这里，它设置了初始堆大小（Xms）和最大堆大小（Xmx）都为256MB，以控制Elasticsearch使用的内存。</li><li><code>-e &quot;discovery.type=single-node&quot;</code>: 这是另一个选项，用于设置Elasticsearch的发现类型为 “single-node”。这表示Elasticsearch将作为单节点运行，适用于开发和测试环境。</li><li><code>-v es:/usr/share/elasticsearch/data</code>: 这是一个选项，用于将主机的一个卷（volume）挂载到容器内部的目录。这里将主机上的名为 “es” 的卷挂载到容器内的 “&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;data” 目录，用于持久化存储Elasticsearch的数据。</li><li><code>elasticsearch:7.16.2</code>: 这是要运行的Docker镜像的名称和标签。具体来说，这是Elasticsearch 7.16.2镜像的标识，Docker将根据此标识从Docker Hub拉取镜像并创建容器。</li></ol></blockquote></li><li><p>进入名为 “es” 的容器，并以交互方式（<code>-it</code>标志）启动一个bash shell。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it es /bin/bash<br></code></pre></td></tr></table></figure></li><li><p>在容器内安装ik中文分词器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.16.2/elasticsearch-analysis-ik-7.16.2.zip<br></code></pre></td></tr></table></figure></li><li><p>重启es容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart es<br></code></pre></td></tr></table></figure></li><li><p>验证分词插件是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 增加一个叫test001的索引<br>curl -X PUT http://localhost:9200/test001<br>// 成功返回 &#123;&quot;acknowledged&quot;:true,&quot;shards_acknowledged&quot;:true,&quot;index&quot;:&quot;test001&quot;&#125;<br><br>// ik_smart分词<br>curl -X POST \<br>&#x27;http://127.0.0.1:9200/test001/_analyze?pretty=true&#x27; \<br>-H &#x27;Content-Type: application/json&#x27; \<br>-d &#x27;&#123;&quot;text&quot;:&quot;我们是软件工程师&quot;,&quot;tokenizer&quot;:&quot;ik_smart&quot;&#125;&#x27;<br><br>// ik_max_word分词<br>curl -X POST \<br>&#x27;http://127.0.0.1:9200/test001/_analyze?pretty=true&#x27; \<br>-H &#x27;Content-Type: application/json&#x27; \<br>-d &#x27;&#123;&quot;text&quot;:&quot;我们是软件工程师&quot;,&quot;tokenizer&quot;:&quot;ik_max_word&quot;&#125;&#x27;<br></code></pre></td></tr></table></figure></li><li><p>我们可以在本机的 host 文件中，添加映射，将 <code>127.0.0.1 host.docker.internal</code>;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">host.docker.internal 127.0.0.1<br></code></pre></td></tr></table></figure></li><li><p>创建启动一个名为 “kibana” 的后台运行的kibana容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name kibana -e ELASTICSEARCH_HOSTS=http://host.docker.internal:9200 -p 5601:5601 -d kibana:7.16.2<br></code></pre></td></tr></table></figure></li><li><p>访问<a href="http://localhost:5601判断kibana是否启动成功">http://localhost:5601判断kibana是否启动成功</a></p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202309051448318.png" alt="image-20230905114036359"></p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202309051448326.png" alt="image-20230905114212959"></p></li></ul><h2 id="集成Springboot"><a href="#集成Springboot" class="headerlink" title="集成Springboot"></a>集成Springboot</h2><ul><li><p>添加Elasticsearch客户端库依赖项：这里我是跟着springboot的版本 2.3.9.RELEASE</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在<code>application.properties</code>或<code>application.yml</code>配置文件中，配置Elasticsearch连接信息，包括主机名、端口号等。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">elasticsearch:</span><br>      <span class="hljs-attr">client:</span><br>        <span class="hljs-attr">reactive:</span><br>          <span class="hljs-attr">endpoints:</span> <span class="hljs-string">http://localhost:9200</span><br></code></pre></td></tr></table></figure></li><li><p>创建实体类： 创建一个实体类，表示要存储在Elasticsearch中的文档。该实体类需要使用<code>@Document</code>注解来指定与Elasticsearch索引的映射。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Document(indexName = &quot;test_index&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestIndex</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String content;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;TestIndex&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&#x27;&quot;</span> + id + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, title=&#x27;&quot;</span> + title + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, content=&#x27;&quot;</span> + content + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建Elasticsearch存储库（Repository）： 创建一个Elasticsearch存储库接口，它将继承自Spring Data Elasticsearch的<code>ElasticsearchRepository</code>。这个存储库将用于定义与Elasticsearch索引的交互。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TestIndexElasticsearchRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ElasticsearchRepository</span>&lt;TestIndex, String&gt; &#123;<br>    List&lt;TestIndex&gt; <span class="hljs-title function_">findAllByContent</span><span class="hljs-params">(String content)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在test下创建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TestIndexElasticsearchRepository testIndexElasticsearchRepository;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">TestIndex</span> <span class="hljs-variable">testIndex</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestIndex</span>();<br>        testIndex.setId(<span class="hljs-string">&quot;1&quot;</span>);<br>        testIndex.setTitle(<span class="hljs-string">&quot;你好&quot;</span>);<br>        testIndex.setContent(<span class="hljs-string">&quot;我是java开发工程师&quot;</span>);<br>        <span class="hljs-type">TestIndex</span> <span class="hljs-variable">save</span> <span class="hljs-operator">=</span> testIndexElasticsearchRepository.save(testIndex);<br>        System.out.println(save);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">search</span><span class="hljs-params">()</span> &#123;<br>        List&lt;TestIndex&gt; testIndices = testIndexElasticsearchRepository.findAllByContent(<span class="hljs-string">&quot;java&quot;</span>);<br>        <span class="hljs-keyword">for</span> (TestIndex index : testIndices) &#123;<br>            System.out.println(index);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">find</span><span class="hljs-params">()</span> &#123;<br>        Iterable&lt;TestIndex&gt; testIndices = testIndexElasticsearchRepository.findAll();<br>        <span class="hljs-keyword">for</span> (TestIndex index : testIndices) &#123;<br>            System.out.println(index);<br>        &#125;<br>        <span class="hljs-type">TestIndex</span> <span class="hljs-variable">testIndex</span> <span class="hljs-operator">=</span> testIndexElasticsearchRepository.findById(<span class="hljs-string">&quot;1&quot;</span>).get();<br>        System.out.println(testIndex);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        testIndexElasticsearchRepository.deleteById(<span class="hljs-string">&quot;1&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>检查执行结果</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202309051448825.png" alt="image-20230905144512754"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Elasticsearch是一个开源的分布式搜索和分析引擎，用于存储、搜索和分析大量数据。它最初由Elasticsearch BV（现在称为Elastic NV）开发，是Elastic Stack（以前称为ELK Stack）的核心组件之一。Elastic Stack是一个</summary>
      
    
    
    
    <category term="Springboot" scheme="https://cason.work/categories/Springboot/"/>
    
    
    <category term="分布式系统" scheme="https://cason.work/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="ElasticSearch" scheme="https://cason.work/tags/ElasticSearch/"/>
    
    <category term="搜索与分析引擎" scheme="https://cason.work/tags/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%88%86%E6%9E%90%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务-Seata简单实践</title>
    <link href="https://cason.work/2023/08/28/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1-Seata%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/"/>
    <id>https://cason.work/2023/08/28/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1-Seata%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/</id>
    <published>2023-08-28T12:19:45.000Z</published>
    <updated>2024-04-11T02:48:04.781Z</updated>
    
    <content type="html"><![CDATA[<p>当涉及多个不同的计算机或系统之间的操作时，分布式事务是确保这些操作在一组相关的事务中保持一致性和隔离性的机制。在传统的单机事务中，可以使用数据库的事务来确保操作的一致性和隔离性。然而，在分布式系统中，数据分布在多个节点上，可能涉及网络问题、节点故障等，使得保持一致性变得更加复杂。分布式事务需要解决以下挑战：</p><ol><li><strong>原子性（Atomicity）</strong>：分布式事务要么全部成功，要么全部失败，不能只完成部分操作。这意味着如果一个操作失败，所有涉及的操作都必须回滚。</li><li><strong>一致性（Consistency）</strong>：事务开始前和结束后，系统必须保持一致状态。即使在分布式环境中，事务也必须确保数据不会进入不一致状态。</li><li><strong>隔离性（Isolation）</strong>：在事务执行过程中，各个事务之间应该相互隔离，以避免并发执行导致的问题，例如脏读、不可重复读和幻读。</li><li><strong>持久性（Durability）</strong>：一旦事务提交，其结果应该持久保存，即使发生系统故障也不应丢失。</li></ol><p>分布式事务模式</p><ol><li><strong>XA模式</strong>： XA是一种标准的分布式事务协议，它在两阶段提交（2PC）的基础上实现了分布式事务的ACID属性。XA涉及两个角色：事务管理器（TM）和资源管理器（RM）。在第一阶段，TM要求所有RM预提交事务。在第二阶段，TM发送全局提交或回滚命令，RM执行对应操作。虽然XA确保了一致性，但它的缺点是可能会导致阻塞，尤其是在网络故障或参与者故障的情况下。</li><li><strong>AT模式（Automatic Transaction）</strong>： AT模式是一种基于数据库的分布式事务解决方案，通过自动化事务的提交和回滚来实现一致性。每个参与者节点在执行事务之前会先尝试执行操作，然后记录操作产生的影响。如果所有参与者的操作都成功，那么事务就会被自动提交。如果有任何一个参与者的操作失败，整个事务会被回滚。AT模式避免了2PC的阻塞问题，但可能导致部分失败问题。</li><li><strong>TCC模式（Try-Confirm-Cancel）</strong>： TCC模式通过将一个大事务分解为三个阶段来实现分布式事务：尝试（Try）、确认（Confirm）和取消（Cancel）。在尝试阶段，所有参与者都会尝试执行操作。在确认阶段，如果所有参与者的操作都成功，就会进行确认操作。如果任何操作失败，就会进行取消操作。TCC模式提供了更细粒度的控制，但需要在代码中显式编写确认和取消逻辑。</li><li><strong>Saga模式</strong>： Saga模式将一个大事务拆分为一系列小步骤，每个步骤都是一个原子操作。每个步骤都有一个与之关联的补偿操作，用于撤销该步骤的影响。如果一个步骤失败，就会触发其关联的补偿操作，将系统状态回滚到一致状态。Saga模式适用于分布式环境中的长时间事务，但需要开发人员仔细设计补偿逻辑。</li></ol><h2 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h2><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><ul><li><p>下载</p><p>点击链接进去下载：<a href="https://seata.io/zh-cn/blog/download.html">https://seata.io/zh-cn/blog/download.html</a></p><p>本文的seata版本为1.7.0</p></li><li><p>配置</p><ul><li><p>参考conf&#x2F;application.example.yml修改conf&#x2F;application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7091</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">seata-server</span><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">config:</span> <span class="hljs-string">classpath:logback-spring.xml</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">$&#123;user.home&#125;/logs/seata</span><br><br><span class="hljs-attr">console:</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">seata</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">seata</span><br><span class="hljs-attr">seata:</span><br>  <span class="hljs-attr">config:</span><br>    <span class="hljs-comment"># support: nacos, consul, apollo, zk, etcd3</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">nacos</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>      <span class="hljs-attr">namespace:</span><br>      <span class="hljs-attr">group:</span> <span class="hljs-string">SEATA_GROUP</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attr">context-path:</span><br>      <span class="hljs-comment">##if use MSE Nacos with auth, mutex with username/password attribute</span><br>      <span class="hljs-comment">#access-key:</span><br>      <span class="hljs-comment">#secret-key:</span><br>      <span class="hljs-attr">data-id:</span> <span class="hljs-string">seataServer.properties</span><br>    <span class="hljs-attr">consul:</span><br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-comment"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">nacos</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">application:</span> <span class="hljs-string">seata-server</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>      <span class="hljs-attr">group:</span> <span class="hljs-string">SEATA_GROUP</span><br>      <span class="hljs-attr">namespace:</span><br>      <span class="hljs-attr">cluster:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attr">context-path:</span><br>  <span class="hljs-attr">store:</span><br>    <span class="hljs-comment"># support: file 、 db 、 redis</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">db:</span><br>      <span class="hljs-attr">datasource:</span> <span class="hljs-string">druid</span><br>      <span class="hljs-attr">db-type:</span> <span class="hljs-string">mysql</span><br>      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">min-conn:</span> <span class="hljs-number">10</span><br>      <span class="hljs-attr">max-conn:</span> <span class="hljs-number">100</span><br>      <span class="hljs-attr">global-table:</span> <span class="hljs-string">global_table</span><br>      <span class="hljs-attr">branch-table:</span> <span class="hljs-string">branch_table</span><br>      <span class="hljs-attr">lock-table:</span> <span class="hljs-string">lock_table</span><br>      <span class="hljs-attr">distributed-lock-table:</span> <span class="hljs-string">distributed_lock</span><br>      <span class="hljs-attr">query-limit:</span> <span class="hljs-number">1000</span><br>      <span class="hljs-attr">max-wait:</span> <span class="hljs-number">5000</span><br><span class="hljs-comment">#  server:</span><br><span class="hljs-comment">#    service-port: 8091 #If not configured, the default is &#x27;$&#123;server.port&#125; + 1000&#x27;</span><br>  <span class="hljs-attr">security:</span><br>    <span class="hljs-attr">secretKey:</span> <span class="hljs-string">SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</span><br>    <span class="hljs-attr">tokenValidityInMilliseconds:</span> <span class="hljs-number">1800000</span><br>    <span class="hljs-attr">ignore:</span><br>      <span class="hljs-attr">urls:</span> <span class="hljs-string">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.jpeg,/**/*.ico,/api/v1/auth/login</span><br></code></pre></td></tr></table></figure></li><li><p>mysql数据库创建seata库并执行&#x2F;seata&#x2F;script&#x2F;server&#x2F;db&#x2F;mysql.sql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- -------------------------------- The script used when storeMode is &#x27;db&#x27; --------------------------------<br>-- the table to store GlobalSession data<br>CREATE TABLE IF NOT EXISTS `global_table`<br>(<br>    `xid`                       VARCHAR(128) NOT NULL,<br>    `transaction_id`            BIGINT,<br>    `status`                    TINYINT      NOT NULL,<br>    `application_id`            VARCHAR(32),<br>    `transaction_service_group` VARCHAR(32),<br>    `transaction_name`          VARCHAR(128),<br>    `timeout`                   INT,<br>    `begin_time`                BIGINT,<br>    `application_data`          VARCHAR(2000),<br>    `gmt_create`                DATETIME,<br>    `gmt_modified`              DATETIME,<br>    PRIMARY KEY (`xid`),<br>    KEY `idx_status_gmt_modified` (`status` , `gmt_modified`),<br>    KEY `idx_transaction_id` (`transaction_id`)<br>) ENGINE = InnoDB<br>  DEFAULT CHARSET = utf8mb4;<br><br>-- the table to store BranchSession data<br>CREATE TABLE IF NOT EXISTS `branch_table`<br>(<br>    `branch_id`         BIGINT       NOT NULL,<br>    `xid`               VARCHAR(128) NOT NULL,<br>    `transaction_id`    BIGINT,<br>    `resource_group_id` VARCHAR(32),<br>    `resource_id`       VARCHAR(256),<br>    `branch_type`       VARCHAR(8),<br>    `status`            TINYINT,<br>    `client_id`         VARCHAR(64),<br>    `application_data`  VARCHAR(2000),<br>    `gmt_create`        DATETIME(6),<br>    `gmt_modified`      DATETIME(6),<br>    PRIMARY KEY (`branch_id`),<br>    KEY `idx_xid` (`xid`)<br>) ENGINE = InnoDB<br>  DEFAULT CHARSET = utf8mb4;<br><br>-- the table to store lock data<br>CREATE TABLE IF NOT EXISTS `lock_table`<br>(<br>    `row_key`        VARCHAR(128) NOT NULL,<br>    `xid`            VARCHAR(128),<br>    `transaction_id` BIGINT,<br>    `branch_id`      BIGINT       NOT NULL,<br>    `resource_id`    VARCHAR(256),<br>    `table_name`     VARCHAR(32),<br>    `pk`             VARCHAR(36),<br>    `status`         TINYINT      NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;0:locked ,1:rollbacking&#x27;,<br>    `gmt_create`     DATETIME,<br>    `gmt_modified`   DATETIME,<br>    PRIMARY KEY (`row_key`),<br>    KEY `idx_status` (`status`),<br>    KEY `idx_branch_id` (`branch_id`),<br>    KEY `idx_xid` (`xid`)<br>) ENGINE = InnoDB<br>  DEFAULT CHARSET = utf8mb4;<br><br>CREATE TABLE IF NOT EXISTS `distributed_lock`<br>(<br>    `lock_key`       CHAR(20) NOT NULL,<br>    `lock_value`     VARCHAR(20) NOT NULL,<br>    `expire`         BIGINT,<br>    primary key (`lock_key`)<br>) ENGINE = InnoDB<br>  DEFAULT CHARSET = utf8mb4;<br><br>INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&#x27;AsyncCommitting&#x27;, &#x27; &#x27;, 0);<br>INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&#x27;RetryCommitting&#x27;, &#x27; &#x27;, 0);<br>INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&#x27;RetryRollbacking&#x27;, &#x27; &#x27;, 0);<br>INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&#x27;TxTimeoutCheck&#x27;, &#x27; &#x27;, 0);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>启动</p><p>在seata目录下执行seata-server.sh 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/seata-server.sh <br></code></pre></td></tr></table></figure><p>访问<a href="http://localhost:7091/%EF%BC%8C%E5%87%BA%E7%8E%B0%E4%BB%A5%E4%B8%8B%E7%94%BB%E9%9D%A2%E4%BB%A3%E8%A1%A8%E6%88%90%E5%8A%9F%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E5%B0%B1%E6%98%AF%E5%9C%A8application.yml%E9%85%8D%E7%BD%AE%E7%9A%84console.user.username%E5%92%8Cconsole.user.password">http://localhost:7091/，出现以下画面代表成功账号密码就是在application.yml配置的console.user.username和console.user.password</a></p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202308282051746.png" alt="image-20230828204423604"></p><p>也可以在nacos页面中查看服务是否注册成功</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202308282051341.png" alt="image-20230828205059592"></p></li></ul><p>​</p><h3 id="微服务集成Seata"><a href="#微服务集成Seata" class="headerlink" title="微服务集成Seata"></a>微服务集成Seata</h3><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.seata<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.seata<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="XA"><a href="#XA" class="headerlink" title="XA"></a>XA</h4><h5 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h5><p>支持XA 事务的数据库。<br>Java 应用，通过 JDBC 访问数据库。</p><h5 id="整体机制"><a href="#整体机制" class="headerlink" title="整体机制"></a>整体机制</h5><p>在 Seata 定义的分布式事务框架内，利用事务资源（数据库、消息服务等）对 XA 协议的支持，以 XA 协议的机制来管理分支事务的一种 事务模式。</p><p>执行阶段：</p><p>可回滚：业务 SQL 操作放在 XA 分支中进行，由资源对 XA 协议的支持来保证 可回滚<br>持久化：XA 分支完成后，执行 XA prepare，同样，由资源对 XA 协议的支持来保证 持久化（即，之后任何意外都不会造成无法回滚的情况）</p><p>完成阶段：</p><p>分支提交：执行 XA 分支的 commit<br>分支回滚：执行 XA 分支的 rollback</p><ul><li><p>配置application.yml 使用XA模式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">seata:</span><br>  <span class="hljs-attr">data-source-proxy-mode:</span> <span class="hljs-string">XA</span><br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">nacos</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">application:</span> <span class="hljs-string">seata-server</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">&quot;&quot;</span><br>      <span class="hljs-attr">group:</span> <span class="hljs-string">DEFAULT_GROUP</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br>  <span class="hljs-comment">#事务组的名称</span><br>  <span class="hljs-attr">tx-service-group:</span> <span class="hljs-string">seata-demo</span><br>  <span class="hljs-attr">service:</span><br>    <span class="hljs-comment">#事务组和cluster的映射关系</span><br>    <span class="hljs-attr">vgroup-mapping:</span><br>    <span class="hljs-comment">#你配置的seata/conf/application.yml的 cluster</span><br>      <span class="hljs-attr">seata-demo:</span> <span class="hljs-string">default</span><br></code></pre></td></tr></table></figure></li><li><p>Seata通过封装数据库的XA接口，实现了分布式事务处理的流程，降低了使用者的复杂度。用户只要在Seata客户端进行简单的开启XA模式的配置，即可成功使用Seata的XA模式。XA模式的性能也较差，只适用于一些对事务一致性要求非常高的场景。</p><p>直接在service对用方法上添加注解@GlobalTransactional，即可生效</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202308311843476.png" alt="image-20230831183911000"></p><p>xa模式下的日志</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202308311843190.png" alt="image-20230831182630307"></p></li></ul><h4 id="AT"><a href="#AT" class="headerlink" title="AT"></a>AT</h4><h5 id="前提-1"><a href="#前提-1" class="headerlink" title="前提"></a>前提</h5><ul><li>基于支持本地 ACID 事务的关系型数据库。</li><li>Java 应用，通过 JDBC 访问数据库。</li></ul><h5 id="整体机制-1"><a href="#整体机制-1" class="headerlink" title="整体机制"></a>整体机制</h5><p>两阶段提交协议的演变：</p><ul><li>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</li><li>二阶段：<ul><li>提交异步化，非常快速地完成。</li><li>回滚通过一阶段的回滚日志进行反向补偿。</li></ul></li></ul><ul><li><p>mysql数据新增undo_log表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `undo_log` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT,<br>  `branch_id` bigint(20) NOT NULL,<br>  `xid` varchar(100) NOT NULL,<br>  `context` varchar(128) NOT NULL,<br>  `rollback_info` longblob NOT NULL,<br>  `log_status` int(11) NOT NULL,<br>  `log_created` datetime NOT NULL,<br>  `log_modified` datetime NOT NULL,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure></li><li><p>data-source-proxy-mode修改成AT模式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">seata:</span><br>  <span class="hljs-attr">data-source-proxy-mode:</span> <span class="hljs-string">AT</span><br></code></pre></td></tr></table></figure></li><li><p>AT下的日志</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202309011026520.png" alt="image-20230901101219676"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当涉及多个不同的计算机或系统之间的操作时，分布式事务是确保这些操作在一组相关的事务中保持一致性和隔离性的机制。在传统的单机事务中，可以使用数据库的事务来确保操作的一致性和隔离性。然而，在分布式系统中，数据分布在多个节点上，可能涉及网络问题、节点故障等，使得保持一致性变得更加</summary>
      
    
    
    
    <category term="SpringCloud" scheme="https://cason.work/categories/SpringCloud/"/>
    
    
  </entry>
  
  <entry>
    <title>熔断降级限流-Sentinel简单实践</title>
    <link href="https://cason.work/2023/08/25/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7%E9%99%90%E6%B5%81-Sentinel%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/"/>
    <id>https://cason.work/2023/08/25/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7%E9%99%90%E6%B5%81-Sentinel%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/</id>
    <published>2023-08-25T07:09:15.000Z</published>
    <updated>2024-04-11T02:27:28.314Z</updated>
    
    <content type="html"><![CDATA[<p>在分布式系统中，熔断、降级和限流是三种常见的保护策略，用于确保系统的稳定性和可用性。</p><p><strong>熔断：</strong> 熔断是一种针对特定服务或资源的保护机制。当该服务或资源出现异常、故障或性能下降时，熔断机制会迅速停止向该服务或资源发送请求，避免继续的请求可能加重问题。熔断通常基于一些指标（如错误率、响应时间等）进行触发，如果这些指标超过了预设的阈值，系统会将该服务熔断，即暂停对它的请求，直到一段时间后重新尝试。熔断有助于防止故障扩散，提高系统的稳定性。</p><p><strong>降级：</strong> 降级是一种在系统压力剧增、资源不足或异常情况下的应对策略。为了保持核心功能的可用性，系统可以主动放弃一些非核心或次要功能，从而减轻系统的负载。例如，在高流量期间，系统可以降级为提供基本的服务，禁用某些高成本或资源密集型的功能。这可以确保系统的关键部分仍然正常工作，即使在资源有限的情况下也能保持较好的响应性能。</p><p><strong>限流：</strong> 限流是一种控制系统访问量的策略，用于防止系统过载。通过限制对某个特定服务、接口或资源的并发访问数量，限流可以防止过多的请求影响系统的性能和可用性。限流可以基于多种条件进行，如设置每秒查询数（QPS）限制、并发连接数、请求频率等。这有助于维护系统的稳定性，确保系统在其可承受的负载范围内运行。</p><h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><p>Sentinel旨在解决分布式系统中常见的流量控制、熔断降级和保护问题，帮助开发人员构建稳定、可靠的微服务架构。以下是Sentinel的一些重要方面：</p><ol><li><p><strong>流量控制：</strong> Sentinel可以根据系统的负载情况和资源的可用性，限制对某个特定资源的访问。通过设定阈值，开发人员可以限制资源的并发访问数、QPS等，防止过多的请求导致资源耗尽或性能下降。</p></li><li><p><strong>熔断降级：</strong> Sentinel可以监控资源的错误率、异常率等情况。如果错误率超过了设定的阈值，Sentinel可以自动触发熔断操作，停止对该资源的请求一段时间，以防止故障扩散。熔断机制有助于保护系统免受故障的影响。</p></li><li><p><strong>系统保护：</strong> Sentinel可以监控整个系统的健康状态，包括系统负载、资源利用率等。当系统负载过高或出现异常情况时，Sentinel可以采取措施，如限制某些资源的访问，以保护整个系统免受过载的影响。</p></li><li><p><strong>实时监控和统计：</strong> Sentinel提供实时的监控面板和统计信息，开发人员可以通过这些信息了解资源的使用情况、异常情况和系统的整体状态。这些数据有助于及时发现问题并采取措施。</p></li><li><p><strong>规则配置：</strong> Sentinel允许开发人员配置流量控制和熔断降级的规则。规则可以基于资源的名称、路径、HTTP方法等进行配置，以适应不同的场景和需求。</p></li><li><p><strong>集成和适用性：</strong> Sentinel可以与各种编程语言和框架一起使用，适用于微服务架构中的各种场景。它提供了丰富的API和插件，以便与现有系统集成。</p></li></ol><h3 id="简单实践"><a href="#简单实践" class="headerlink" title="简单实践"></a>简单实践</h3><ul><li><p>下载sentinel</p><blockquote><p>地址：<a href="https://github.com/alibaba/Sentinel">https://github.com/alibaba/Sentinel</a></p></blockquote></li><li><p>启动sentinel</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -jar sentinel-dashboard-1.8.6.jar <br></code></pre></td></tr></table></figure><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202308251829872.png" alt="image-20230825182945267"></p></li><li><p><strong>引入依赖：</strong> 在你的Spring Boot项目的 <code>pom.xml</code> 文件中，添加Sentinel的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>配置：</strong> 在你的 <code>application.properties</code> 或 <code>application.yml</code> 文件中，可以进行一些基本的配置，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">sentinel:</span><br>      <span class="hljs-attr">transport:</span><br>        <span class="hljs-attr">dashboard:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8080</span><br></code></pre></td></tr></table></figure></li><li><p>启动项目即可在页面中实时监控、配置流控规则等</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202308251825142.png" alt="image-20230825182546927"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在分布式系统中，熔断、降级和限流是三种常见的保护策略，用于确保系统的稳定性和可用性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;熔断：&lt;/strong&gt; 熔断是一种针对特定服务或资源的保护机制。当该服务或资源出现异常、故障或性能下降时，熔断机制会迅速停止向该服务或资源发送请求，避免继续</summary>
      
    
    
    
    <category term="SpringCloud" scheme="https://cason.work/categories/SpringCloud/"/>
    
    
    <category term="分布式系统" scheme="https://cason.work/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Sentinel" scheme="https://cason.work/tags/Sentinel/"/>
    
    <category term="熔断" scheme="https://cason.work/tags/%E7%86%94%E6%96%AD/"/>
    
    <category term="降级" scheme="https://cason.work/tags/%E9%99%8D%E7%BA%A7/"/>
    
    <category term="限流" scheme="https://cason.work/tags/%E9%99%90%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>分布式配置中心-Nacos简单实践</title>
    <link href="https://cason.work/2023/08/23/%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-Nacos%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/"/>
    <id>https://cason.work/2023/08/23/%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-Nacos%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/</id>
    <published>2023-08-23T08:07:15.000Z</published>
    <updated>2024-04-11T02:27:28.318Z</updated>
    
    <content type="html"><![CDATA[<p>分布式配置中心是一种用于管理和集中存储应用程序配置的系统，特别适用于大规模、复杂的分布式系统。它的主要目标是将应用程序的配置信息从代码中分离出来，使得配置可以在运行时进行动态修改和管理，而无需重新部署应用程序。</p><p>以下是分布式配置中心的一些关键特点和优势：</p><ol><li><strong>集中管理：</strong> 分布式配置中心允许将所有应用程序的配置集中存储在一个地方，从而方便统一管理和修改配置，避免了在每个应用程序实例中手动更改配置。</li><li><strong>动态更新：</strong> 配置中心支持在应用程序运行时动态更新配置，而无需重新启动或重新部署应用。这对于需要频繁变更配置的场景非常有用。</li><li><strong>版本控制：</strong> 配置中心通常支持配置版本控制，使得可以跟踪配置的变更历史，方便回退或恢复配置。</li><li><strong>环境隔离：</strong> 配置中心允许将不同环境（如开发、测试、生产）的配置隔离开来，从而确保在不同环境中使用不同的配置。</li><li><strong>动态扩展：</strong> 配置中心可以支持多个应用程序实例和多个团队同时访问，并能够处理高并发的配置请求。</li><li><strong>安全性：</strong> 配置中心通常提供权限控制，确保只有授权用户可以访问和修改配置。</li><li><strong>集成支持：</strong> 配置中心可以与其他工具和框架集成，如监控系统、CI&#x2F;CD流水线等，从而更好地支持自动化和运维流程。</li></ol><h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><p>Nacos（Naming and Configuration Service）是阿里巴巴开源的一个用于服务发现、动态配置管理和可视化平台的项目。它结合了服务发现、配置管理和健康监测等功能，是一个综合的微服务基础设施组件。其中，Nacos的配置管理部分可以被用作分布式配置中心。</p><ul><li><p>添加nacos配置管理依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">  <span class="hljs-comment">&lt;!-- nacos的配置管理依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在resource下创建bootstrap.yaml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-comment"># 环境</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span> <br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-comment"># nacos地址</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-comment"># 文件后缀</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span> <br></code></pre></td></tr></table></figure><ol><li><strong>配置加载顺序：</strong> 在Spring Boot应用程序中，配置文件的加载顺序是有一定规则的。<code>bootstrap.yaml</code> 配置文件在加载顺序上位于其他配置文件（如 <code>application.yaml</code> 或 <code>application.properties</code>）之前。这意味着它可以用于配置一些在应用程序启动之前就需要的属性，例如连接到配置服务器的属性。</li><li><strong>外部配置加载：</strong> 通常，分布式系统中的应用程序可能需要从配置中心（如Nacos、Consul等）获取配置信息。<code>bootstrap.yaml</code> 配置文件可以用来配置与配置中心的连接和身份验证等信息，以便在应用程序启动时能够正确地加载配置。</li></ol></li><li><p>在nacos中以&lt;spring.application.name&gt;-&lt;spring.profiles.active&gt;.yaml作为data id在DEFAULT_GROUP新建配置，例如：gateway-dev.yaml</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202308231648127.png" alt="image-20230823161911507"></p></li></ul><p>项目启动后，无需重新启动或停机就会从nacos中动态加载配置下来，通过@Value即可获取对应的值。如果您将配置属性注入到了Spring管理的Bean中，而且希望在配置发生变化时动态刷新Bean的状态，您可以使用 <code>@RefreshScope</code> 注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RefreshScope</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;config.hello&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String helloConfig;<br><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;分布式配置中心是一种用于管理和集中存储应用程序配置的系统，特别适用于大规模、复杂的分布式系统。它的主要目标是将应用程序的配置信息从代码中分离出来，使得配置可以在运行时进行动态修改和管理，而无需重新部署应用程序。&lt;/p&gt;
&lt;p&gt;以下是分布式配置中心的一些关键特点和优势：&lt;/p</summary>
      
    
    
    
    <category term="SpringCloud" scheme="https://cason.work/categories/SpringCloud/"/>
    
    
    <category term="分布式系统" scheme="https://cason.work/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Nacos" scheme="https://cason.work/tags/Nacos/"/>
    
    <category term="配置中心" scheme="https://cason.work/tags/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>API网关-SpringCloud Gateway</title>
    <link href="https://cason.work/2023/08/17/API%E7%BD%91%E5%85%B3-SpringCloud-Gateway/"/>
    <id>https://cason.work/2023/08/17/API%E7%BD%91%E5%85%B3-SpringCloud-Gateway/</id>
    <published>2023-08-17T12:31:24.000Z</published>
    <updated>2024-04-11T02:27:28.320Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Cloud Gateway是一个基于Spring Framework的开源API网关，用于构建微服务架构中的统一访问层。它充当了应用程序和后端服务之间的代理，提供了路由、负载均衡、安全性、监控等功能，以简化微服务架构中的网络请求管理和流量控制。</p><p>Spring Cloud Gateway的主要特点包括：</p><ol><li><strong>动态路由：</strong> 可以根据请求的信息将流量路由到不同的后端服务，支持动态添加、删除和修改路由规则。</li><li><strong>负载均衡：</strong> 可以自动分配流量到多个实例，以提高系统的可用性和性能。</li><li><strong>断路器模式：</strong> 提供了断路器模式来处理后端服务的故障，防止故障服务对整个系统的影响。</li><li><strong>过滤器：</strong> 可以在请求和响应之间应用一系列的过滤器，用于修改请求、响应或执行一些预处理&#x2F;后处理操作。</li><li><strong>限流和速率控制：</strong> 可以通过配置限制每个路由或服务的请求速率，以防止过载和滥用。</li><li><strong>安全性：</strong> 可以集成Spring Security等安全框架，对请求进行认证和授权。</li><li><strong>监控和日志：</strong> 提供了监控和日志功能，帮助开发人员了解流量和系统的状态。</li><li><strong>易于扩展：</strong> 由于基于Spring Framework构建，因此可以通过自定义插件和过滤器来扩展其功能。</li></ol><h2 id="SpringCloud-Gateway简单使用"><a href="#SpringCloud-Gateway简单使用" class="headerlink" title="SpringCloud Gateway简单使用"></a>SpringCloud Gateway简单使用</h2><ul><li><p><strong>添加依赖：</strong> 在生成的<code>pom.xml</code>文件中，添加Spring Cloud Gateway的依赖。通常，您需要添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>因为我们使用了nacos实现服务注册与服务发现，所以也要引入nacos相关的依赖，如果不需要可以不引入，routes.uri直接指定目标服务的完整URL字符串。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">  <span class="hljs-comment">&lt;!--nacos服务发现依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>配置路由：</strong> 在<code>application.yml</code>或<code>application.properties</code>中配置您的路由规则。以下是一个简单的示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10010</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-comment"># 路由标示，必须唯一</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span><br>          <span class="hljs-comment"># 路由的目标地址</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://user-service</span><br>          <span class="hljs-comment"># 路由断言，判断请求是否符合规则</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-comment"># 路径断言，判断路径是否是以/user开头，如果是则符合</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span><br>          <span class="hljs-attr">filter:</span><br>          <span class="hljs-comment">#添加路由过滤器</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=Tag,userRequest</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">order-service</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://order-service</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/order/**</span><br>      <span class="hljs-comment">#添加default过滤器</span><br>      <span class="hljs-attr">default-filters:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=origin,gateway</span><br></code></pre></td></tr></table></figure><blockquote><ol><li><p><strong>直接URL字符串：</strong> 最简单的写法就是直接指定目标服务的完整URL字符串。</p><p><code>  uri: http://example.com</code></p></li><li><p><strong>lb协议：</strong> 使用<code>lb</code>协议可以通过服务发现来进行负载均衡，将请求分发到不同实例。</p><p> <code> uri: lb://service-name</code></p></li><li><p><strong>lb协议 + 负载均衡策略：</strong> 可以在<code>lb</code>协议后面添加负载均衡策略，如<code>lb://service-name?lbMethod=ROUND_ROBIN</code>。</p><p><code> uri: lb://service-name?lbMethod=ROUND_ROBIN</code></p></li><li><p><strong>使用自定义协议：</strong> 您可以定义自己的协议前缀，然后在目标URI中使用。</p><p><code>uri: custom://destination</code></p></li><li><p><strong>使用表达式：</strong> 您可以在<code>routes.uri</code>中使用SpEL表达式来动态生成目标URI。</p><p><code>uri: &quot;&#39;http://dynamic-&#39; + #serviceId + &#39;.example.com&#39;&quot;</code></p></li></ol></blockquote></li><li><p><strong>测试路由：</strong> 启动应用程序后，您可以使用浏览器或工具（如curl或Postman）来测试配置的路由。访问<code>http://localhost:10010/user/1</code>应该将请求代理到<code>http://user-service/user/1</code>。</p><p>![image-20230817210750025](..&#x2F;..&#x2F;..&#x2F;..&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230817210750025.png)</p></li><li><p>添加GlobalFilter简单实现访问鉴权</p><blockquote><p><code>GlobalFilter</code>是Spring Cloud Gateway中的一个重要概念，它允许您在请求和响应的生命周期中执行全局操作。这些操作可以用于各种目的，如身份验证、日志记录、添加请求头、处理异常等。<code>GlobalFilter</code>可以在整个网关的请求处理流程中应用，无论是在路由匹配之前还是之后。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorizeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span>, Ordered &#123;<br><br>    <span class="hljs-meta">@SneakyThrows(Exception.class)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> exchange.getRequest();<br>        MultiValueMap&lt;String, String&gt; params = request.getQueryParams();<br>        <span class="hljs-comment">//获取参数中的 authorization 参数 。通常是获取header里的authorization</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">authorization</span> <span class="hljs-operator">=</span> params.getFirst(<span class="hljs-string">&quot;authorization&quot;</span>);<br>        <span class="hljs-comment">//这里demo简单处理 判断数值是否等于 admin</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(authorization)) &#123;<br>            <span class="hljs-comment">//放行</span><br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125;<br>        <span class="hljs-comment">//先设置状态码</span><br>        <span class="hljs-type">ServerHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> exchange.getResponse();<br>        response.setStatusCode(HttpStatus.UNAUTHORIZED);<br>        <span class="hljs-type">DataBufferFactory</span> <span class="hljs-variable">bufferFactory</span> <span class="hljs-operator">=</span> response.bufferFactory();<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        <span class="hljs-type">DataBuffer</span> <span class="hljs-variable">wrap</span> <span class="hljs-operator">=</span> bufferFactory.wrap(objectMapper.writeValueAsBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RestResult</span>&lt;&gt;(<span class="hljs-number">401</span>, <span class="hljs-string">&quot;unauthrize&quot;</span>)));<br>        <span class="hljs-keyword">return</span> response.writeWith(Mono.fromSupplier(() -&gt; wrap));<br><span class="hljs-comment">//        //拦截请求</span><br><span class="hljs-comment">//        return exchange.getResponse().setComplete();</span><br>    &#125;<br><br>    <span class="hljs-comment">//设置优先级为-1</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上面代码通过对请求参数里的authorization是否等于admin简单实现了鉴权，是admin则通过</p><p>![image-20230817211428288](..&#x2F;..&#x2F;..&#x2F;..&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230817211428288.png)</p><p>否则返回401 httpstatus和json responsebody提示</p><p>![image-20230817211437210](..&#x2F;..&#x2F;..&#x2F;..&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230817211437210.png)</p></li></ul><h3 id="集成nacos配置中心实现动态路由"><a href="#集成nacos配置中心实现动态路由" class="headerlink" title="集成nacos配置中心实现动态路由"></a>集成nacos配置中心实现动态路由</h3><ul><li><p><strong>添加依赖</strong>：在上面配置的依赖的基础上添加nacos-config相关的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- nacos的配置管理依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>配置Nacos作为配置中心：</strong> 在<code>bootstrap.yaml</code>或<code>bootstrap.properties</code>中配置Nacos的配置中心信息，包括Nacos Server的地址和配置的Data ID、Group等信息。</p><p>bootstrap.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span> <span class="hljs-comment"># 环境</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment"># nacos地址</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span> <span class="hljs-comment"># 文件后缀</span><br></code></pre></td></tr></table></figure><p>application.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10010</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com.cason:</span> <span class="hljs-string">debug</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br></code></pre></td></tr></table></figure></li><li><p><strong>配置动态路由：</strong> 在Nacos配置中心中创建配置，用于定义动态路由规则。配置的Data ID可以根据您的实际情况进行定义，我这里用的是&lt;spring.application.name&gt;-&lt;spring.profiles.active&gt;.yaml以下是一个示例配置：</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202308172132323.png" alt="image-20230817212606004"></p></li><li><p><strong>测试</strong></p><ul><li><p>访问user，order相关路由没有问题</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202308172133265.png" alt="image-20230817213157261"></p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202308172133225.png" alt="image-20230817213209689"></p></li><li><p>移除user相关的路由，请求user相关路由404，请求order相关路由没有问题</p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202308172133551.png" alt="image-20230817213049030"></p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202308172133941.png" alt="image-20230817213130551"></p><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202308180955610.png" alt="image-20230817213238702"></p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Spring Cloud Gateway是一个基于Spring Framework的开源API网关，用于构建微服务架构中的统一访问层。它充当了应用程序和后端服务之间的代理，提供了路由、负载均衡、安全性、监控等功能，以简化微服务架构中的网络请求管理和流量控制。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="SpringCloud" scheme="https://cason.work/categories/SpringCloud/"/>
    
    
    <category term="Gateway" scheme="https://cason.work/tags/Gateway/"/>
    
    <category term="API网关" scheme="https://cason.work/tags/API%E7%BD%91%E5%85%B3/"/>
    
    <category term="分布式系统" scheme="https://cason.work/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>OpenFeign实践</title>
    <link href="https://cason.work/2023/08/16/OpenFeign%E5%AE%9E%E8%B7%B5/"/>
    <id>https://cason.work/2023/08/16/OpenFeign%E5%AE%9E%E8%B7%B5/</id>
    <published>2023-08-16T12:23:44.000Z</published>
    <updated>2024-04-11T02:27:28.322Z</updated>
    
    <content type="html"><![CDATA[<p>OpenFeign是一个用于声明式REST客户端的Java框架，它是由Netflix开发的，用于简化在Java应用程序中调用HTTP API的过程。它与Spring Cloud集成得很好，特别适用于微服务架构中的服务间通信。</p><p>OpenFeign的核心思想是通过定义接口的方式来描述远程API的调用。你可以使用注解在接口方法上指定HTTP请求的方式、URL、请求参数、请求体、响应处理等信息，而不必手动编写大量的HTTP请求代码。这种方式使得代码更加清晰、可读性更高，并且可以方便地维护和扩展。</p><p>主要特点和优势包括：</p><ol><li><strong>声明式接口定义：</strong> 使用Java接口来描述API调用，通过注解来配置请求的方式、路径等信息，使代码具有更高的可读性和可维护性。</li><li><strong>集成负载均衡：</strong> OpenFeign与Ribbon等负载均衡组件集成，可以自动地在多个服务实例中进行负载均衡，提高了系统的可用性和性能。</li><li><strong>内建Hystrix支持：</strong> OpenFeign集成了Hystrix，可以方便地为接口方法添加容错和降级的逻辑，增加了系统的可靠性。</li><li><strong>与Spring Cloud集成：</strong> OpenFeign与Spring Cloud框架无缝集成，可以与Eureka、Config、Zuul等组件协同工作，构建出完整的微服务架构。</li><li><strong>简化HTTP调用：</strong> OpenFeign自动处理HTTP请求和响应，减少了手动编写HTTP请求代码的复杂性。</li><li><strong>易于测试：</strong> 由于OpenFeign接口是基于Java接口定义的，因此可以方便地使用单元测试来测试接口方法。</li></ol><p>OpenFeign在微服务架构中发挥着重要的作用，通过简化服务间通信的实现，提高了开发效率并促进了系统的可靠性和可维护性。</p><h2 id="OpenFeign简单使用"><a href="#OpenFeign简单使用" class="headerlink" title="OpenFeign简单使用"></a>OpenFeign简单使用</h2><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--OpenFeign--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="启动类添加-EnableFeignClients注解"><a href="#启动类添加-EnableFeignClients注解" class="headerlink" title="启动类添加@EnableFeignClients注解"></a>启动类添加<code>@EnableFeignClients</code>注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="远程服务客户端"><a href="#远程服务客户端" class="headerlink" title="远程服务客户端"></a>远程服务客户端</h4><ul><li><p>User项目下创建UserController.java和UserService.java 通过&#x2F;user&#x2F;{id}提供服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> UserEntity <span class="hljs-title function_">getUser</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-type">UserEntity</span> <span class="hljs-variable">userEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserEntity</span>();<br>        userEntity.setId(id);<br>        userEntity.setName(<span class="hljs-string">&quot;用户&quot;</span>+id);<br>        <span class="hljs-keyword">return</span> userEntity;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserClient</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> UserEntity <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.getUser(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Order项目下创建UserClient.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;user-service&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserClient</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br>    UserEntity <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>@FeignClient注解声明式REST客户端接口上标记，以指示该接口将被OpenFeign用作远程服务调用的客户端。</p><p>主要属性包括：</p><ol><li><strong>name：</strong> 用于指定远程服务的名称。这通常是Eureka注册中心中的服务名称，以便OpenFeign能够根据名称找到对应的服务实例。例如：<code>@FeignClient(name = &quot;user-service&quot;)</code>。</li><li><strong>url：</strong> 如果不使用服务发现（例如Eureka）来定位服务，可以直接指定服务的URL。例如：<code>@FeignClient(url = &quot;http://localhost:8080&quot;)</code>。</li><li><strong>value：</strong> 与<code>name</code>属性相同，用于指定远程服务的名称。</li><li><strong>path：</strong> 用于指定基础路径，它会被添加到所有接口方法的URL前面。例如：<code>@FeignClient(name = &quot;user-service&quot;, path = &quot;/api&quot;)</code>。</li><li><strong>fallback：</strong> 指定一个降级处理的类，当远程服务调用失败时会执行降级逻辑。这个类需要实现相应的接口，并添加<code>@Component</code>注解以让Spring能够扫描到。例如：<code>@FeignClient(name = &quot;user-service&quot;, fallback = UserServiceFallback.class)</code>。</li><li><strong>fallbackFactory：</strong> 与<code>fallback</code>类似，但是这里指定的是一个降级处理工厂，用于创建降级处理类的实例。这通常用于实现更复杂的降级逻辑。例如：<code>@FeignClient(name = &quot;user-service&quot;, fallbackFactory = UserServiceFallbackFactory.class)</code>。</li></ol><h4 id="调用方"><a href="#调用方" class="headerlink" title="调用方"></a>调用方</h4><ul><li><p>Order项目下创建OrderService.java </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserClient userClient;<br><br><br>    <span class="hljs-keyword">public</span> OrderEntity <span class="hljs-title function_">getOrder</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-type">OrderEntity</span> <span class="hljs-variable">orderEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderEntity</span>();<br>        orderEntity.setUser(userClient.getUser(id));<br>        orderEntity.setId(id);<br>        orderEntity.setTitle(<span class="hljs-string">&quot;订单&quot;</span>+id);<br><br>        <span class="hljs-keyword">return</span> orderEntity;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Order项目下创建OrderController.java </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> OrderEntity <span class="hljs-title function_">getOrder</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>        <span class="hljs-keyword">return</span> orderService.getOrder(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202308162052859.png" alt="image-20230816204051210"></p><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p><img src="https://picgo-1258041929.cos.ap-guangzhou.myqcloud.com/img/202308162052726.png" alt="image-20230816204027091"></p><p>RPC 接口和实现各自放在独立的模块中，方便服务调用方重用服务接口，服务接口模块只能包括最基本的模块依靠（过多会导致依靠传递）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">user</span>:<br><span class="hljs-keyword">user</span><span class="hljs-operator">-</span>service<br><span class="hljs-keyword">user</span><span class="hljs-operator">-</span>api<br><span class="hljs-keyword">order</span>:<br><span class="hljs-keyword">order</span><span class="hljs-operator">-</span>service<br><span class="hljs-keyword">order</span><span class="hljs-operator">-</span>api<br></code></pre></td></tr></table></figure><p>xxx-api 模块中放服务调用方需求用到的东西，api接口，vo，入参等等。</p><p>xxx-service 实现 account-api 供给的接口。</p><ul><li><p>user-api</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;user-service&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserClient</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br>    UserEntity <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>user-service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserClient</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> UserEntity <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.getUser(id);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>Order-service引入user-api</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.cason<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>user-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>指定client注入容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(clients = &#123;UserClient.class&#125;)</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;OpenFeign是一个用于声明式REST客户端的Java框架，它是由Netflix开发的，用于简化在Java应用程序中调用HTTP API的过程。它与Spring Cloud集成得很好，特别适用于微服务架构中的服务间通信。&lt;/p&gt;
&lt;p&gt;OpenFeign的核心思想是通过</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="https://cason.work/tags/SpringCloud/"/>
    
  </entry>
  
</feed>
